
P7_SETR1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f138  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800f2c8  0800f2c8  000102c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f6e4  0800f6e4  0001130c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f6e4  0800f6e4  000106e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f6ec  0800f6ec  0001130c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f6ec  0800f6ec  000106ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f6f0  0800f6f0  000106f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000030c  20000000  0800f6f4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ccc  2000030c  0800fa00  0001130c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005fd8  0800fa00  00011fd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001130c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028cf7  00000000  00000000  0001133c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005594  00000000  00000000  0003a033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025b0  00000000  00000000  0003f5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d38  00000000  00000000  00041b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f851  00000000  00000000  000438b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bce7  00000000  00000000  00073101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001174ef  00000000  00000000  0009ede8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b62d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b40c  00000000  00000000  001b631c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001c1728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000030c 	.word	0x2000030c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f2b0 	.word	0x0800f2b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000310 	.word	0x20000310
 80001cc:	0800f2b0 	.word	0x0800f2b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
    // Pulse clock
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 1);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f82:	f003 fd41 	bl	8004a08 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000f86:	2001      	movs	r0, #1
 8000f88:	f001 fd08 	bl	800299c <HAL_Delay>
    HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f96:	f003 fd37 	bl	8004a08 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f001 fcfe 	bl	800299c <HAL_Delay>
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <lcd_reset>:

void lcd_reset(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2104      	movs	r1, #4
 8000fac:	4820      	ldr	r0, [pc, #128]	@ (8001030 <lcd_reset+0x8c>)
 8000fae:	f003 fd2b 	bl	8004a08 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2110      	movs	r1, #16
 8000fb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fba:	f003 fd25 	bl	8004a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2108      	movs	r1, #8
 8000fc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc6:	f003 fd1f 	bl	8004a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2110      	movs	r1, #16
 8000fce:	4818      	ldr	r0, [pc, #96]	@ (8001030 <lcd_reset+0x8c>)
 8000fd0:	f003 fd1a 	bl	8004a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	4815      	ldr	r0, [pc, #84]	@ (8001030 <lcd_reset+0x8c>)
 8000fda:	f003 fd15 	bl	8004a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fe4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe8:	f003 fd0e 	bl	8004a08 <HAL_GPIO_WritePin>
    // from any setting

    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2108      	movs	r1, #8
 8000ff0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff4:	f003 fd08 	bl	8004a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2110      	movs	r1, #16
 8000ffc:	480c      	ldr	r0, [pc, #48]	@ (8001030 <lcd_reset+0x8c>)
 8000ffe:	f003 fd03 	bl	8004a08 <HAL_GPIO_WritePin>
    lcd_clock();
 8001002:	f7ff ffb7 	bl	8000f74 <lcd_clock>
    lcd_clock();
 8001006:	f7ff ffb5 	bl	8000f74 <lcd_clock>
    lcd_clock();
 800100a:	f7ff ffb3 	bl	8000f74 <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)
    HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2108      	movs	r1, #8
 8001012:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001016:	f003 fcf7 	bl	8004a08 <HAL_GPIO_WritePin>
    lcd_clock();
 800101a:	f7ff ffab 	bl	8000f74 <lcd_clock>

    HAL_GPIO_WritePin(Led_LCD_GPIO_Port, Led_LCD_Pin, 1);
 800101e:	2201      	movs	r2, #1
 8001020:	2104      	movs	r1, #4
 8001022:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001026:	f003 fcef 	bl	8004a08 <HAL_GPIO_WritePin>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	48000400 	.word	0x48000400

08001034 <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	460a      	mov	r2, r1
 800103e:	71fb      	strb	r3, [r7, #7]
 8001040:	4613      	mov	r3, r2
 8001042:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	091b      	lsrs	r3, r3, #4
 8001048:	b2db      	uxtb	r3, r3
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	2b00      	cmp	r3, #0
 8001050:	d006      	beq.n	8001060 <lcd_write+0x2c>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8001052:	2201      	movs	r2, #1
 8001054:	2108      	movs	r1, #8
 8001056:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800105a:	f003 fcd5 	bl	8004a08 <HAL_GPIO_WritePin>
 800105e:	e005      	b.n	800106c <lcd_write+0x38>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2108      	movs	r1, #8
 8001064:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001068:	f003 fcce 	bl	8004a08 <HAL_GPIO_WritePin>

    if((byte >> 5 ) & 1)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	095b      	lsrs	r3, r3, #5
 8001070:	b2db      	uxtb	r3, r3
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b00      	cmp	r3, #0
 8001078:	d005      	beq.n	8001086 <lcd_write+0x52>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 800107a:	2201      	movs	r2, #1
 800107c:	2110      	movs	r1, #16
 800107e:	4847      	ldr	r0, [pc, #284]	@ (800119c <lcd_write+0x168>)
 8001080:	f003 fcc2 	bl	8004a08 <HAL_GPIO_WritePin>
 8001084:	e004      	b.n	8001090 <lcd_write+0x5c>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2110      	movs	r1, #16
 800108a:	4844      	ldr	r0, [pc, #272]	@ (800119c <lcd_write+0x168>)
 800108c:	f003 fcbc 	bl	8004a08 <HAL_GPIO_WritePin>

    if((byte >> 6 ) & 1)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	099b      	lsrs	r3, r3, #6
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d005      	beq.n	80010aa <lcd_write+0x76>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 800109e:	2201      	movs	r2, #1
 80010a0:	2102      	movs	r1, #2
 80010a2:	483e      	ldr	r0, [pc, #248]	@ (800119c <lcd_write+0x168>)
 80010a4:	f003 fcb0 	bl	8004a08 <HAL_GPIO_WritePin>
 80010a8:	e004      	b.n	80010b4 <lcd_write+0x80>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2102      	movs	r1, #2
 80010ae:	483b      	ldr	r0, [pc, #236]	@ (800119c <lcd_write+0x168>)
 80010b0:	f003 fcaa 	bl	8004a08 <HAL_GPIO_WritePin>

    if((byte >> 7 ) & 1)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	09db      	lsrs	r3, r3, #7
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d006      	beq.n	80010d0 <lcd_write+0x9c>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2110      	movs	r1, #16
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ca:	f003 fc9d 	bl	8004a08 <HAL_GPIO_WritePin>
 80010ce:	e005      	b.n	80010dc <lcd_write+0xa8>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2110      	movs	r1, #16
 80010d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d8:	f003 fc96 	bl	8004a08 <HAL_GPIO_WritePin>

    if(rs)
 80010dc:	79bb      	ldrb	r3, [r7, #6]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d005      	beq.n	80010ee <lcd_write+0xba>
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 1);
 80010e2:	2201      	movs	r2, #1
 80010e4:	2104      	movs	r1, #4
 80010e6:	482d      	ldr	r0, [pc, #180]	@ (800119c <lcd_write+0x168>)
 80010e8:	f003 fc8e 	bl	8004a08 <HAL_GPIO_WritePin>
 80010ec:	e004      	b.n	80010f8 <lcd_write+0xc4>
    else
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2104      	movs	r1, #4
 80010f2:	482a      	ldr	r0, [pc, #168]	@ (800119c <lcd_write+0x168>)
 80010f4:	f003 fc88 	bl	8004a08 <HAL_GPIO_WritePin>

    lcd_clock();
 80010f8:	f7ff ff3c 	bl	8000f74 <lcd_clock>

    // Write first nibble

    if(byte & 1)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d006      	beq.n	8001114 <lcd_write+0xe0>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8001106:	2201      	movs	r2, #1
 8001108:	2108      	movs	r1, #8
 800110a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800110e:	f003 fc7b 	bl	8004a08 <HAL_GPIO_WritePin>
 8001112:	e005      	b.n	8001120 <lcd_write+0xec>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2108      	movs	r1, #8
 8001118:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111c:	f003 fc74 	bl	8004a08 <HAL_GPIO_WritePin>

    if((byte >> 1 ) & 1)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	085b      	lsrs	r3, r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d005      	beq.n	800113a <lcd_write+0x106>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 800112e:	2201      	movs	r2, #1
 8001130:	2110      	movs	r1, #16
 8001132:	481a      	ldr	r0, [pc, #104]	@ (800119c <lcd_write+0x168>)
 8001134:	f003 fc68 	bl	8004a08 <HAL_GPIO_WritePin>
 8001138:	e004      	b.n	8001144 <lcd_write+0x110>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2110      	movs	r1, #16
 800113e:	4817      	ldr	r0, [pc, #92]	@ (800119c <lcd_write+0x168>)
 8001140:	f003 fc62 	bl	8004a08 <HAL_GPIO_WritePin>

    if((byte >> 2 ) & 1)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	b2db      	uxtb	r3, r3
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	d005      	beq.n	800115e <lcd_write+0x12a>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 8001152:	2201      	movs	r2, #1
 8001154:	2102      	movs	r1, #2
 8001156:	4811      	ldr	r0, [pc, #68]	@ (800119c <lcd_write+0x168>)
 8001158:	f003 fc56 	bl	8004a08 <HAL_GPIO_WritePin>
 800115c:	e004      	b.n	8001168 <lcd_write+0x134>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2102      	movs	r1, #2
 8001162:	480e      	ldr	r0, [pc, #56]	@ (800119c <lcd_write+0x168>)
 8001164:	f003 fc50 	bl	8004a08 <HAL_GPIO_WritePin>

    if((byte >> 3 ) & 1)
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	08db      	lsrs	r3, r3, #3
 800116c:	b2db      	uxtb	r3, r3
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d006      	beq.n	8001184 <lcd_write+0x150>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 8001176:	2201      	movs	r2, #1
 8001178:	2110      	movs	r1, #16
 800117a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800117e:	f003 fc43 	bl	8004a08 <HAL_GPIO_WritePin>
 8001182:	e005      	b.n	8001190 <lcd_write+0x15c>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	2110      	movs	r1, #16
 8001188:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800118c:	f003 fc3c 	bl	8004a08 <HAL_GPIO_WritePin>

    lcd_clock();
 8001190:	f7ff fef0 	bl	8000f74 <lcd_clock>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	48000400 	.word	0x48000400

080011a0 <lcd_clear>:

void lcd_clear(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
    // Clears display, resets cursor
    lcd_write(0b00000001, 0);
 80011a4:	2100      	movs	r1, #0
 80011a6:	2001      	movs	r0, #1
 80011a8:	f7ff ff44 	bl	8001034 <lcd_write>
    _lcd_char = 0;
 80011ac:	4b03      	ldr	r3, [pc, #12]	@ (80011bc <lcd_clear+0x1c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
    _lcd_line = 0;
 80011b2:	4b03      	ldr	r3, [pc, #12]	@ (80011c0 <lcd_clear+0x20>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000330 	.word	0x20000330
 80011c0:	20000331 	.word	0x20000331

080011c4 <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
 80011ce:	460b      	mov	r3, r1
 80011d0:	71bb      	strb	r3, [r7, #6]
 80011d2:	4613      	mov	r3, r2
 80011d4:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	f043 0308 	orr.w	r3, r3, #8
 80011e2:	b25a      	sxtb	r2, r3
 80011e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b25a      	sxtb	r2, r3
 80011f0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b25b      	sxtb	r3, r3
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff19 	bl	8001034 <lcd_write>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <lcd_display_address>:

void lcd_display_address(uint8_t address)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	71fb      	strb	r3, [r7, #7]
    lcd_write(0b10000000 | address, 0);
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff08 	bl	8001034 <lcd_write>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <lcd_print>:
{
	lcd_write(0b01000000 | address, 0);
}

void lcd_print(char string[])
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for(i = 0; string[i] != 0; i++) {
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	e055      	b.n	80012e6 <lcd_print+0xba>
        // If we know the display properties and a newline character is
        // present, print the rest of the string on the new line.
        if(lcd_lines && string[i] == '\n') {
 800123a:	4b30      	ldr	r3, [pc, #192]	@ (80012fc <lcd_print+0xd0>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d01c      	beq.n	800127c <lcd_print+0x50>
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4413      	add	r3, r2
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b0a      	cmp	r3, #10
 800124c:	d116      	bne.n	800127c <lcd_print+0x50>
            if(_lcd_line < lcd_lines) {
 800124e:	4b2c      	ldr	r3, [pc, #176]	@ (8001300 <lcd_print+0xd4>)
 8001250:	781a      	ldrb	r2, [r3, #0]
 8001252:	4b2a      	ldr	r3, [pc, #168]	@ (80012fc <lcd_print+0xd0>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	d242      	bcs.n	80012e0 <lcd_print+0xb4>
                lcd_display_address(lcd_line_addresses[_lcd_line++]);
 800125a:	4b2a      	ldr	r3, [pc, #168]	@ (8001304 <lcd_print+0xd8>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4b28      	ldr	r3, [pc, #160]	@ (8001300 <lcd_print+0xd4>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	1c59      	adds	r1, r3, #1
 8001264:	b2c8      	uxtb	r0, r1
 8001266:	4926      	ldr	r1, [pc, #152]	@ (8001300 <lcd_print+0xd4>)
 8001268:	7008      	strb	r0, [r1, #0]
 800126a:	4413      	add	r3, r2
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ffcb 	bl	800120a <lcd_display_address>
                _lcd_char = 0;
 8001274:	4b24      	ldr	r3, [pc, #144]	@ (8001308 <lcd_print+0xdc>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
            if(_lcd_line < lcd_lines) {
 800127a:	e031      	b.n	80012e0 <lcd_print+0xb4>
            }
        }
        else {
            // If we know the display properties and have reached the end of
            // line, print the rest on the next line
            if(lcd_chars)
 800127c:	4b23      	ldr	r3, [pc, #140]	@ (800130c <lcd_print+0xe0>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d01b      	beq.n	80012bc <lcd_print+0x90>
                if((_lcd_char == lcd_chars) && (_lcd_line < lcd_lines)) {
 8001284:	4b20      	ldr	r3, [pc, #128]	@ (8001308 <lcd_print+0xdc>)
 8001286:	781a      	ldrb	r2, [r3, #0]
 8001288:	4b20      	ldr	r3, [pc, #128]	@ (800130c <lcd_print+0xe0>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d115      	bne.n	80012bc <lcd_print+0x90>
 8001290:	4b1b      	ldr	r3, [pc, #108]	@ (8001300 <lcd_print+0xd4>)
 8001292:	781a      	ldrb	r2, [r3, #0]
 8001294:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <lcd_print+0xd0>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	d20f      	bcs.n	80012bc <lcd_print+0x90>
                    lcd_display_address(lcd_line_addresses[_lcd_line++]);
 800129c:	4b19      	ldr	r3, [pc, #100]	@ (8001304 <lcd_print+0xd8>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <lcd_print+0xd4>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	1c59      	adds	r1, r3, #1
 80012a6:	b2c8      	uxtb	r0, r1
 80012a8:	4915      	ldr	r1, [pc, #84]	@ (8001300 <lcd_print+0xd4>)
 80012aa:	7008      	strb	r0, [r1, #0]
 80012ac:	4413      	add	r3, r2
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ffaa 	bl	800120a <lcd_display_address>
                    _lcd_char = 0;
 80012b6:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <lcd_print+0xdc>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
                }
            lcd_write(string[i], 1);
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2101      	movs	r1, #1
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff feb4 	bl	8001034 <lcd_write>
            if(lcd_chars) _lcd_char++;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <lcd_print+0xe0>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d005      	beq.n	80012e0 <lcd_print+0xb4>
 80012d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <lcd_print+0xdc>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	3301      	adds	r3, #1
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <lcd_print+0xdc>)
 80012de:	701a      	strb	r2, [r3, #0]
    for(i = 0; string[i] != 0; i++) {
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	3301      	adds	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1a3      	bne.n	800123a <lcd_print+0xe>
        }
    }
}
 80012f2:	bf00      	nop
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000329 	.word	0x20000329
 8001300:	20000331 	.word	0x20000331
 8001304:	2000032c 	.word	0x2000032c
 8001308:	20000330 	.word	0x20000330
 800130c:	20000328 	.word	0x20000328

08001310 <writeIntegerToLCD>:

void writeIntegerToLCD(int integer)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	//	Break down the original number into the thousands, hundreds, tens,
	//	and ones places and then immediately write that value to the LCD
	unsigned char thousands = integer / 1000;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a32      	ldr	r2, [pc, #200]	@ (80013e4 <writeIntegerToLCD+0xd4>)
 800131c:	fb82 1203 	smull	r1, r2, r2, r3
 8001320:	1192      	asrs	r2, r2, #6
 8001322:	17db      	asrs	r3, r3, #31
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	73fb      	strb	r3, [r7, #15]
	lcd_write( thousands + 0x30,1);
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	3330      	adds	r3, #48	@ 0x30
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2101      	movs	r1, #1
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fe7f 	bl	8001034 <lcd_write>

	unsigned char hundreds = (integer - thousands*1000) / 100;
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	4a2b      	ldr	r2, [pc, #172]	@ (80013e8 <writeIntegerToLCD+0xd8>)
 800133a:	fb03 f202 	mul.w	r2, r3, r2
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	4a2a      	ldr	r2, [pc, #168]	@ (80013ec <writeIntegerToLCD+0xdc>)
 8001344:	fb82 1203 	smull	r1, r2, r2, r3
 8001348:	1152      	asrs	r2, r2, #5
 800134a:	17db      	asrs	r3, r3, #31
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	73bb      	strb	r3, [r7, #14]
	lcd_write( hundreds + 0x30,1);
 8001350:	7bbb      	ldrb	r3, [r7, #14]
 8001352:	3330      	adds	r3, #48	@ 0x30
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2101      	movs	r1, #1
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fe6b 	bl	8001034 <lcd_write>

	unsigned char tens = (integer - thousands*1000 - hundreds*100 ) / 10;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	4a21      	ldr	r2, [pc, #132]	@ (80013e8 <writeIntegerToLCD+0xd8>)
 8001362:	fb03 f202 	mul.w	r2, r3, r2
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	441a      	add	r2, r3
 800136a:	7bbb      	ldrb	r3, [r7, #14]
 800136c:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 8001370:	fb01 f303 	mul.w	r3, r1, r3
 8001374:	4413      	add	r3, r2
 8001376:	4a1e      	ldr	r2, [pc, #120]	@ (80013f0 <writeIntegerToLCD+0xe0>)
 8001378:	fb82 1203 	smull	r1, r2, r2, r3
 800137c:	1092      	asrs	r2, r2, #2
 800137e:	17db      	asrs	r3, r3, #31
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	737b      	strb	r3, [r7, #13]
	lcd_write( tens + 0x30,1);
 8001384:	7b7b      	ldrb	r3, [r7, #13]
 8001386:	3330      	adds	r3, #48	@ 0x30
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2101      	movs	r1, #1
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fe51 	bl	8001034 <lcd_write>

	unsigned char ones = (integer - thousands*1000 - hundreds*100 - tens*10);
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	461a      	mov	r2, r3
 8001396:	0052      	lsls	r2, r2, #1
 8001398:	4413      	add	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	b2da      	uxtb	r2, r3
 800139e:	7bbb      	ldrb	r3, [r7, #14]
 80013a0:	4619      	mov	r1, r3
 80013a2:	0089      	lsls	r1, r1, #2
 80013a4:	4419      	add	r1, r3
 80013a6:	00c9      	lsls	r1, r1, #3
 80013a8:	1acb      	subs	r3, r1, r3
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	4413      	add	r3, r2
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	4413      	add	r3, r2
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	7b7b      	ldrb	r3, [r7, #13]
 80013bc:	4619      	mov	r1, r3
 80013be:	0149      	lsls	r1, r1, #5
 80013c0:	1ac9      	subs	r1, r1, r3
 80013c2:	0089      	lsls	r1, r1, #2
 80013c4:	1acb      	subs	r3, r1, r3
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	4413      	add	r3, r2
 80013cc:	733b      	strb	r3, [r7, #12]
	lcd_write( ones + 0x30,1);
 80013ce:	7b3b      	ldrb	r3, [r7, #12]
 80013d0:	3330      	adds	r3, #48	@ 0x30
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2101      	movs	r1, #1
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fe2c 	bl	8001034 <lcd_write>
}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	10624dd3 	.word	0x10624dd3
 80013e8:	fffffc18 	.word	0xfffffc18
 80013ec:	51eb851f 	.word	0x51eb851f
 80013f0:	66666667 	.word	0x66666667

080013f4 <moveToXY>:

void moveToXY(unsigned char row, unsigned char column)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	460a      	mov	r2, r1
 80013fe:	71fb      	strb	r3, [r7, #7]
 8001400:	4613      	mov	r3, r2
 8001402:	71bb      	strb	r3, [r7, #6]
	//	Determine the new position
	int position = (row * 16) + column;
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	011a      	lsls	r2, r3, #4
 8001408:	79bb      	ldrb	r3, [r7, #6]
 800140a:	4413      	add	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]

	//	Send the correct commands to the command register of the LCD
	if(position < 16)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2b0f      	cmp	r3, #15
 8001412:	dc0a      	bgt.n	800142a <moveToXY+0x36>
		lcd_write( 0x80 | position,0);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	b25b      	sxtb	r3, r3
 8001418:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800141c:	b25b      	sxtb	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fe06 	bl	8001034 <lcd_write>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
	else if(position >= 41 && position < 60)
		lcd_write( 0x80 | (position % 40 + 0x14),0);
	else if(position >= 20 && position < 40)
		lcd_write( 0x80 | (position % 60 + 0x54),0);
}
 8001428:	e059      	b.n	80014de <moveToXY+0xea>
	else if(position >= 16 && position < 32)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2b0f      	cmp	r3, #15
 800142e:	dd17      	ble.n	8001460 <moveToXY+0x6c>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2b1f      	cmp	r3, #31
 8001434:	dc14      	bgt.n	8001460 <moveToXY+0x6c>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	425a      	negs	r2, r3
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	f002 020f 	and.w	r2, r2, #15
 8001442:	bf58      	it	pl
 8001444:	4253      	negpl	r3, r2
 8001446:	b2db      	uxtb	r3, r3
 8001448:	3340      	adds	r3, #64	@ 0x40
 800144a:	b2db      	uxtb	r3, r3
 800144c:	b25b      	sxtb	r3, r3
 800144e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001452:	b25b      	sxtb	r3, r3
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fdeb 	bl	8001034 <lcd_write>
 800145e:	e03e      	b.n	80014de <moveToXY+0xea>
	else if(position >= 41 && position < 60)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2b28      	cmp	r3, #40	@ 0x28
 8001464:	dd1b      	ble.n	800149e <moveToXY+0xaa>
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2b3b      	cmp	r3, #59	@ 0x3b
 800146a:	dc18      	bgt.n	800149e <moveToXY+0xaa>
		lcd_write( 0x80 | (position % 40 + 0x14),0);
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	4b1e      	ldr	r3, [pc, #120]	@ (80014e8 <moveToXY+0xf4>)
 8001470:	fb83 1302 	smull	r1, r3, r3, r2
 8001474:	1119      	asrs	r1, r3, #4
 8001476:	17d3      	asrs	r3, r2, #31
 8001478:	1ac9      	subs	r1, r1, r3
 800147a:	460b      	mov	r3, r1
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	1ad1      	subs	r1, r2, r3
 8001484:	b2cb      	uxtb	r3, r1
 8001486:	3314      	adds	r3, #20
 8001488:	b2db      	uxtb	r3, r3
 800148a:	b25b      	sxtb	r3, r3
 800148c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001490:	b25b      	sxtb	r3, r3
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fdcc 	bl	8001034 <lcd_write>
 800149c:	e01f      	b.n	80014de <moveToXY+0xea>
	else if(position >= 20 && position < 40)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2b13      	cmp	r3, #19
 80014a2:	dd1c      	ble.n	80014de <moveToXY+0xea>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b27      	cmp	r3, #39	@ 0x27
 80014a8:	dc19      	bgt.n	80014de <moveToXY+0xea>
		lcd_write( 0x80 | (position % 60 + 0x54),0);
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <moveToXY+0xf8>)
 80014ae:	fb83 1302 	smull	r1, r3, r3, r2
 80014b2:	4413      	add	r3, r2
 80014b4:	1159      	asrs	r1, r3, #5
 80014b6:	17d3      	asrs	r3, r2, #31
 80014b8:	1ac9      	subs	r1, r1, r3
 80014ba:	460b      	mov	r3, r1
 80014bc:	011b      	lsls	r3, r3, #4
 80014be:	1a5b      	subs	r3, r3, r1
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	1ad1      	subs	r1, r2, r3
 80014c4:	b2cb      	uxtb	r3, r1
 80014c6:	3354      	adds	r3, #84	@ 0x54
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	b25b      	sxtb	r3, r3
 80014cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014d0:	b25b      	sxtb	r3, r3
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fdac 	bl	8001034 <lcd_write>
}
 80014dc:	e7ff      	b.n	80014de <moveToXY+0xea>
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	66666667 	.word	0x66666667
 80014ec:	88888889 	.word	0x88888889

080014f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f4:	f001 f9dd 	bl	80028b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f8:	f000 f83a 	bl	8001570 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80014fc:	f000 f89a 	bl	8001634 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001500:	f000 fae0 	bl	8001ac4 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001504:	f000 f96c 	bl	80017e0 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001508:	f000 f9a2 	bl	8001850 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800150c:	f000 f9e0 	bl	80018d0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8001510:	f000 fa04 	bl	800191c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001514:	f000 fa76 	bl	8001a04 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001518:	f000 faa4 	bl	8001a64 <MX_USART3_UART_Init>
  MX_DAC1_Init();
 800151c:	f000 f92e 	bl	800177c <MX_DAC1_Init>
  MX_TIM7_Init();
 8001520:	f000 fa3a 	bl	8001998 <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 8001524:	f00a fa78 	bl	800ba18 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001528:	f000 f8b2 	bl	8001690 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 800152c:	2110      	movs	r1, #16
 800152e:	480e      	ldr	r0, [pc, #56]	@ (8001568 <main+0x78>)
 8001530:	f002 fdad 	bl	800408e <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8001534:	480d      	ldr	r0, [pc, #52]	@ (800156c <main+0x7c>)
 8001536:	f006 fa71 	bl	8007a1c <HAL_TIM_Base_Start_IT>
  lcd_reset();
 800153a:	f7ff fd33 	bl	8000fa4 <lcd_reset>
  lcd_display_settings(1,0,0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	2001      	movs	r0, #1
 8001544:	f7ff fe3e 	bl	80011c4 <lcd_display_settings>
  lcd_clear();
 8001548:	f7ff fe2a 	bl	80011a0 <lcd_clear>
  HAL_GPIO_WritePin(GPIOA, Led_LCD_Pin, 1);
 800154c:	2201      	movs	r2, #1
 800154e:	2104      	movs	r1, #4
 8001550:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001554:	f003 fa58 	bl	8004a08 <HAL_GPIO_WritePin>
    writeIntegerToLCD(HAL_ADC_GetValue (&hadc1));
    HAL_Delay(300);*/
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    my_button();
 8001558:	f000 fc2e 	bl	8001db8 <my_button>
    HAL_Delay(200);
 800155c:	20c8      	movs	r0, #200	@ 0xc8
 800155e:	f001 fa1d 	bl	800299c <HAL_Delay>
    my_button();
 8001562:	bf00      	nop
 8001564:	e7f8      	b.n	8001558 <main+0x68>
 8001566:	bf00      	nop
 8001568:	20000398 	.word	0x20000398
 800156c:	200004e0 	.word	0x200004e0

08001570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b096      	sub	sp, #88	@ 0x58
 8001574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	2244      	movs	r2, #68	@ 0x44
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f00b fdc9 	bl	800d116 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001584:	463b      	mov	r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001592:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001596:	f004 fd59 	bl	800604c <HAL_PWREx_ControlVoltageScaling>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015a0:	f000 fca4 	bl	8001eec <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015a4:	f004 fd34 	bl	8006010 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015a8:	4b21      	ldr	r3, [pc, #132]	@ (8001630 <SystemClock_Config+0xc0>)
 80015aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ae:	4a20      	ldr	r2, [pc, #128]	@ (8001630 <SystemClock_Config+0xc0>)
 80015b0:	f023 0318 	bic.w	r3, r3, #24
 80015b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80015b8:	2314      	movs	r3, #20
 80015ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015bc:	2301      	movs	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015c0:	2301      	movs	r3, #1
 80015c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015c8:	2360      	movs	r3, #96	@ 0x60
 80015ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015cc:	2302      	movs	r3, #2
 80015ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015d0:	2301      	movs	r3, #1
 80015d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015d4:	2301      	movs	r3, #1
 80015d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80015d8:	2328      	movs	r3, #40	@ 0x28
 80015da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015dc:	2307      	movs	r3, #7
 80015de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015e0:	2302      	movs	r3, #2
 80015e2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015e4:	2302      	movs	r3, #2
 80015e6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4618      	mov	r0, r3
 80015ee:	f004 fe4f 	bl	8006290 <HAL_RCC_OscConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80015f8:	f000 fc78 	bl	8001eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fc:	230f      	movs	r3, #15
 80015fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001600:	2303      	movs	r3, #3
 8001602:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001610:	463b      	mov	r3, r7
 8001612:	2104      	movs	r1, #4
 8001614:	4618      	mov	r0, r3
 8001616:	f005 fa17 	bl	8006a48 <HAL_RCC_ClockConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001620:	f000 fc64 	bl	8001eec <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001624:	f005 ff1e 	bl	8007464 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001628:	bf00      	nop
 800162a:	3758      	adds	r7, #88	@ 0x58
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021000 	.word	0x40021000

08001634 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b0a2      	sub	sp, #136	@ 0x88
 8001638:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800163a:	463b      	mov	r3, r7
 800163c:	2288      	movs	r2, #136	@ 0x88
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f00b fd68 	bl	800d116 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8001646:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800164a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800164c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001650:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001652:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001656:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001658:	2301      	movs	r3, #1
 800165a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800165c:	2301      	movs	r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001660:	2318      	movs	r3, #24
 8001662:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001664:	2307      	movs	r3, #7
 8001666:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001668:	2302      	movs	r3, #2
 800166a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800166c:	2302      	movs	r3, #2
 800166e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001670:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 8001674:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001676:	463b      	mov	r3, r7
 8001678:	4618      	mov	r0, r3
 800167a:	f005 fc09 	bl	8006e90 <HAL_RCCEx_PeriphCLKConfig>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001684:	f000 fc32 	bl	8001eec <Error_Handler>
  }
}
 8001688:	bf00      	nop
 800168a:	3788      	adds	r7, #136	@ 0x88
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	@ 0x28
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
 80016b0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001770 <MX_ADC1_Init+0xe0>)
 80016b4:	4a2f      	ldr	r2, [pc, #188]	@ (8001774 <MX_ADC1_Init+0xe4>)
 80016b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001770 <MX_ADC1_Init+0xe0>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016be:	4b2c      	ldr	r3, [pc, #176]	@ (8001770 <MX_ADC1_Init+0xe0>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001770 <MX_ADC1_Init+0xe0>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016ca:	4b29      	ldr	r3, [pc, #164]	@ (8001770 <MX_ADC1_Init+0xe0>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016d0:	4b27      	ldr	r3, [pc, #156]	@ (8001770 <MX_ADC1_Init+0xe0>)
 80016d2:	2204      	movs	r2, #4
 80016d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016d6:	4b26      	ldr	r3, [pc, #152]	@ (8001770 <MX_ADC1_Init+0xe0>)
 80016d8:	2200      	movs	r2, #0
 80016da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016dc:	4b24      	ldr	r3, [pc, #144]	@ (8001770 <MX_ADC1_Init+0xe0>)
 80016de:	2200      	movs	r2, #0
 80016e0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80016e2:	4b23      	ldr	r3, [pc, #140]	@ (8001770 <MX_ADC1_Init+0xe0>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016e8:	4b21      	ldr	r3, [pc, #132]	@ (8001770 <MX_ADC1_Init+0xe0>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001770 <MX_ADC1_Init+0xe0>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001770 <MX_ADC1_Init+0xe0>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001770 <MX_ADC1_Init+0xe0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001704:	4b1a      	ldr	r3, [pc, #104]	@ (8001770 <MX_ADC1_Init+0xe0>)
 8001706:	2200      	movs	r2, #0
 8001708:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800170a:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <MX_ADC1_Init+0xe0>)
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001712:	4817      	ldr	r0, [pc, #92]	@ (8001770 <MX_ADC1_Init+0xe0>)
 8001714:	f001 fb4a 	bl	8002dac <HAL_ADC_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800171e:	f000 fbe5 	bl	8001eec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001726:	f107 031c 	add.w	r3, r7, #28
 800172a:	4619      	mov	r1, r3
 800172c:	4810      	ldr	r0, [pc, #64]	@ (8001770 <MX_ADC1_Init+0xe0>)
 800172e:	f002 facb 	bl	8003cc8 <HAL_ADCEx_MultiModeConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001738:	f000 fbd8 	bl	8001eec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800173c:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <MX_ADC1_Init+0xe8>)
 800173e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001740:	2306      	movs	r3, #6
 8001742:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001748:	237f      	movs	r3, #127	@ 0x7f
 800174a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800174c:	2304      	movs	r3, #4
 800174e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	4619      	mov	r1, r3
 8001758:	4805      	ldr	r0, [pc, #20]	@ (8001770 <MX_ADC1_Init+0xe0>)
 800175a:	f001 fe17 	bl	800338c <HAL_ADC_ConfigChannel>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001764:	f000 fbc2 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	3728      	adds	r7, #40	@ 0x28
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000334 	.word	0x20000334
 8001774:	50040000 	.word	0x50040000
 8001778:	3ac04000 	.word	0x3ac04000

0800177c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	@ 0x28
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	2224      	movs	r2, #36	@ 0x24
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f00b fcc4 	bl	800d116 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800178e:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <MX_DAC1_Init+0x5c>)
 8001790:	4a12      	ldr	r2, [pc, #72]	@ (80017dc <MX_DAC1_Init+0x60>)
 8001792:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001794:	4810      	ldr	r0, [pc, #64]	@ (80017d8 <MX_DAC1_Init+0x5c>)
 8001796:	f002 fc58 	bl	800404a <HAL_DAC_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80017a0:	f000 fba4 	bl	8001eec <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2210      	movs	r2, #16
 80017bc:	4619      	mov	r1, r3
 80017be:	4806      	ldr	r0, [pc, #24]	@ (80017d8 <MX_DAC1_Init+0x5c>)
 80017c0:	f002 fd3b 	bl	800423a <HAL_DAC_ConfigChannel>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80017ca:	f000 fb8f 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	3728      	adds	r7, #40	@ 0x28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000398 	.word	0x20000398
 80017dc:	40007400 	.word	0x40007400

080017e0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80017e4:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <MX_DFSDM1_Init+0x68>)
 80017e6:	4a19      	ldr	r2, [pc, #100]	@ (800184c <MX_DFSDM1_Init+0x6c>)
 80017e8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80017ea:	4b17      	ldr	r3, [pc, #92]	@ (8001848 <MX_DFSDM1_Init+0x68>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80017f0:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <MX_DFSDM1_Init+0x68>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80017f6:	4b14      	ldr	r3, [pc, #80]	@ (8001848 <MX_DFSDM1_Init+0x68>)
 80017f8:	2202      	movs	r2, #2
 80017fa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80017fc:	4b12      	ldr	r3, [pc, #72]	@ (8001848 <MX_DFSDM1_Init+0x68>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001802:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <MX_DFSDM1_Init+0x68>)
 8001804:	2200      	movs	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001808:	4b0f      	ldr	r3, [pc, #60]	@ (8001848 <MX_DFSDM1_Init+0x68>)
 800180a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800180e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001810:	4b0d      	ldr	r3, [pc, #52]	@ (8001848 <MX_DFSDM1_Init+0x68>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001816:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <MX_DFSDM1_Init+0x68>)
 8001818:	2204      	movs	r2, #4
 800181a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800181c:	4b0a      	ldr	r3, [pc, #40]	@ (8001848 <MX_DFSDM1_Init+0x68>)
 800181e:	2200      	movs	r2, #0
 8001820:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001822:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <MX_DFSDM1_Init+0x68>)
 8001824:	2201      	movs	r2, #1
 8001826:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001828:	4b07      	ldr	r3, [pc, #28]	@ (8001848 <MX_DFSDM1_Init+0x68>)
 800182a:	2200      	movs	r2, #0
 800182c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <MX_DFSDM1_Init+0x68>)
 8001830:	2200      	movs	r2, #0
 8001832:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001834:	4804      	ldr	r0, [pc, #16]	@ (8001848 <MX_DFSDM1_Init+0x68>)
 8001836:	f002 fe31 	bl	800449c <HAL_DFSDM_ChannelInit>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001840:	f000 fb54 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200003ac 	.word	0x200003ac
 800184c:	40016020 	.word	0x40016020

08001850 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001854:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <MX_I2C2_Init+0x74>)
 8001856:	4a1c      	ldr	r2, [pc, #112]	@ (80018c8 <MX_I2C2_Init+0x78>)
 8001858:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800185a:	4b1a      	ldr	r3, [pc, #104]	@ (80018c4 <MX_I2C2_Init+0x74>)
 800185c:	4a1b      	ldr	r2, [pc, #108]	@ (80018cc <MX_I2C2_Init+0x7c>)
 800185e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001860:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <MX_I2C2_Init+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001866:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <MX_I2C2_Init+0x74>)
 8001868:	2201      	movs	r2, #1
 800186a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800186c:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <MX_I2C2_Init+0x74>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001872:	4b14      	ldr	r3, [pc, #80]	@ (80018c4 <MX_I2C2_Init+0x74>)
 8001874:	2200      	movs	r2, #0
 8001876:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001878:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <MX_I2C2_Init+0x74>)
 800187a:	2200      	movs	r2, #0
 800187c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800187e:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <MX_I2C2_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001884:	4b0f      	ldr	r3, [pc, #60]	@ (80018c4 <MX_I2C2_Init+0x74>)
 8001886:	2200      	movs	r2, #0
 8001888:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800188a:	480e      	ldr	r0, [pc, #56]	@ (80018c4 <MX_I2C2_Init+0x74>)
 800188c:	f003 f8f7 	bl	8004a7e <HAL_I2C_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001896:	f000 fb29 	bl	8001eec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800189a:	2100      	movs	r1, #0
 800189c:	4809      	ldr	r0, [pc, #36]	@ (80018c4 <MX_I2C2_Init+0x74>)
 800189e:	f003 f989 	bl	8004bb4 <HAL_I2CEx_ConfigAnalogFilter>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80018a8:	f000 fb20 	bl	8001eec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80018ac:	2100      	movs	r1, #0
 80018ae:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <MX_I2C2_Init+0x74>)
 80018b0:	f003 f9cb 	bl	8004c4a <HAL_I2CEx_ConfigDigitalFilter>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80018ba:	f000 fb17 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200003e4 	.word	0x200003e4
 80018c8:	40005800 	.word	0x40005800
 80018cc:	10d19ce4 	.word	0x10d19ce4

080018d0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <MX_QUADSPI_Init+0x44>)
 80018d6:	4a10      	ldr	r2, [pc, #64]	@ (8001918 <MX_QUADSPI_Init+0x48>)
 80018d8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <MX_QUADSPI_Init+0x44>)
 80018dc:	2202      	movs	r2, #2
 80018de:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <MX_QUADSPI_Init+0x44>)
 80018e2:	2204      	movs	r2, #4
 80018e4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <MX_QUADSPI_Init+0x44>)
 80018e8:	2210      	movs	r2, #16
 80018ea:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80018ec:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <MX_QUADSPI_Init+0x44>)
 80018ee:	2217      	movs	r2, #23
 80018f0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80018f2:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <MX_QUADSPI_Init+0x44>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <MX_QUADSPI_Init+0x44>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80018fe:	4805      	ldr	r0, [pc, #20]	@ (8001914 <MX_QUADSPI_Init+0x44>)
 8001900:	f004 fc0a 	bl	8006118 <HAL_QSPI_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800190a:	f000 faef 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000438 	.word	0x20000438
 8001918:	a0001000 	.word	0xa0001000

0800191c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001920:	4b1b      	ldr	r3, [pc, #108]	@ (8001990 <MX_SPI3_Init+0x74>)
 8001922:	4a1c      	ldr	r2, [pc, #112]	@ (8001994 <MX_SPI3_Init+0x78>)
 8001924:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001926:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <MX_SPI3_Init+0x74>)
 8001928:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800192c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800192e:	4b18      	ldr	r3, [pc, #96]	@ (8001990 <MX_SPI3_Init+0x74>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001934:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <MX_SPI3_Init+0x74>)
 8001936:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800193a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800193c:	4b14      	ldr	r3, [pc, #80]	@ (8001990 <MX_SPI3_Init+0x74>)
 800193e:	2200      	movs	r2, #0
 8001940:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001942:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <MX_SPI3_Init+0x74>)
 8001944:	2200      	movs	r2, #0
 8001946:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <MX_SPI3_Init+0x74>)
 800194a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800194e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001950:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <MX_SPI3_Init+0x74>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001956:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <MX_SPI3_Init+0x74>)
 8001958:	2200      	movs	r2, #0
 800195a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800195c:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <MX_SPI3_Init+0x74>)
 800195e:	2200      	movs	r2, #0
 8001960:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001962:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <MX_SPI3_Init+0x74>)
 8001964:	2200      	movs	r2, #0
 8001966:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001968:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <MX_SPI3_Init+0x74>)
 800196a:	2207      	movs	r2, #7
 800196c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800196e:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <MX_SPI3_Init+0x74>)
 8001970:	2200      	movs	r2, #0
 8001972:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <MX_SPI3_Init+0x74>)
 8001976:	2208      	movs	r2, #8
 8001978:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800197a:	4805      	ldr	r0, [pc, #20]	@ (8001990 <MX_SPI3_Init+0x74>)
 800197c:	f005 ff54 	bl	8007828 <HAL_SPI_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001986:	f000 fab1 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	2000047c 	.word	0x2000047c
 8001994:	40003c00 	.word	0x40003c00

08001998 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80019a8:	4b14      	ldr	r3, [pc, #80]	@ (80019fc <MX_TIM7_Init+0x64>)
 80019aa:	4a15      	ldr	r2, [pc, #84]	@ (8001a00 <MX_TIM7_Init+0x68>)
 80019ac:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80019ae:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <MX_TIM7_Init+0x64>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b4:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <MX_TIM7_Init+0x64>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 3300;
 80019ba:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <MX_TIM7_Init+0x64>)
 80019bc:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80019c0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c2:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <MX_TIM7_Init+0x64>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80019c8:	480c      	ldr	r0, [pc, #48]	@ (80019fc <MX_TIM7_Init+0x64>)
 80019ca:	f005 ffd0 	bl	800796e <HAL_TIM_Base_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80019d4:	f000 fa8a 	bl	8001eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d8:	2300      	movs	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	4619      	mov	r1, r3
 80019e4:	4805      	ldr	r0, [pc, #20]	@ (80019fc <MX_TIM7_Init+0x64>)
 80019e6:	f006 f92f 	bl	8007c48 <HAL_TIMEx_MasterConfigSynchronization>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80019f0:	f000 fa7c 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	200004e0 	.word	0x200004e0
 8001a00:	40001400 	.word	0x40001400

08001a04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a08:	4b14      	ldr	r3, [pc, #80]	@ (8001a5c <MX_USART1_UART_Init+0x58>)
 8001a0a:	4a15      	ldr	r2, [pc, #84]	@ (8001a60 <MX_USART1_UART_Init+0x5c>)
 8001a0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a0e:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <MX_USART1_UART_Init+0x58>)
 8001a10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a16:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <MX_USART1_UART_Init+0x58>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <MX_USART1_UART_Init+0x58>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <MX_USART1_UART_Init+0x58>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <MX_USART1_UART_Init+0x58>)
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <MX_USART1_UART_Init+0x58>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a34:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <MX_USART1_UART_Init+0x58>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	@ (8001a5c <MX_USART1_UART_Init+0x58>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a40:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <MX_USART1_UART_Init+0x58>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a46:	4805      	ldr	r0, [pc, #20]	@ (8001a5c <MX_USART1_UART_Init+0x58>)
 8001a48:	f006 f986 	bl	8007d58 <HAL_UART_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a52:	f000 fa4b 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000052c 	.word	0x2000052c
 8001a60:	40013800 	.word	0x40013800

08001a64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a68:	4b14      	ldr	r3, [pc, #80]	@ (8001abc <MX_USART3_UART_Init+0x58>)
 8001a6a:	4a15      	ldr	r2, [pc, #84]	@ (8001ac0 <MX_USART3_UART_Init+0x5c>)
 8001a6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a6e:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <MX_USART3_UART_Init+0x58>)
 8001a70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a76:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <MX_USART3_UART_Init+0x58>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001abc <MX_USART3_UART_Init+0x58>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <MX_USART3_UART_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <MX_USART3_UART_Init+0x58>)
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <MX_USART3_UART_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a94:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <MX_USART3_UART_Init+0x58>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a9a:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <MX_USART3_UART_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <MX_USART3_UART_Init+0x58>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001aa6:	4805      	ldr	r0, [pc, #20]	@ (8001abc <MX_USART3_UART_Init+0x58>)
 8001aa8:	f006 f956 	bl	8007d58 <HAL_UART_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ab2:	f000 fa1b 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200005b4 	.word	0x200005b4
 8001ac0:	40004800 	.word	0x40004800

08001ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	@ 0x28
 8001ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ada:	4bb1      	ldr	r3, [pc, #708]	@ (8001da0 <MX_GPIO_Init+0x2dc>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ade:	4ab0      	ldr	r2, [pc, #704]	@ (8001da0 <MX_GPIO_Init+0x2dc>)
 8001ae0:	f043 0310 	orr.w	r3, r3, #16
 8001ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae6:	4bae      	ldr	r3, [pc, #696]	@ (8001da0 <MX_GPIO_Init+0x2dc>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af2:	4bab      	ldr	r3, [pc, #684]	@ (8001da0 <MX_GPIO_Init+0x2dc>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af6:	4aaa      	ldr	r2, [pc, #680]	@ (8001da0 <MX_GPIO_Init+0x2dc>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001afe:	4ba8      	ldr	r3, [pc, #672]	@ (8001da0 <MX_GPIO_Init+0x2dc>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	4ba5      	ldr	r3, [pc, #660]	@ (8001da0 <MX_GPIO_Init+0x2dc>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0e:	4aa4      	ldr	r2, [pc, #656]	@ (8001da0 <MX_GPIO_Init+0x2dc>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b16:	4ba2      	ldr	r3, [pc, #648]	@ (8001da0 <MX_GPIO_Init+0x2dc>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	4b9f      	ldr	r3, [pc, #636]	@ (8001da0 <MX_GPIO_Init+0x2dc>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b26:	4a9e      	ldr	r2, [pc, #632]	@ (8001da0 <MX_GPIO_Init+0x2dc>)
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b2e:	4b9c      	ldr	r3, [pc, #624]	@ (8001da0 <MX_GPIO_Init+0x2dc>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3a:	4b99      	ldr	r3, [pc, #612]	@ (8001da0 <MX_GPIO_Init+0x2dc>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3e:	4a98      	ldr	r2, [pc, #608]	@ (8001da0 <MX_GPIO_Init+0x2dc>)
 8001b40:	f043 0308 	orr.w	r3, r3, #8
 8001b44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b46:	4b96      	ldr	r3, [pc, #600]	@ (8001da0 <MX_GPIO_Init+0x2dc>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
 8001b54:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001b58:	4892      	ldr	r0, [pc, #584]	@ (8001da4 <MX_GPIO_Init+0x2e0>)
 8001b5a:	f002 ff55 	bl	8004a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f248 111c 	movw	r1, #33052	@ 0x811c
 8001b64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b68:	f002 ff4e 	bl	8004a08 <HAL_GPIO_WritePin>
                          |E_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f24f 0116 	movw	r1, #61462	@ 0xf016
 8001b72:	488d      	ldr	r0, [pc, #564]	@ (8001da8 <MX_GPIO_Init+0x2e4>)
 8001b74:	f002 ff48 	bl	8004a08 <HAL_GPIO_WritePin>
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f241 0181 	movw	r1, #4225	@ 0x1081
 8001b7e:	488b      	ldr	r0, [pc, #556]	@ (8001dac <MX_GPIO_Init+0x2e8>)
 8001b80:	f002 ff42 	bl	8004a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b8a:	4888      	ldr	r0, [pc, #544]	@ (8001dac <MX_GPIO_Init+0x2e8>)
 8001b8c:	f002 ff3c 	bl	8004a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001b90:	2200      	movs	r2, #0
 8001b92:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001b96:	4886      	ldr	r0, [pc, #536]	@ (8001db0 <MX_GPIO_Init+0x2ec>)
 8001b98:	f002 ff36 	bl	8004a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2120      	movs	r1, #32
 8001ba0:	4881      	ldr	r0, [pc, #516]	@ (8001da8 <MX_GPIO_Init+0x2e4>)
 8001ba2:	f002 ff31 	bl	8004a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	2101      	movs	r1, #1
 8001baa:	487e      	ldr	r0, [pc, #504]	@ (8001da4 <MX_GPIO_Init+0x2e0>)
 8001bac:	f002 ff2c 	bl	8004a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001bb0:	f240 1315 	movw	r3, #277	@ 0x115
 8001bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4876      	ldr	r0, [pc, #472]	@ (8001da4 <MX_GPIO_Init+0x2e0>)
 8001bca:	f002 fd73 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001bce:	236a      	movs	r3, #106	@ 0x6a
 8001bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bd2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4619      	mov	r1, r3
 8001be2:	4870      	ldr	r0, [pc, #448]	@ (8001da4 <MX_GPIO_Init+0x2e0>)
 8001be4:	f002 fd66 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001be8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	486c      	ldr	r0, [pc, #432]	@ (8001db0 <MX_GPIO_Init+0x2ec>)
 8001c00:	f002 fd58 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001c04:	2303      	movs	r3, #3
 8001c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c14:	2308      	movs	r3, #8
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c22:	f002 fd47 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_LCD_Pin D4_LCD_Pin D7_LCD_Pin SPBTLE_RF_RST_Pin
                           E_LCD_Pin */
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8001c26:	f248 131c 	movw	r3, #33052	@ 0x811c
 8001c2a:	617b      	str	r3, [r7, #20]
                          |E_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c42:	f002 fd37 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001c46:	23c0      	movs	r3, #192	@ 0xc0
 8001c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c52:	2303      	movs	r3, #3
 8001c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c56:	2305      	movs	r3, #5
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c64:	f002 fd26 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c6c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	484a      	ldr	r0, [pc, #296]	@ (8001da8 <MX_GPIO_Init+0x2e4>)
 8001c7e:	f002 fd19 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin RS_LCD_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin
                           LED2_Pin SPSGRF_915_SDN_Pin D5_LCD_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001c82:	f24f 0336 	movw	r3, #61494	@ 0xf036
 8001c86:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4843      	ldr	r0, [pc, #268]	@ (8001da8 <MX_GPIO_Init+0x2e4>)
 8001c9c:	f002 fd0a 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001ca0:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8001ca4:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ca6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	483d      	ldr	r0, [pc, #244]	@ (8001dac <MX_GPIO_Init+0x2e8>)
 8001cb8:	f002 fcfc 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001cbc:	f243 0381 	movw	r3, #12417	@ 0x3081
 8001cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4835      	ldr	r0, [pc, #212]	@ (8001dac <MX_GPIO_Init+0x2e8>)
 8001cd6:	f002 fced 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001cda:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	482f      	ldr	r0, [pc, #188]	@ (8001db0 <MX_GPIO_Init+0x2ec>)
 8001cf4:	f002 fcde 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001cf8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cfe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4828      	ldr	r0, [pc, #160]	@ (8001db0 <MX_GPIO_Init+0x2ec>)
 8001d10:	f002 fcd0 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001d14:	2302      	movs	r3, #2
 8001d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d20:	2303      	movs	r3, #3
 8001d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d24:	2305      	movs	r3, #5
 8001d26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	481f      	ldr	r0, [pc, #124]	@ (8001dac <MX_GPIO_Init+0x2e8>)
 8001d30:	f002 fcc0 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001d34:	2378      	movs	r3, #120	@ 0x78
 8001d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d44:	2307      	movs	r3, #7
 8001d46:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4817      	ldr	r0, [pc, #92]	@ (8001dac <MX_GPIO_Init+0x2e8>)
 8001d50:	f002 fcb0 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001d54:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d5a:	2312      	movs	r3, #18
 8001d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d66:	2304      	movs	r3, #4
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4619      	mov	r1, r3
 8001d70:	480d      	ldr	r0, [pc, #52]	@ (8001da8 <MX_GPIO_Init+0x2e4>)
 8001d72:	f002 fc9f 	bl	80046b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	2017      	movs	r0, #23
 8001d7c:	f002 f92f 	bl	8003fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d80:	2017      	movs	r0, #23
 8001d82:	f002 f948 	bl	8004016 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2028      	movs	r0, #40	@ 0x28
 8001d8c:	f002 f927 	bl	8003fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d90:	2028      	movs	r0, #40	@ 0x28
 8001d92:	f002 f940 	bl	8004016 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d96:	bf00      	nop
 8001d98:	3728      	adds	r7, #40	@ 0x28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	48001000 	.word	0x48001000
 8001da8:	48000400 	.word	0x48000400
 8001dac:	48000c00 	.word	0x48000c00
 8001db0:	48000800 	.word	0x48000800
 8001db4:	00000000 	.word	0x00000000

08001db8 <my_button>:

/* USER CODE BEGIN 4 */
  extern float gain;
  extern uint8_t effect;
  void my_button(void)
  {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
	uint16_t button;
	char str[16];
	HAL_ADC_Start(&hadc1);
 8001dbe:	4846      	ldr	r0, [pc, #280]	@ (8001ed8 <my_button+0x120>)
 8001dc0:	f001 f944 	bl	800304c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001dc4:	2164      	movs	r1, #100	@ 0x64
 8001dc6:	4844      	ldr	r0, [pc, #272]	@ (8001ed8 <my_button+0x120>)
 8001dc8:	f001 f9fa 	bl	80031c0 <HAL_ADC_PollForConversion>
	button = HAL_ADC_GetValue(&hadc1);
 8001dcc:	4842      	ldr	r0, [pc, #264]	@ (8001ed8 <my_button+0x120>)
 8001dce:	f001 facf 	bl	8003370 <HAL_ADC_GetValue>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	82fb      	strh	r3, [r7, #22]
	if (button < 3000)
 8001dd6:	8afb      	ldrh	r3, [r7, #22]
 8001dd8:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d870      	bhi.n	8001ec2 <my_button+0x10a>
	{
		if (button < 2500 && 2000 < button) //boton LEFT
 8001de0:	8afb      	ldrh	r3, [r7, #22]
 8001de2:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d809      	bhi.n	8001dfe <my_button+0x46>
 8001dea:	8afb      	ldrh	r3, [r7, #22]
 8001dec:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001df0:	d905      	bls.n	8001dfe <my_button+0x46>
			effect = effect - 5;
 8001df2:	4b3a      	ldr	r3, [pc, #232]	@ (8001edc <my_button+0x124>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	3b05      	subs	r3, #5
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4b38      	ldr	r3, [pc, #224]	@ (8001edc <my_button+0x124>)
 8001dfc:	701a      	strb	r2, [r3, #0]

		if(button < 10)                     //boton RIGHT
 8001dfe:	8afb      	ldrh	r3, [r7, #22]
 8001e00:	2b09      	cmp	r3, #9
 8001e02:	d805      	bhi.n	8001e10 <my_button+0x58>
			effect = effect + 5;
 8001e04:	4b35      	ldr	r3, [pc, #212]	@ (8001edc <my_button+0x124>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	3305      	adds	r3, #5
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	4b33      	ldr	r3, [pc, #204]	@ (8001edc <my_button+0x124>)
 8001e0e:	701a      	strb	r2, [r3, #0]

		if(button < 1900 && 1300 < button)  //Boton DOWN
 8001e10:	8afb      	ldrh	r3, [r7, #22]
 8001e12:	f240 726b 	movw	r2, #1899	@ 0x76b
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d817      	bhi.n	8001e4a <my_button+0x92>
 8001e1a:	8afb      	ldrh	r3, [r7, #22]
 8001e1c:	f240 5214 	movw	r2, #1300	@ 0x514
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d912      	bls.n	8001e4a <my_button+0x92>
			gain = gain - 0.1;
 8001e24:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee0 <my_button+0x128>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fb8d 	bl	8000548 <__aeabi_f2d>
 8001e2e:	a328      	add	r3, pc, #160	@ (adr r3, 8001ed0 <my_button+0x118>)
 8001e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e34:	f7fe fa28 	bl	8000288 <__aeabi_dsub>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f7fe feb2 	bl	8000ba8 <__aeabi_d2f>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4a26      	ldr	r2, [pc, #152]	@ (8001ee0 <my_button+0x128>)
 8001e48:	6013      	str	r3, [r2, #0]

		if(button < 750 && 650 < button)    //Boton UP
 8001e4a:	8afb      	ldrh	r3, [r7, #22]
 8001e4c:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d817      	bhi.n	8001e84 <my_button+0xcc>
 8001e54:	8afb      	ldrh	r3, [r7, #22]
 8001e56:	f240 228a 	movw	r2, #650	@ 0x28a
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d912      	bls.n	8001e84 <my_button+0xcc>
			gain = gain + 0.1;
 8001e5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <my_button+0x128>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fb70 	bl	8000548 <__aeabi_f2d>
 8001e68:	a319      	add	r3, pc, #100	@ (adr r3, 8001ed0 <my_button+0x118>)
 8001e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6e:	f7fe fa0d 	bl	800028c <__adddf3>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f7fe fe95 	bl	8000ba8 <__aeabi_d2f>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4a17      	ldr	r2, [pc, #92]	@ (8001ee0 <my_button+0x128>)
 8001e82:	6013      	str	r3, [r2, #0]

		moveToXY(0,0);
 8001e84:	2100      	movs	r1, #0
 8001e86:	2000      	movs	r0, #0
 8001e88:	f7ff fab4 	bl	80013f4 <moveToXY>
		lcd_print("Effect= ");
 8001e8c:	4815      	ldr	r0, [pc, #84]	@ (8001ee4 <my_button+0x12c>)
 8001e8e:	f7ff f9cd 	bl	800122c <lcd_print>
		writeIntegerToLCD(effect);
 8001e92:	4b12      	ldr	r3, [pc, #72]	@ (8001edc <my_button+0x124>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fa3a 	bl	8001310 <writeIntegerToLCD>
		moveToXY(1,0);
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f7ff faa8 	bl	80013f4 <moveToXY>
		sprintf(str, "Gain= %f", gain);
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <my_button+0x128>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fb4d 	bl	8000548 <__aeabi_f2d>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	1d38      	adds	r0, r7, #4
 8001eb4:	490c      	ldr	r1, [pc, #48]	@ (8001ee8 <my_button+0x130>)
 8001eb6:	f00b f8c9 	bl	800d04c <siprintf>
		lcd_print(str);
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff f9b5 	bl	800122c <lcd_print>
	}
  }
 8001ec2:	bf00      	nop
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	f3af 8000 	nop.w
 8001ed0:	9999999a 	.word	0x9999999a
 8001ed4:	3fb99999 	.word	0x3fb99999
 8001ed8:	20000334 	.word	0x20000334
 8001edc:	20000004 	.word	0x20000004
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	0800f2c8 	.word	0x0800f2c8
 8001ee8:	0800f2d4 	.word	0x0800f2d4

08001eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef0:	b672      	cpsid	i
}
 8001ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <Error_Handler+0x8>

08001ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	4b0f      	ldr	r3, [pc, #60]	@ (8001f3c <HAL_MspInit+0x44>)
 8001f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f02:	4a0e      	ldr	r2, [pc, #56]	@ (8001f3c <HAL_MspInit+0x44>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <HAL_MspInit+0x44>)
 8001f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f16:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <HAL_MspInit+0x44>)
 8001f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1a:	4a08      	ldr	r2, [pc, #32]	@ (8001f3c <HAL_MspInit+0x44>)
 8001f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f20:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f22:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <HAL_MspInit+0x44>)
 8001f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	40021000 	.word	0x40021000

08001f40 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	@ 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a15      	ldr	r2, [pc, #84]	@ (8001fb4 <HAL_ADC_MspInit+0x74>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d123      	bne.n	8001faa <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001f62:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <HAL_ADC_MspInit+0x78>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f66:	4a14      	ldr	r2, [pc, #80]	@ (8001fb8 <HAL_ADC_MspInit+0x78>)
 8001f68:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f6e:	4b12      	ldr	r3, [pc, #72]	@ (8001fb8 <HAL_ADC_MspInit+0x78>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb8 <HAL_ADC_MspInit+0x78>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001fb8 <HAL_ADC_MspInit+0x78>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f86:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb8 <HAL_ADC_MspInit+0x78>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001f92:	233f      	movs	r3, #63	@ 0x3f
 8001f94:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f96:	230b      	movs	r3, #11
 8001f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4805      	ldr	r0, [pc, #20]	@ (8001fbc <HAL_ADC_MspInit+0x7c>)
 8001fa6:	f002 fb85 	bl	80046b4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001faa:	bf00      	nop
 8001fac:	3728      	adds	r7, #40	@ 0x28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	50040000 	.word	0x50040000
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	48000800 	.word	0x48000800

08001fc0 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	@ 0x28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a19      	ldr	r2, [pc, #100]	@ (8002044 <HAL_DAC_MspInit+0x84>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d12c      	bne.n	800203c <HAL_DAC_MspInit+0x7c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001fe2:	4b19      	ldr	r3, [pc, #100]	@ (8002048 <HAL_DAC_MspInit+0x88>)
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe6:	4a18      	ldr	r2, [pc, #96]	@ (8002048 <HAL_DAC_MspInit+0x88>)
 8001fe8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001fec:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fee:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <HAL_DAC_MspInit+0x88>)
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffa:	4b13      	ldr	r3, [pc, #76]	@ (8002048 <HAL_DAC_MspInit+0x88>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffe:	4a12      	ldr	r2, [pc, #72]	@ (8002048 <HAL_DAC_MspInit+0x88>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002006:	4b10      	ldr	r3, [pc, #64]	@ (8002048 <HAL_DAC_MspInit+0x88>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002012:	2320      	movs	r3, #32
 8002014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002016:	2303      	movs	r3, #3
 8002018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201e:	f107 0314 	add.w	r3, r7, #20
 8002022:	4619      	mov	r1, r3
 8002024:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002028:	f002 fb44 	bl	80046b4 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800202c:	2200      	movs	r2, #0
 800202e:	2100      	movs	r1, #0
 8002030:	2036      	movs	r0, #54	@ 0x36
 8002032:	f001 ffd4 	bl	8003fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002036:	2036      	movs	r0, #54	@ 0x36
 8002038:	f001 ffed 	bl	8004016 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 800203c:	bf00      	nop
 800203e:	3728      	adds	r7, #40	@ 0x28
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40007400 	.word	0x40007400
 8002048:	40021000 	.word	0x40021000

0800204c <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b0ac      	sub	sp, #176	@ 0xb0
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	2288      	movs	r2, #136	@ 0x88
 800206a:	2100      	movs	r1, #0
 800206c:	4618      	mov	r0, r3
 800206e:	f00b f852 	bl	800d116 <memset>
  if(DFSDM1_Init == 0)
 8002072:	4b25      	ldr	r3, [pc, #148]	@ (8002108 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d142      	bne.n	8002100 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800207a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800207e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002080:	2300      	movs	r3, #0
 8002082:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	4618      	mov	r0, r3
 800208c:	f004 ff00 	bl	8006e90 <HAL_RCCEx_PeriphCLKConfig>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8002096:	f7ff ff29 	bl	8001eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800209a:	4b1c      	ldr	r3, [pc, #112]	@ (800210c <HAL_DFSDM_ChannelMspInit+0xc0>)
 800209c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800209e:	4a1b      	ldr	r2, [pc, #108]	@ (800210c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80020a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80020a6:	4b19      	ldr	r3, [pc, #100]	@ (800210c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80020a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020b2:	4b16      	ldr	r3, [pc, #88]	@ (800210c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	4a15      	ldr	r2, [pc, #84]	@ (800210c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80020b8:	f043 0310 	orr.w	r3, r3, #16
 80020bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020be:	4b13      	ldr	r3, [pc, #76]	@ (800210c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80020ca:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80020ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d2:	2302      	movs	r3, #2
 80020d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80020e4:	2306      	movs	r3, #6
 80020e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020ea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020ee:	4619      	mov	r1, r3
 80020f0:	4807      	ldr	r0, [pc, #28]	@ (8002110 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80020f2:	f002 fadf 	bl	80046b4 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80020f6:	4b04      	ldr	r3, [pc, #16]	@ (8002108 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	3301      	adds	r3, #1
 80020fc:	4a02      	ldr	r2, [pc, #8]	@ (8002108 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80020fe:	6013      	str	r3, [r2, #0]
  }

}
 8002100:	bf00      	nop
 8002102:	37b0      	adds	r7, #176	@ 0xb0
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	2000063c 	.word	0x2000063c
 800210c:	40021000 	.word	0x40021000
 8002110:	48001000 	.word	0x48001000

08002114 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b0ac      	sub	sp, #176	@ 0xb0
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	2288      	movs	r2, #136	@ 0x88
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f00a ffee 	bl	800d116 <memset>
  if(hi2c->Instance==I2C2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a21      	ldr	r2, [pc, #132]	@ (80021c4 <HAL_I2C_MspInit+0xb0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d13b      	bne.n	80021bc <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002144:	2380      	movs	r3, #128	@ 0x80
 8002146:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002148:	2300      	movs	r3, #0
 800214a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	4618      	mov	r0, r3
 8002152:	f004 fe9d 	bl	8006e90 <HAL_RCCEx_PeriphCLKConfig>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800215c:	f7ff fec6 	bl	8001eec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002160:	4b19      	ldr	r3, [pc, #100]	@ (80021c8 <HAL_I2C_MspInit+0xb4>)
 8002162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002164:	4a18      	ldr	r2, [pc, #96]	@ (80021c8 <HAL_I2C_MspInit+0xb4>)
 8002166:	f043 0302 	orr.w	r3, r3, #2
 800216a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800216c:	4b16      	ldr	r3, [pc, #88]	@ (80021c8 <HAL_I2C_MspInit+0xb4>)
 800216e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002178:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800217c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002180:	2312      	movs	r3, #18
 8002182:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002186:	2301      	movs	r3, #1
 8002188:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218c:	2303      	movs	r3, #3
 800218e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002192:	2304      	movs	r3, #4
 8002194:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002198:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800219c:	4619      	mov	r1, r3
 800219e:	480b      	ldr	r0, [pc, #44]	@ (80021cc <HAL_I2C_MspInit+0xb8>)
 80021a0:	f002 fa88 	bl	80046b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021a4:	4b08      	ldr	r3, [pc, #32]	@ (80021c8 <HAL_I2C_MspInit+0xb4>)
 80021a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a8:	4a07      	ldr	r2, [pc, #28]	@ (80021c8 <HAL_I2C_MspInit+0xb4>)
 80021aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80021b0:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <HAL_I2C_MspInit+0xb4>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80021bc:	bf00      	nop
 80021be:	37b0      	adds	r7, #176	@ 0xb0
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40005800 	.word	0x40005800
 80021c8:	40021000 	.word	0x40021000
 80021cc:	48000400 	.word	0x48000400

080021d0 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	@ 0x28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a17      	ldr	r2, [pc, #92]	@ (800224c <HAL_QSPI_MspInit+0x7c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d128      	bne.n	8002244 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80021f2:	4b17      	ldr	r3, [pc, #92]	@ (8002250 <HAL_QSPI_MspInit+0x80>)
 80021f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021f6:	4a16      	ldr	r2, [pc, #88]	@ (8002250 <HAL_QSPI_MspInit+0x80>)
 80021f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80021fe:	4b14      	ldr	r3, [pc, #80]	@ (8002250 <HAL_QSPI_MspInit+0x80>)
 8002200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800220a:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <HAL_QSPI_MspInit+0x80>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220e:	4a10      	ldr	r2, [pc, #64]	@ (8002250 <HAL_QSPI_MspInit+0x80>)
 8002210:	f043 0310 	orr.w	r3, r3, #16
 8002214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002216:	4b0e      	ldr	r3, [pc, #56]	@ (8002250 <HAL_QSPI_MspInit+0x80>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002222:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8002226:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002230:	2303      	movs	r3, #3
 8002232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002234:	230a      	movs	r3, #10
 8002236:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	4619      	mov	r1, r3
 800223e:	4805      	ldr	r0, [pc, #20]	@ (8002254 <HAL_QSPI_MspInit+0x84>)
 8002240:	f002 fa38 	bl	80046b4 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002244:	bf00      	nop
 8002246:	3728      	adds	r7, #40	@ 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	a0001000 	.word	0xa0001000
 8002250:	40021000 	.word	0x40021000
 8002254:	48001000 	.word	0x48001000

08002258 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	@ 0x28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a17      	ldr	r2, [pc, #92]	@ (80022d4 <HAL_SPI_MspInit+0x7c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d128      	bne.n	80022cc <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800227a:	4b17      	ldr	r3, [pc, #92]	@ (80022d8 <HAL_SPI_MspInit+0x80>)
 800227c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227e:	4a16      	ldr	r2, [pc, #88]	@ (80022d8 <HAL_SPI_MspInit+0x80>)
 8002280:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002284:	6593      	str	r3, [r2, #88]	@ 0x58
 8002286:	4b14      	ldr	r3, [pc, #80]	@ (80022d8 <HAL_SPI_MspInit+0x80>)
 8002288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002292:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <HAL_SPI_MspInit+0x80>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002296:	4a10      	ldr	r2, [pc, #64]	@ (80022d8 <HAL_SPI_MspInit+0x80>)
 8002298:	f043 0304 	orr.w	r3, r3, #4
 800229c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800229e:	4b0e      	ldr	r3, [pc, #56]	@ (80022d8 <HAL_SPI_MspInit+0x80>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80022aa:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80022ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b8:	2303      	movs	r3, #3
 80022ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80022bc:	2306      	movs	r3, #6
 80022be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	4619      	mov	r1, r3
 80022c6:	4805      	ldr	r0, [pc, #20]	@ (80022dc <HAL_SPI_MspInit+0x84>)
 80022c8:	f002 f9f4 	bl	80046b4 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80022cc:	bf00      	nop
 80022ce:	3728      	adds	r7, #40	@ 0x28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40003c00 	.word	0x40003c00
 80022d8:	40021000 	.word	0x40021000
 80022dc:	48000800 	.word	0x48000800

080022e0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002324 <HAL_TIM_Base_MspInit+0x44>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d113      	bne.n	800231a <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80022f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002328 <HAL_TIM_Base_MspInit+0x48>)
 80022f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002328 <HAL_TIM_Base_MspInit+0x48>)
 80022f8:	f043 0320 	orr.w	r3, r3, #32
 80022fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80022fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002328 <HAL_TIM_Base_MspInit+0x48>)
 8002300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	2100      	movs	r1, #0
 800230e:	2037      	movs	r0, #55	@ 0x37
 8002310:	f001 fe65 	bl	8003fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002314:	2037      	movs	r0, #55	@ 0x37
 8002316:	f001 fe7e 	bl	8004016 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40001400 	.word	0x40001400
 8002328:	40021000 	.word	0x40021000

0800232c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b0ae      	sub	sp, #184	@ 0xb8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002344:	f107 031c 	add.w	r3, r7, #28
 8002348:	2288      	movs	r2, #136	@ 0x88
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f00a fee2 	bl	800d116 <memset>
  if(huart->Instance==USART1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a42      	ldr	r2, [pc, #264]	@ (8002460 <HAL_UART_MspInit+0x134>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d13b      	bne.n	80023d4 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800235c:	2301      	movs	r3, #1
 800235e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002360:	2300      	movs	r3, #0
 8002362:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002364:	f107 031c 	add.w	r3, r7, #28
 8002368:	4618      	mov	r0, r3
 800236a:	f004 fd91 	bl	8006e90 <HAL_RCCEx_PeriphCLKConfig>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002374:	f7ff fdba 	bl	8001eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002378:	4b3a      	ldr	r3, [pc, #232]	@ (8002464 <HAL_UART_MspInit+0x138>)
 800237a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800237c:	4a39      	ldr	r2, [pc, #228]	@ (8002464 <HAL_UART_MspInit+0x138>)
 800237e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002382:	6613      	str	r3, [r2, #96]	@ 0x60
 8002384:	4b37      	ldr	r3, [pc, #220]	@ (8002464 <HAL_UART_MspInit+0x138>)
 8002386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002388:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002390:	4b34      	ldr	r3, [pc, #208]	@ (8002464 <HAL_UART_MspInit+0x138>)
 8002392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002394:	4a33      	ldr	r2, [pc, #204]	@ (8002464 <HAL_UART_MspInit+0x138>)
 8002396:	f043 0302 	orr.w	r3, r3, #2
 800239a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800239c:	4b31      	ldr	r3, [pc, #196]	@ (8002464 <HAL_UART_MspInit+0x138>)
 800239e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80023a8:	23c0      	movs	r3, #192	@ 0xc0
 80023aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ba:	2303      	movs	r3, #3
 80023bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023c0:	2307      	movs	r3, #7
 80023c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80023ca:	4619      	mov	r1, r3
 80023cc:	4826      	ldr	r0, [pc, #152]	@ (8002468 <HAL_UART_MspInit+0x13c>)
 80023ce:	f002 f971 	bl	80046b4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80023d2:	e040      	b.n	8002456 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a24      	ldr	r2, [pc, #144]	@ (800246c <HAL_UART_MspInit+0x140>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d13b      	bne.n	8002456 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023de:	2304      	movs	r3, #4
 80023e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80023e2:	2300      	movs	r3, #0
 80023e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023e6:	f107 031c 	add.w	r3, r7, #28
 80023ea:	4618      	mov	r0, r3
 80023ec:	f004 fd50 	bl	8006e90 <HAL_RCCEx_PeriphCLKConfig>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_UART_MspInit+0xce>
      Error_Handler();
 80023f6:	f7ff fd79 	bl	8001eec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80023fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002464 <HAL_UART_MspInit+0x138>)
 80023fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fe:	4a19      	ldr	r2, [pc, #100]	@ (8002464 <HAL_UART_MspInit+0x138>)
 8002400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002404:	6593      	str	r3, [r2, #88]	@ 0x58
 8002406:	4b17      	ldr	r3, [pc, #92]	@ (8002464 <HAL_UART_MspInit+0x138>)
 8002408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002412:	4b14      	ldr	r3, [pc, #80]	@ (8002464 <HAL_UART_MspInit+0x138>)
 8002414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002416:	4a13      	ldr	r2, [pc, #76]	@ (8002464 <HAL_UART_MspInit+0x138>)
 8002418:	f043 0308 	orr.w	r3, r3, #8
 800241c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800241e:	4b11      	ldr	r3, [pc, #68]	@ (8002464 <HAL_UART_MspInit+0x138>)
 8002420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800242a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800242e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002432:	2302      	movs	r3, #2
 8002434:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243e:	2303      	movs	r3, #3
 8002440:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002444:	2307      	movs	r3, #7
 8002446:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800244a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800244e:	4619      	mov	r1, r3
 8002450:	4807      	ldr	r0, [pc, #28]	@ (8002470 <HAL_UART_MspInit+0x144>)
 8002452:	f002 f92f 	bl	80046b4 <HAL_GPIO_Init>
}
 8002456:	bf00      	nop
 8002458:	37b8      	adds	r7, #184	@ 0xb8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40013800 	.word	0x40013800
 8002464:	40021000 	.word	0x40021000
 8002468:	48000400 	.word	0x48000400
 800246c:	40004800 	.word	0x40004800
 8002470:	48000c00 	.word	0x48000c00

08002474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002478:	bf00      	nop
 800247a:	e7fd      	b.n	8002478 <NMI_Handler+0x4>

0800247c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002480:	bf00      	nop
 8002482:	e7fd      	b.n	8002480 <HardFault_Handler+0x4>

08002484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002488:	bf00      	nop
 800248a:	e7fd      	b.n	8002488 <MemManage_Handler+0x4>

0800248c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002490:	bf00      	nop
 8002492:	e7fd      	b.n	8002490 <BusFault_Handler+0x4>

08002494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002498:	bf00      	nop
 800249a:	e7fd      	b.n	8002498 <UsageFault_Handler+0x4>

0800249c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ca:	f000 fa47 	bl	800295c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80024d6:	2020      	movs	r0, #32
 80024d8:	f002 faae 	bl	8004a38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80024dc:	2040      	movs	r0, #64	@ 0x40
 80024de:	f002 faab 	bl	8004a38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80024e2:	2080      	movs	r0, #128	@ 0x80
 80024e4:	f002 faa8 	bl	8004a38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80024e8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80024ec:	f002 faa4 	bl	8004a38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80024f8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80024fc:	f002 fa9c 	bl	8004a38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002500:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002504:	f002 fa98 	bl	8004a38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002508:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800250c:	f002 fa94 	bl	8004a38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002510:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002514:	f002 fa90 	bl	8004a38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002518:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800251c:	f002 fa8c 	bl	8004a38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}

08002524 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8002528:	4802      	ldr	r0, [pc, #8]	@ (8002534 <TIM6_DAC_IRQHandler+0x10>)
 800252a:	f001 fdfd 	bl	8004128 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000398 	.word	0x20000398

08002538 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
  static int i = 0; // explicar por qué static
  float data;
  if (available == 1)
 800253e:	4b4b      	ldr	r3, [pc, #300]	@ (800266c <TIM7_IRQHandler+0x134>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b01      	cmp	r3, #1
 8002544:	f040 8088 	bne.w	8002658 <TIM7_IRQHandler+0x120>
  {
	  data = ((float) audiobuf[i] + (float)(gain*queue[(uint8_t)(queue_idx - effect)][i]) +
 8002548:	4b49      	ldr	r3, [pc, #292]	@ (8002670 <TIM7_IRQHandler+0x138>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4b49      	ldr	r3, [pc, #292]	@ (8002674 <TIM7_IRQHandler+0x13c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002558:	ee07 3a90 	vmov	s15, r3
 800255c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002560:	4b45      	ldr	r3, [pc, #276]	@ (8002678 <TIM7_IRQHandler+0x140>)
 8002562:	781a      	ldrb	r2, [r3, #0]
 8002564:	4b45      	ldr	r3, [pc, #276]	@ (800267c <TIM7_IRQHandler+0x144>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	4618      	mov	r0, r3
 800256e:	4b41      	ldr	r3, [pc, #260]	@ (8002674 <TIM7_IRQHandler+0x13c>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	4943      	ldr	r1, [pc, #268]	@ (8002680 <TIM7_IRQHandler+0x148>)
 8002574:	4603      	mov	r3, r0
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4403      	add	r3, r0
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002582:	ee07 3a90 	vmov	s15, r3
 8002586:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800258a:	4b3e      	ldr	r3, [pc, #248]	@ (8002684 <TIM7_IRQHandler+0x14c>)
 800258c:	edd3 7a00 	vldr	s15, [r3]
 8002590:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002594:	ee37 7a27 	vadd.f32	s14, s14, s15
			  (float) (gain*queue[(uint8_t)(queue_idx - effect - 1)][i])) / 3;
 8002598:	4b37      	ldr	r3, [pc, #220]	@ (8002678 <TIM7_IRQHandler+0x140>)
 800259a:	781a      	ldrb	r2, [r3, #0]
 800259c:	4b37      	ldr	r3, [pc, #220]	@ (800267c <TIM7_IRQHandler+0x144>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	4618      	mov	r0, r3
 80025aa:	4b32      	ldr	r3, [pc, #200]	@ (8002674 <TIM7_IRQHandler+0x13c>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4934      	ldr	r1, [pc, #208]	@ (8002680 <TIM7_IRQHandler+0x148>)
 80025b0:	4603      	mov	r3, r0
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4403      	add	r3, r0
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002684 <TIM7_IRQHandler+0x14c>)
 80025c8:	edd3 7a00 	vldr	s15, [r3]
 80025cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
	  data = ((float) audiobuf[i] + (float)(gain*queue[(uint8_t)(queue_idx - effect)][i]) +
 80025d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025d4:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80025d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025dc:	edc7 7a01 	vstr	s15, [r7, #4]
	  data = data * 2048.0 / 32768; // escalado de 16 -> 12 bits
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7fd ffb1 	bl	8000548 <__aeabi_f2d>
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	4b27      	ldr	r3, [pc, #156]	@ (8002688 <TIM7_IRQHandler+0x150>)
 80025ec:	f7fe f804 	bl	80005f8 <__aeabi_dmul>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4610      	mov	r0, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	4b23      	ldr	r3, [pc, #140]	@ (800268c <TIM7_IRQHandler+0x154>)
 80025fe:	f7fe f925 	bl	800084c <__aeabi_ddiv>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	f7fe facd 	bl	8000ba8 <__aeabi_d2f>
 800260e:	4603      	mov	r3, r0
 8002610:	607b      	str	r3, [r7, #4]
	  data = data + 2048; // centrar en 2048
 8002612:	edd7 7a01 	vldr	s15, [r7, #4]
 8002616:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002690 <TIM7_IRQHandler+0x158>
 800261a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800261e:	edc7 7a01 	vstr	s15, [r7, #4]
	  i++;
 8002622:	4b14      	ldr	r3, [pc, #80]	@ (8002674 <TIM7_IRQHandler+0x13c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	3301      	adds	r3, #1
 8002628:	4a12      	ldr	r2, [pc, #72]	@ (8002674 <TIM7_IRQHandler+0x13c>)
 800262a:	6013      	str	r3, [r2, #0]

	  if (i >= 24)
 800262c:	4b11      	ldr	r3, [pc, #68]	@ (8002674 <TIM7_IRQHandler+0x13c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b17      	cmp	r3, #23
 8002632:	dd05      	ble.n	8002640 <TIM7_IRQHandler+0x108>
	  {
		  i = 0;
 8002634:	4b0f      	ldr	r3, [pc, #60]	@ (8002674 <TIM7_IRQHandler+0x13c>)
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
		  available = 0;
 800263a:	4b0c      	ldr	r3, [pc, #48]	@ (800266c <TIM7_IRQHandler+0x134>)
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R,
			  (unsigned short int) data);
 8002640:	edd7 7a01 	vldr	s15, [r7, #4]
 8002644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002648:	ee17 3a90 	vmov	r3, s15
 800264c:	b29b      	uxth	r3, r3
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R,
 800264e:	2200      	movs	r2, #0
 8002650:	2110      	movs	r1, #16
 8002652:	4810      	ldr	r0, [pc, #64]	@ (8002694 <TIM7_IRQHandler+0x15c>)
 8002654:	f001 fdc2 	bl	80041dc <HAL_DAC_SetValue>
  }
  __HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 8002658:	4b0f      	ldr	r3, [pc, #60]	@ (8002698 <TIM7_IRQHandler+0x160>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0201 	mvn.w	r2, #1
 8002660:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM7_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim7);
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20003955 	.word	0x20003955
 8002670:	20000950 	.word	0x20000950
 8002674:	20000640 	.word	0x20000640
 8002678:	20003954 	.word	0x20003954
 800267c:	20000004 	.word	0x20000004
 8002680:	20000954 	.word	0x20000954
 8002684:	20000000 	.word	0x20000000
 8002688:	40a00000 	.word	0x40a00000
 800268c:	40e00000 	.word	0x40e00000
 8002690:	45000000 	.word	0x45000000
 8002694:	20000398 	.word	0x20000398
 8002698:	200004e0 	.word	0x200004e0

0800269c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80026a0:	4802      	ldr	r0, [pc, #8]	@ (80026ac <OTG_FS_IRQHandler+0x10>)
 80026a2:	f002 fc5c 	bl	8004f5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20003b58 	.word	0x20003b58

080026b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return 1;
 80026b4:	2301      	movs	r3, #1
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <_kill>:

int _kill(int pid, int sig)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026ca:	f00a fd77 	bl	800d1bc <__errno>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2216      	movs	r2, #22
 80026d2:	601a      	str	r2, [r3, #0]
  return -1;
 80026d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <_exit>:

void _exit (int status)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ffe7 	bl	80026c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026f2:	bf00      	nop
 80026f4:	e7fd      	b.n	80026f2 <_exit+0x12>

080026f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b086      	sub	sp, #24
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	e00a      	b.n	800271e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002708:	f3af 8000 	nop.w
 800270c:	4601      	mov	r1, r0
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	60ba      	str	r2, [r7, #8]
 8002714:	b2ca      	uxtb	r2, r1
 8002716:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	3301      	adds	r3, #1
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	429a      	cmp	r2, r3
 8002724:	dbf0      	blt.n	8002708 <_read+0x12>
  }

  return len;
 8002726:	687b      	ldr	r3, [r7, #4]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	e009      	b.n	8002756 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	60ba      	str	r2, [r7, #8]
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	3301      	adds	r3, #1
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	429a      	cmp	r2, r3
 800275c:	dbf1      	blt.n	8002742 <_write+0x12>
  }
  return len;
 800275e:	687b      	ldr	r3, [r7, #4]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <_close>:

int _close(int file)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002770:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002790:	605a      	str	r2, [r3, #4]
  return 0;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <_isatty>:

int _isatty(int file)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027a8:	2301      	movs	r3, #1
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b085      	sub	sp, #20
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027d8:	4a14      	ldr	r2, [pc, #80]	@ (800282c <_sbrk+0x5c>)
 80027da:	4b15      	ldr	r3, [pc, #84]	@ (8002830 <_sbrk+0x60>)
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027e4:	4b13      	ldr	r3, [pc, #76]	@ (8002834 <_sbrk+0x64>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d102      	bne.n	80027f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027ec:	4b11      	ldr	r3, [pc, #68]	@ (8002834 <_sbrk+0x64>)
 80027ee:	4a12      	ldr	r2, [pc, #72]	@ (8002838 <_sbrk+0x68>)
 80027f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027f2:	4b10      	ldr	r3, [pc, #64]	@ (8002834 <_sbrk+0x64>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4413      	add	r3, r2
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d207      	bcs.n	8002810 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002800:	f00a fcdc 	bl	800d1bc <__errno>
 8002804:	4603      	mov	r3, r0
 8002806:	220c      	movs	r2, #12
 8002808:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800280a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800280e:	e009      	b.n	8002824 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002810:	4b08      	ldr	r3, [pc, #32]	@ (8002834 <_sbrk+0x64>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002816:	4b07      	ldr	r3, [pc, #28]	@ (8002834 <_sbrk+0x64>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	4a05      	ldr	r2, [pc, #20]	@ (8002834 <_sbrk+0x64>)
 8002820:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002822:	68fb      	ldr	r3, [r7, #12]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20018000 	.word	0x20018000
 8002830:	00000400 	.word	0x00000400
 8002834:	20000644 	.word	0x20000644
 8002838:	20005fd8 	.word	0x20005fd8

0800283c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002840:	4b06      	ldr	r3, [pc, #24]	@ (800285c <SystemInit+0x20>)
 8002842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002846:	4a05      	ldr	r2, [pc, #20]	@ (800285c <SystemInit+0x20>)
 8002848:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800284c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002860:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002898 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002864:	f7ff ffea 	bl	800283c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002868:	480c      	ldr	r0, [pc, #48]	@ (800289c <LoopForever+0x6>)
  ldr r1, =_edata
 800286a:	490d      	ldr	r1, [pc, #52]	@ (80028a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800286c:	4a0d      	ldr	r2, [pc, #52]	@ (80028a4 <LoopForever+0xe>)
  movs r3, #0
 800286e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002870:	e002      	b.n	8002878 <LoopCopyDataInit>

08002872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002876:	3304      	adds	r3, #4

08002878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800287a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800287c:	d3f9      	bcc.n	8002872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800287e:	4a0a      	ldr	r2, [pc, #40]	@ (80028a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002880:	4c0a      	ldr	r4, [pc, #40]	@ (80028ac <LoopForever+0x16>)
  movs r3, #0
 8002882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002884:	e001      	b.n	800288a <LoopFillZerobss>

08002886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002888:	3204      	adds	r2, #4

0800288a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800288a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800288c:	d3fb      	bcc.n	8002886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800288e:	f00a fc9b 	bl	800d1c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002892:	f7fe fe2d 	bl	80014f0 <main>

08002896 <LoopForever>:

LoopForever:
    b LoopForever
 8002896:	e7fe      	b.n	8002896 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002898:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800289c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028a0:	2000030c 	.word	0x2000030c
  ldr r2, =_sidata
 80028a4:	0800f6f4 	.word	0x0800f6f4
  ldr r2, =_sbss
 80028a8:	2000030c 	.word	0x2000030c
  ldr r4, =_ebss
 80028ac:	20005fd8 	.word	0x20005fd8

080028b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028b0:	e7fe      	b.n	80028b0 <ADC1_2_IRQHandler>

080028b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028bc:	2003      	movs	r0, #3
 80028be:	f001 fb83 	bl	8003fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028c2:	2000      	movs	r0, #0
 80028c4:	f000 f80e 	bl	80028e4 <HAL_InitTick>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	71fb      	strb	r3, [r7, #7]
 80028d2:	e001      	b.n	80028d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028d4:	f7ff fb10 	bl	8001ef8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028d8:	79fb      	ldrb	r3, [r7, #7]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80028f0:	4b17      	ldr	r3, [pc, #92]	@ (8002950 <HAL_InitTick+0x6c>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d023      	beq.n	8002940 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80028f8:	4b16      	ldr	r3, [pc, #88]	@ (8002954 <HAL_InitTick+0x70>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b14      	ldr	r3, [pc, #80]	@ (8002950 <HAL_InitTick+0x6c>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	4619      	mov	r1, r3
 8002902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002906:	fbb3 f3f1 	udiv	r3, r3, r1
 800290a:	fbb2 f3f3 	udiv	r3, r2, r3
 800290e:	4618      	mov	r0, r3
 8002910:	f001 fb8f 	bl	8004032 <HAL_SYSTICK_Config>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10f      	bne.n	800293a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b0f      	cmp	r3, #15
 800291e:	d809      	bhi.n	8002934 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002920:	2200      	movs	r2, #0
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002928:	f001 fb59 	bl	8003fde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800292c:	4a0a      	ldr	r2, [pc, #40]	@ (8002958 <HAL_InitTick+0x74>)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	e007      	b.n	8002944 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
 8002938:	e004      	b.n	8002944 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
 800293e:	e001      	b.n	8002944 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002944:	7bfb      	ldrb	r3, [r7, #15]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000010 	.word	0x20000010
 8002954:	20000008 	.word	0x20000008
 8002958:	2000000c 	.word	0x2000000c

0800295c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002960:	4b06      	ldr	r3, [pc, #24]	@ (800297c <HAL_IncTick+0x20>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <HAL_IncTick+0x24>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4413      	add	r3, r2
 800296c:	4a04      	ldr	r2, [pc, #16]	@ (8002980 <HAL_IncTick+0x24>)
 800296e:	6013      	str	r3, [r2, #0]
}
 8002970:	bf00      	nop
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20000010 	.word	0x20000010
 8002980:	20000648 	.word	0x20000648

08002984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return uwTick;
 8002988:	4b03      	ldr	r3, [pc, #12]	@ (8002998 <HAL_GetTick+0x14>)
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	20000648 	.word	0x20000648

0800299c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029a4:	f7ff ffee 	bl	8002984 <HAL_GetTick>
 80029a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029b4:	d005      	beq.n	80029c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80029b6:	4b0a      	ldr	r3, [pc, #40]	@ (80029e0 <HAL_Delay+0x44>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4413      	add	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029c2:	bf00      	nop
 80029c4:	f7ff ffde 	bl	8002984 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d8f7      	bhi.n	80029c4 <HAL_Delay+0x28>
  {
  }
}
 80029d4:	bf00      	nop
 80029d6:	bf00      	nop
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000010 	.word	0x20000010

080029e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	609a      	str	r2, [r3, #8]
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	609a      	str	r2, [r3, #8]
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3360      	adds	r3, #96	@ 0x60
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b08      	ldr	r3, [pc, #32]	@ (8002a90 <LL_ADC_SetOffset+0x44>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a84:	bf00      	nop
 8002a86:	371c      	adds	r7, #28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	03fff000 	.word	0x03fff000

08002a94 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3360      	adds	r3, #96	@ 0x60
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	3360      	adds	r3, #96	@ 0x60
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002aea:	bf00      	nop
 8002aec:	371c      	adds	r7, #28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	3330      	adds	r3, #48	@ 0x30
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	0a1b      	lsrs	r3, r3, #8
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	4413      	add	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f003 031f 	and.w	r3, r3, #31
 8002b46:	211f      	movs	r1, #31
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	401a      	ands	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	0e9b      	lsrs	r3, r3, #26
 8002b54:	f003 011f 	and.w	r1, r3, #31
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b62:	431a      	orrs	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b68:	bf00      	nop
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3314      	adds	r3, #20
 8002b84:	461a      	mov	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	0e5b      	lsrs	r3, r3, #25
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	4413      	add	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	0d1b      	lsrs	r3, r3, #20
 8002b9c:	f003 031f 	and.w	r3, r3, #31
 8002ba0:	2107      	movs	r1, #7
 8002ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	401a      	ands	r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	0d1b      	lsrs	r3, r3, #20
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002bbe:	bf00      	nop
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be4:	43db      	mvns	r3, r3
 8002be6:	401a      	ands	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f003 0318 	and.w	r3, r3, #24
 8002bee:	4908      	ldr	r1, [pc, #32]	@ (8002c10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002bf0:	40d9      	lsrs	r1, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	400b      	ands	r3, r1
 8002bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002c02:	bf00      	nop
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	0007ffff 	.word	0x0007ffff

08002c14 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 031f 	and.w	r3, r3, #31
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002c5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6093      	str	r3, [r2, #8]
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c84:	d101      	bne.n	8002c8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002ca8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cd4:	d101      	bne.n	8002cda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cf8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cfc:	f043 0201 	orr.w	r2, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <LL_ADC_IsEnabled+0x18>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <LL_ADC_IsEnabled+0x1a>
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d46:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d4a:	f043 0204 	orr.w	r2, r3, #4
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d101      	bne.n	8002d76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d101      	bne.n	8002d9c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dac:	b590      	push	{r4, r7, lr}
 8002dae:	b089      	sub	sp, #36	@ 0x24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e130      	b.n	8003028 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d109      	bne.n	8002de8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff f8b3 	bl	8001f40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff3f 	bl	8002c70 <LL_ADC_IsDeepPowerDownEnabled>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d004      	beq.n	8002e02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff25 	bl	8002c4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff ff5a 	bl	8002cc0 <LL_ADC_IsInternalRegulatorEnabled>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d115      	bne.n	8002e3e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ff3e 	bl	8002c98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e1c:	4b84      	ldr	r3, [pc, #528]	@ (8003030 <HAL_ADC_Init+0x284>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	099b      	lsrs	r3, r3, #6
 8002e22:	4a84      	ldr	r2, [pc, #528]	@ (8003034 <HAL_ADC_Init+0x288>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	099b      	lsrs	r3, r3, #6
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e30:	e002      	b.n	8002e38 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f9      	bne.n	8002e32 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff3c 	bl	8002cc0 <LL_ADC_IsInternalRegulatorEnabled>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10d      	bne.n	8002e6a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e52:	f043 0210 	orr.w	r2, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5e:	f043 0201 	orr.w	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff ff75 	bl	8002d5e <LL_ADC_REG_IsConversionOngoing>
 8002e74:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f040 80c9 	bne.w	8003016 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f040 80c5 	bne.w	8003016 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e90:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e94:	f043 0202 	orr.w	r2, r3, #2
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff35 	bl	8002d10 <LL_ADC_IsEnabled>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d115      	bne.n	8002ed8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eac:	4862      	ldr	r0, [pc, #392]	@ (8003038 <HAL_ADC_Init+0x28c>)
 8002eae:	f7ff ff2f 	bl	8002d10 <LL_ADC_IsEnabled>
 8002eb2:	4604      	mov	r4, r0
 8002eb4:	4861      	ldr	r0, [pc, #388]	@ (800303c <HAL_ADC_Init+0x290>)
 8002eb6:	f7ff ff2b 	bl	8002d10 <LL_ADC_IsEnabled>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	431c      	orrs	r4, r3
 8002ebe:	4860      	ldr	r0, [pc, #384]	@ (8003040 <HAL_ADC_Init+0x294>)
 8002ec0:	f7ff ff26 	bl	8002d10 <LL_ADC_IsEnabled>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4323      	orrs	r3, r4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d105      	bne.n	8002ed8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	485c      	ldr	r0, [pc, #368]	@ (8003044 <HAL_ADC_Init+0x298>)
 8002ed4:	f7ff fd86 	bl	80029e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7e5b      	ldrb	r3, [r3, #25]
 8002edc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ee2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002ee8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002eee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ef6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d106      	bne.n	8002f14 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	045b      	lsls	r3, r3, #17
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d009      	beq.n	8002f30 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f20:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f28:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	4b44      	ldr	r3, [pc, #272]	@ (8003048 <HAL_ADC_Init+0x29c>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	69b9      	ldr	r1, [r7, #24]
 8002f40:	430b      	orrs	r3, r1
 8002f42:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff ff1b 	bl	8002d84 <LL_ADC_INJ_IsConversionOngoing>
 8002f4e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d13d      	bne.n	8002fd2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d13a      	bne.n	8002fd2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f60:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f68:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f78:	f023 0302 	bic.w	r3, r3, #2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6812      	ldr	r2, [r2, #0]
 8002f80:	69b9      	ldr	r1, [r7, #24]
 8002f82:	430b      	orrs	r3, r1
 8002f84:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d118      	bne.n	8002fc2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002f9a:	f023 0304 	bic.w	r3, r3, #4
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002fa6:	4311      	orrs	r1, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002fac:	4311      	orrs	r1, r2
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	611a      	str	r2, [r3, #16]
 8002fc0:	e007      	b.n	8002fd2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0201 	bic.w	r2, r2, #1
 8002fd0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d10c      	bne.n	8002ff4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe0:	f023 010f 	bic.w	r1, r3, #15
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	1e5a      	subs	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ff2:	e007      	b.n	8003004 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 020f 	bic.w	r2, r2, #15
 8003002:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003008:	f023 0303 	bic.w	r3, r3, #3
 800300c:	f043 0201 	orr.w	r2, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	655a      	str	r2, [r3, #84]	@ 0x54
 8003014:	e007      	b.n	8003026 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800301a:	f043 0210 	orr.w	r2, r3, #16
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003026:	7ffb      	ldrb	r3, [r7, #31]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3724      	adds	r7, #36	@ 0x24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd90      	pop	{r4, r7, pc}
 8003030:	20000008 	.word	0x20000008
 8003034:	053e2d63 	.word	0x053e2d63
 8003038:	50040000 	.word	0x50040000
 800303c:	50040100 	.word	0x50040100
 8003040:	50040200 	.word	0x50040200
 8003044:	50040300 	.word	0x50040300
 8003048:	fff0c007 	.word	0xfff0c007

0800304c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003054:	4857      	ldr	r0, [pc, #348]	@ (80031b4 <HAL_ADC_Start+0x168>)
 8003056:	f7ff fddd 	bl	8002c14 <LL_ADC_GetMultimode>
 800305a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff fe7c 	bl	8002d5e <LL_ADC_REG_IsConversionOngoing>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	f040 809c 	bne.w	80031a6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_ADC_Start+0x30>
 8003078:	2302      	movs	r3, #2
 800307a:	e097      	b.n	80031ac <HAL_ADC_Start+0x160>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fd73 	bl	8003b70 <ADC_Enable>
 800308a:	4603      	mov	r3, r0
 800308c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800308e:	7dfb      	ldrb	r3, [r7, #23]
 8003090:	2b00      	cmp	r3, #0
 8003092:	f040 8083 	bne.w	800319c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800309a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800309e:	f023 0301 	bic.w	r3, r3, #1
 80030a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a42      	ldr	r2, [pc, #264]	@ (80031b8 <HAL_ADC_Start+0x16c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d002      	beq.n	80030ba <HAL_ADC_Start+0x6e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	e000      	b.n	80030bc <HAL_ADC_Start+0x70>
 80030ba:	4b40      	ldr	r3, [pc, #256]	@ (80031bc <HAL_ADC_Start+0x170>)
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d002      	beq.n	80030ca <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d105      	bne.n	80030d6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ce:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030e2:	d106      	bne.n	80030f2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e8:	f023 0206 	bic.w	r2, r3, #6
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80030f0:	e002      	b.n	80030f8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	221c      	movs	r2, #28
 80030fe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a2a      	ldr	r2, [pc, #168]	@ (80031b8 <HAL_ADC_Start+0x16c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d002      	beq.n	8003118 <HAL_ADC_Start+0xcc>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	e000      	b.n	800311a <HAL_ADC_Start+0xce>
 8003118:	4b28      	ldr	r3, [pc, #160]	@ (80031bc <HAL_ADC_Start+0x170>)
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6812      	ldr	r2, [r2, #0]
 800311e:	4293      	cmp	r3, r2
 8003120:	d008      	beq.n	8003134 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	2b05      	cmp	r3, #5
 800312c:	d002      	beq.n	8003134 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	2b09      	cmp	r3, #9
 8003132:	d114      	bne.n	800315e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d007      	beq.n	8003152 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003146:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800314a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff fded 	bl	8002d36 <LL_ADC_REG_StartConversion>
 800315c:	e025      	b.n	80031aa <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003162:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a12      	ldr	r2, [pc, #72]	@ (80031b8 <HAL_ADC_Start+0x16c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d002      	beq.n	800317a <HAL_ADC_Start+0x12e>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	e000      	b.n	800317c <HAL_ADC_Start+0x130>
 800317a:	4b10      	ldr	r3, [pc, #64]	@ (80031bc <HAL_ADC_Start+0x170>)
 800317c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00f      	beq.n	80031aa <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800318e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003192:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	655a      	str	r2, [r3, #84]	@ 0x54
 800319a:	e006      	b.n	80031aa <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80031a4:	e001      	b.n	80031aa <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031a6:	2302      	movs	r3, #2
 80031a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80031aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	50040300 	.word	0x50040300
 80031b8:	50040100 	.word	0x50040100
 80031bc:	50040000 	.word	0x50040000

080031c0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031ca:	4866      	ldr	r0, [pc, #408]	@ (8003364 <HAL_ADC_PollForConversion+0x1a4>)
 80031cc:	f7ff fd22 	bl	8002c14 <LL_ADC_GetMultimode>
 80031d0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d102      	bne.n	80031e0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80031da:	2308      	movs	r3, #8
 80031dc:	61fb      	str	r3, [r7, #28]
 80031de:	e02a      	b.n	8003236 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b05      	cmp	r3, #5
 80031ea:	d002      	beq.n	80031f2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b09      	cmp	r3, #9
 80031f0:	d111      	bne.n	8003216 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d007      	beq.n	8003210 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003204:	f043 0220 	orr.w	r2, r3, #32
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0a4      	b.n	800335a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003210:	2304      	movs	r3, #4
 8003212:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003214:	e00f      	b.n	8003236 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003216:	4853      	ldr	r0, [pc, #332]	@ (8003364 <HAL_ADC_PollForConversion+0x1a4>)
 8003218:	f7ff fd0a 	bl	8002c30 <LL_ADC_GetMultiDMATransfer>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d007      	beq.n	8003232 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003226:	f043 0220 	orr.w	r2, r3, #32
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e093      	b.n	800335a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003232:	2304      	movs	r3, #4
 8003234:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003236:	f7ff fba5 	bl	8002984 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800323c:	e021      	b.n	8003282 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003244:	d01d      	beq.n	8003282 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003246:	f7ff fb9d 	bl	8002984 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d302      	bcc.n	800325c <HAL_ADC_PollForConversion+0x9c>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d112      	bne.n	8003282 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	4013      	ands	r3, r2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10b      	bne.n	8003282 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326e:	f043 0204 	orr.w	r2, r3, #4
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e06b      	b.n	800335a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0d6      	beq.n	800323e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003294:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff fc28 	bl	8002af6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d01c      	beq.n	80032e6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	7e5b      	ldrb	r3, [r3, #25]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d118      	bne.n	80032e6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d111      	bne.n	80032e6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d105      	bne.n	80032e6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003368 <HAL_ADC_PollForConversion+0x1a8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d002      	beq.n	80032f6 <HAL_ADC_PollForConversion+0x136>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	e000      	b.n	80032f8 <HAL_ADC_PollForConversion+0x138>
 80032f6:	4b1d      	ldr	r3, [pc, #116]	@ (800336c <HAL_ADC_PollForConversion+0x1ac>)
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d008      	beq.n	8003312 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d005      	beq.n	8003312 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2b05      	cmp	r3, #5
 800330a:	d002      	beq.n	8003312 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2b09      	cmp	r3, #9
 8003310:	d104      	bne.n	800331c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	61bb      	str	r3, [r7, #24]
 800331a:	e00c      	b.n	8003336 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a11      	ldr	r2, [pc, #68]	@ (8003368 <HAL_ADC_PollForConversion+0x1a8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d002      	beq.n	800332c <HAL_ADC_PollForConversion+0x16c>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	e000      	b.n	800332e <HAL_ADC_PollForConversion+0x16e>
 800332c:	4b0f      	ldr	r3, [pc, #60]	@ (800336c <HAL_ADC_PollForConversion+0x1ac>)
 800332e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	2b08      	cmp	r3, #8
 800333a:	d104      	bne.n	8003346 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2208      	movs	r2, #8
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	e008      	b.n	8003358 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d103      	bne.n	8003358 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	220c      	movs	r2, #12
 8003356:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	50040300 	.word	0x50040300
 8003368:	50040100 	.word	0x50040100
 800336c:	50040000 	.word	0x50040000

08003370 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800337e:	4618      	mov	r0, r3
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b0b6      	sub	sp, #216	@ 0xd8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800339c:	2300      	movs	r3, #0
 800339e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x22>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e3c9      	b.n	8003b42 <HAL_ADC_ConfigChannel+0x7b6>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fccf 	bl	8002d5e <LL_ADC_REG_IsConversionOngoing>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f040 83aa 	bne.w	8003b1c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b05      	cmp	r3, #5
 80033d6:	d824      	bhi.n	8003422 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	3b02      	subs	r3, #2
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d81b      	bhi.n	800341a <HAL_ADC_ConfigChannel+0x8e>
 80033e2:	a201      	add	r2, pc, #4	@ (adr r2, 80033e8 <HAL_ADC_ConfigChannel+0x5c>)
 80033e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e8:	080033f9 	.word	0x080033f9
 80033ec:	08003401 	.word	0x08003401
 80033f0:	08003409 	.word	0x08003409
 80033f4:	08003411 	.word	0x08003411
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80033f8:	230c      	movs	r3, #12
 80033fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80033fe:	e010      	b.n	8003422 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003400:	2312      	movs	r3, #18
 8003402:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003406:	e00c      	b.n	8003422 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003408:	2318      	movs	r3, #24
 800340a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800340e:	e008      	b.n	8003422 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003410:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003414:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003418:	e003      	b.n	8003422 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800341a:	2306      	movs	r3, #6
 800341c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003420:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003430:	f7ff fb74 	bl	8002b1c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff fc90 	bl	8002d5e <LL_ADC_REG_IsConversionOngoing>
 800343e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff fc9c 	bl	8002d84 <LL_ADC_INJ_IsConversionOngoing>
 800344c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003450:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003454:	2b00      	cmp	r3, #0
 8003456:	f040 81a4 	bne.w	80037a2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800345a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800345e:	2b00      	cmp	r3, #0
 8003460:	f040 819f 	bne.w	80037a2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	6819      	ldr	r1, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	461a      	mov	r2, r3
 8003472:	f7ff fb7f 	bl	8002b74 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	08db      	lsrs	r3, r3, #3
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2b04      	cmp	r3, #4
 8003496:	d00a      	beq.n	80034ae <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6919      	ldr	r1, [r3, #16]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034a8:	f7ff fad0 	bl	8002a4c <LL_ADC_SetOffset>
 80034ac:	e179      	b.n	80037a2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff faed 	bl	8002a94 <LL_ADC_GetOffsetChannel>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <HAL_ADC_ConfigChannel+0x14e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2100      	movs	r1, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff fae2 	bl	8002a94 <LL_ADC_GetOffsetChannel>
 80034d0:	4603      	mov	r3, r0
 80034d2:	0e9b      	lsrs	r3, r3, #26
 80034d4:	f003 021f 	and.w	r2, r3, #31
 80034d8:	e01e      	b.n	8003518 <HAL_ADC_ConfigChannel+0x18c>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2100      	movs	r1, #0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff fad7 	bl	8002a94 <LL_ADC_GetOffsetChannel>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003500:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003508:	2320      	movs	r3, #32
 800350a:	e004      	b.n	8003516 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800350c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003510:	fab3 f383 	clz	r3, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003520:	2b00      	cmp	r3, #0
 8003522:	d105      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x1a4>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	0e9b      	lsrs	r3, r3, #26
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	e018      	b.n	8003562 <HAL_ADC_ConfigChannel+0x1d6>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003544:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003548:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800354c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003554:	2320      	movs	r3, #32
 8003556:	e004      	b.n	8003562 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003558:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800355c:	fab3 f383 	clz	r3, r3
 8003560:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003562:	429a      	cmp	r2, r3
 8003564:	d106      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2200      	movs	r2, #0
 800356c:	2100      	movs	r1, #0
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff faa6 	bl	8002ac0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2101      	movs	r1, #1
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff fa8a 	bl	8002a94 <LL_ADC_GetOffsetChannel>
 8003580:	4603      	mov	r3, r0
 8003582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10a      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x214>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2101      	movs	r1, #1
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff fa7f 	bl	8002a94 <LL_ADC_GetOffsetChannel>
 8003596:	4603      	mov	r3, r0
 8003598:	0e9b      	lsrs	r3, r3, #26
 800359a:	f003 021f 	and.w	r2, r3, #31
 800359e:	e01e      	b.n	80035de <HAL_ADC_ConfigChannel+0x252>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2101      	movs	r1, #1
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff fa74 	bl	8002a94 <LL_ADC_GetOffsetChannel>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80035be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80035c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80035ce:	2320      	movs	r3, #32
 80035d0:	e004      	b.n	80035dc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80035d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d105      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x26a>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	0e9b      	lsrs	r3, r3, #26
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	e018      	b.n	8003628 <HAL_ADC_ConfigChannel+0x29c>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800360a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800360e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003612:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800361a:	2320      	movs	r3, #32
 800361c:	e004      	b.n	8003628 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800361e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003622:	fab3 f383 	clz	r3, r3
 8003626:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003628:	429a      	cmp	r2, r3
 800362a:	d106      	bne.n	800363a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2200      	movs	r2, #0
 8003632:	2101      	movs	r1, #1
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff fa43 	bl	8002ac0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2102      	movs	r1, #2
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fa27 	bl	8002a94 <LL_ADC_GetOffsetChannel>
 8003646:	4603      	mov	r3, r0
 8003648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x2da>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2102      	movs	r1, #2
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff fa1c 	bl	8002a94 <LL_ADC_GetOffsetChannel>
 800365c:	4603      	mov	r3, r0
 800365e:	0e9b      	lsrs	r3, r3, #26
 8003660:	f003 021f 	and.w	r2, r3, #31
 8003664:	e01e      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x318>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2102      	movs	r1, #2
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff fa11 	bl	8002a94 <LL_ADC_GetOffsetChannel>
 8003672:	4603      	mov	r3, r0
 8003674:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003684:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003688:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800368c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003694:	2320      	movs	r3, #32
 8003696:	e004      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003698:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800369c:	fab3 f383 	clz	r3, r3
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d105      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x330>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	0e9b      	lsrs	r3, r3, #26
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	e014      	b.n	80036e6 <HAL_ADC_ConfigChannel+0x35a>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036c4:	fa93 f3a3 	rbit	r3, r3
 80036c8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80036ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80036d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80036d8:	2320      	movs	r3, #32
 80036da:	e004      	b.n	80036e6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80036dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80036e0:	fab3 f383 	clz	r3, r3
 80036e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d106      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2200      	movs	r2, #0
 80036f0:	2102      	movs	r1, #2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff f9e4 	bl	8002ac0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2103      	movs	r1, #3
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff f9c8 	bl	8002a94 <LL_ADC_GetOffsetChannel>
 8003704:	4603      	mov	r3, r0
 8003706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10a      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x398>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2103      	movs	r1, #3
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff f9bd 	bl	8002a94 <LL_ADC_GetOffsetChannel>
 800371a:	4603      	mov	r3, r0
 800371c:	0e9b      	lsrs	r3, r3, #26
 800371e:	f003 021f 	and.w	r2, r3, #31
 8003722:	e017      	b.n	8003754 <HAL_ADC_ConfigChannel+0x3c8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2103      	movs	r1, #3
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff f9b2 	bl	8002a94 <LL_ADC_GetOffsetChannel>
 8003730:	4603      	mov	r3, r0
 8003732:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003734:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800373c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800373e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003740:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003746:	2320      	movs	r3, #32
 8003748:	e003      	b.n	8003752 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800374a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800374c:	fab3 f383 	clz	r3, r3
 8003750:	b2db      	uxtb	r3, r3
 8003752:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <HAL_ADC_ConfigChannel+0x3e0>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	0e9b      	lsrs	r3, r3, #26
 8003766:	f003 031f 	and.w	r3, r3, #31
 800376a:	e011      	b.n	8003790 <HAL_ADC_ConfigChannel+0x404>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003772:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003774:	fa93 f3a3 	rbit	r3, r3
 8003778:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800377a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800377c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800377e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003784:	2320      	movs	r3, #32
 8003786:	e003      	b.n	8003790 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003788:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800378a:	fab3 f383 	clz	r3, r3
 800378e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003790:	429a      	cmp	r2, r3
 8003792:	d106      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2200      	movs	r2, #0
 800379a:	2103      	movs	r1, #3
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff f98f 	bl	8002ac0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff fab2 	bl	8002d10 <LL_ADC_IsEnabled>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f040 8140 	bne.w	8003a34 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	6819      	ldr	r1, [r3, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	461a      	mov	r2, r3
 80037c2:	f7ff fa03 	bl	8002bcc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	4a8f      	ldr	r2, [pc, #572]	@ (8003a08 <HAL_ADC_ConfigChannel+0x67c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	f040 8131 	bne.w	8003a34 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10b      	bne.n	80037fa <HAL_ADC_ConfigChannel+0x46e>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	0e9b      	lsrs	r3, r3, #26
 80037e8:	3301      	adds	r3, #1
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	2b09      	cmp	r3, #9
 80037f0:	bf94      	ite	ls
 80037f2:	2301      	movls	r3, #1
 80037f4:	2300      	movhi	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	e019      	b.n	800382e <HAL_ADC_ConfigChannel+0x4a2>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800380a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800380c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003812:	2320      	movs	r3, #32
 8003814:	e003      	b.n	800381e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003818:	fab3 f383 	clz	r3, r3
 800381c:	b2db      	uxtb	r3, r3
 800381e:	3301      	adds	r3, #1
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	2b09      	cmp	r3, #9
 8003826:	bf94      	ite	ls
 8003828:	2301      	movls	r3, #1
 800382a:	2300      	movhi	r3, #0
 800382c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800382e:	2b00      	cmp	r3, #0
 8003830:	d079      	beq.n	8003926 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383a:	2b00      	cmp	r3, #0
 800383c:	d107      	bne.n	800384e <HAL_ADC_ConfigChannel+0x4c2>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	0e9b      	lsrs	r3, r3, #26
 8003844:	3301      	adds	r3, #1
 8003846:	069b      	lsls	r3, r3, #26
 8003848:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800384c:	e015      	b.n	800387a <HAL_ADC_ConfigChannel+0x4ee>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003856:	fa93 f3a3 	rbit	r3, r3
 800385a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800385c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800385e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003860:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003866:	2320      	movs	r3, #32
 8003868:	e003      	b.n	8003872 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800386a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800386c:	fab3 f383 	clz	r3, r3
 8003870:	b2db      	uxtb	r3, r3
 8003872:	3301      	adds	r3, #1
 8003874:	069b      	lsls	r3, r3, #26
 8003876:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <HAL_ADC_ConfigChannel+0x50e>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	0e9b      	lsrs	r3, r3, #26
 800388c:	3301      	adds	r3, #1
 800388e:	f003 031f 	and.w	r3, r3, #31
 8003892:	2101      	movs	r1, #1
 8003894:	fa01 f303 	lsl.w	r3, r1, r3
 8003898:	e017      	b.n	80038ca <HAL_ADC_ConfigChannel+0x53e>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038a2:	fa93 f3a3 	rbit	r3, r3
 80038a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80038a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038aa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80038ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80038b2:	2320      	movs	r3, #32
 80038b4:	e003      	b.n	80038be <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80038b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038b8:	fab3 f383 	clz	r3, r3
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	3301      	adds	r3, #1
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	2101      	movs	r1, #1
 80038c6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ca:	ea42 0103 	orr.w	r1, r2, r3
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10a      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x564>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	0e9b      	lsrs	r3, r3, #26
 80038e0:	3301      	adds	r3, #1
 80038e2:	f003 021f 	and.w	r2, r3, #31
 80038e6:	4613      	mov	r3, r2
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	4413      	add	r3, r2
 80038ec:	051b      	lsls	r3, r3, #20
 80038ee:	e018      	b.n	8003922 <HAL_ADC_ConfigChannel+0x596>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f8:	fa93 f3a3 	rbit	r3, r3
 80038fc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80038fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003900:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003908:	2320      	movs	r3, #32
 800390a:	e003      	b.n	8003914 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800390c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800390e:	fab3 f383 	clz	r3, r3
 8003912:	b2db      	uxtb	r3, r3
 8003914:	3301      	adds	r3, #1
 8003916:	f003 021f 	and.w	r2, r3, #31
 800391a:	4613      	mov	r3, r2
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	4413      	add	r3, r2
 8003920:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003922:	430b      	orrs	r3, r1
 8003924:	e081      	b.n	8003a2a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800392e:	2b00      	cmp	r3, #0
 8003930:	d107      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x5b6>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	0e9b      	lsrs	r3, r3, #26
 8003938:	3301      	adds	r3, #1
 800393a:	069b      	lsls	r3, r3, #26
 800393c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003940:	e015      	b.n	800396e <HAL_ADC_ConfigChannel+0x5e2>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394a:	fa93 f3a3 	rbit	r3, r3
 800394e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800395a:	2320      	movs	r3, #32
 800395c:	e003      	b.n	8003966 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800395e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003960:	fab3 f383 	clz	r3, r3
 8003964:	b2db      	uxtb	r3, r3
 8003966:	3301      	adds	r3, #1
 8003968:	069b      	lsls	r3, r3, #26
 800396a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003976:	2b00      	cmp	r3, #0
 8003978:	d109      	bne.n	800398e <HAL_ADC_ConfigChannel+0x602>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	0e9b      	lsrs	r3, r3, #26
 8003980:	3301      	adds	r3, #1
 8003982:	f003 031f 	and.w	r3, r3, #31
 8003986:	2101      	movs	r1, #1
 8003988:	fa01 f303 	lsl.w	r3, r1, r3
 800398c:	e017      	b.n	80039be <HAL_ADC_ConfigChannel+0x632>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	fa93 f3a3 	rbit	r3, r3
 800399a:	61bb      	str	r3, [r7, #24]
  return result;
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80039a6:	2320      	movs	r3, #32
 80039a8:	e003      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	fab3 f383 	clz	r3, r3
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	3301      	adds	r3, #1
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	2101      	movs	r1, #1
 80039ba:	fa01 f303 	lsl.w	r3, r1, r3
 80039be:	ea42 0103 	orr.w	r1, r2, r3
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10d      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x65e>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	0e9b      	lsrs	r3, r3, #26
 80039d4:	3301      	adds	r3, #1
 80039d6:	f003 021f 	and.w	r2, r3, #31
 80039da:	4613      	mov	r3, r2
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	4413      	add	r3, r2
 80039e0:	3b1e      	subs	r3, #30
 80039e2:	051b      	lsls	r3, r3, #20
 80039e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039e8:	e01e      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x69c>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	fa93 f3a3 	rbit	r3, r3
 80039f6:	60fb      	str	r3, [r7, #12]
  return result;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d104      	bne.n	8003a0c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003a02:	2320      	movs	r3, #32
 8003a04:	e006      	b.n	8003a14 <HAL_ADC_ConfigChannel+0x688>
 8003a06:	bf00      	nop
 8003a08:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	fab3 f383 	clz	r3, r3
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	3301      	adds	r3, #1
 8003a16:	f003 021f 	and.w	r2, r3, #31
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	4413      	add	r3, r2
 8003a20:	3b1e      	subs	r3, #30
 8003a22:	051b      	lsls	r3, r3, #20
 8003a24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a28:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a2e:	4619      	mov	r1, r3
 8003a30:	f7ff f8a0 	bl	8002b74 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	4b44      	ldr	r3, [pc, #272]	@ (8003b4c <HAL_ADC_ConfigChannel+0x7c0>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d07a      	beq.n	8003b36 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a40:	4843      	ldr	r0, [pc, #268]	@ (8003b50 <HAL_ADC_ConfigChannel+0x7c4>)
 8003a42:	f7fe fff5 	bl	8002a30 <LL_ADC_GetCommonPathInternalCh>
 8003a46:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a41      	ldr	r2, [pc, #260]	@ (8003b54 <HAL_ADC_ConfigChannel+0x7c8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d12c      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d126      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a3c      	ldr	r2, [pc, #240]	@ (8003b58 <HAL_ADC_ConfigChannel+0x7cc>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d004      	beq.n	8003a74 <HAL_ADC_ConfigChannel+0x6e8>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a3b      	ldr	r2, [pc, #236]	@ (8003b5c <HAL_ADC_ConfigChannel+0x7d0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d15d      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4834      	ldr	r0, [pc, #208]	@ (8003b50 <HAL_ADC_ConfigChannel+0x7c4>)
 8003a80:	f7fe ffc3 	bl	8002a0a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a84:	4b36      	ldr	r3, [pc, #216]	@ (8003b60 <HAL_ADC_ConfigChannel+0x7d4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	099b      	lsrs	r3, r3, #6
 8003a8a:	4a36      	ldr	r2, [pc, #216]	@ (8003b64 <HAL_ADC_ConfigChannel+0x7d8>)
 8003a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a90:	099b      	lsrs	r3, r3, #6
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	4613      	mov	r3, r2
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003a9e:	e002      	b.n	8003aa6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f9      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003aac:	e040      	b.n	8003b30 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a2d      	ldr	r2, [pc, #180]	@ (8003b68 <HAL_ADC_ConfigChannel+0x7dc>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d118      	bne.n	8003aea <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ab8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003abc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d112      	bne.n	8003aea <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a23      	ldr	r2, [pc, #140]	@ (8003b58 <HAL_ADC_ConfigChannel+0x7cc>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d004      	beq.n	8003ad8 <HAL_ADC_ConfigChannel+0x74c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a22      	ldr	r2, [pc, #136]	@ (8003b5c <HAL_ADC_ConfigChannel+0x7d0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d12d      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ad8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003adc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	481b      	ldr	r0, [pc, #108]	@ (8003b50 <HAL_ADC_ConfigChannel+0x7c4>)
 8003ae4:	f7fe ff91 	bl	8002a0a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ae8:	e024      	b.n	8003b34 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a1f      	ldr	r2, [pc, #124]	@ (8003b6c <HAL_ADC_ConfigChannel+0x7e0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d120      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003af4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003af8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d11a      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a14      	ldr	r2, [pc, #80]	@ (8003b58 <HAL_ADC_ConfigChannel+0x7cc>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d115      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b12:	4619      	mov	r1, r3
 8003b14:	480e      	ldr	r0, [pc, #56]	@ (8003b50 <HAL_ADC_ConfigChannel+0x7c4>)
 8003b16:	f7fe ff78 	bl	8002a0a <LL_ADC_SetCommonPathInternalCh>
 8003b1a:	e00c      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b20:	f043 0220 	orr.w	r2, r3, #32
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003b2e:	e002      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b30:	bf00      	nop
 8003b32:	e000      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b3e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	37d8      	adds	r7, #216	@ 0xd8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	80080000 	.word	0x80080000
 8003b50:	50040300 	.word	0x50040300
 8003b54:	c7520000 	.word	0xc7520000
 8003b58:	50040000 	.word	0x50040000
 8003b5c:	50040200 	.word	0x50040200
 8003b60:	20000008 	.word	0x20000008
 8003b64:	053e2d63 	.word	0x053e2d63
 8003b68:	cb840000 	.word	0xcb840000
 8003b6c:	80000001 	.word	0x80000001

08003b70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff f8c5 	bl	8002d10 <LL_ADC_IsEnabled>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d169      	bne.n	8003c60 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	4b36      	ldr	r3, [pc, #216]	@ (8003c6c <ADC_Enable+0xfc>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00d      	beq.n	8003bb6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9e:	f043 0210 	orr.w	r2, r3, #16
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003baa:	f043 0201 	orr.w	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e055      	b.n	8003c62 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff f894 	bl	8002ce8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003bc0:	482b      	ldr	r0, [pc, #172]	@ (8003c70 <ADC_Enable+0x100>)
 8003bc2:	f7fe ff35 	bl	8002a30 <LL_ADC_GetCommonPathInternalCh>
 8003bc6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003bc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d013      	beq.n	8003bf8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bd0:	4b28      	ldr	r3, [pc, #160]	@ (8003c74 <ADC_Enable+0x104>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	099b      	lsrs	r3, r3, #6
 8003bd6:	4a28      	ldr	r2, [pc, #160]	@ (8003c78 <ADC_Enable+0x108>)
 8003bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bdc:	099b      	lsrs	r3, r3, #6
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	4613      	mov	r3, r2
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003bea:	e002      	b.n	8003bf2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1f9      	bne.n	8003bec <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003bf8:	f7fe fec4 	bl	8002984 <HAL_GetTick>
 8003bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bfe:	e028      	b.n	8003c52 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff f883 	bl	8002d10 <LL_ADC_IsEnabled>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d104      	bne.n	8003c1a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff f867 	bl	8002ce8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c1a:	f7fe feb3 	bl	8002984 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d914      	bls.n	8003c52 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d00d      	beq.n	8003c52 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c3a:	f043 0210 	orr.w	r2, r3, #16
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c46:	f043 0201 	orr.w	r2, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e007      	b.n	8003c62 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d1cf      	bne.n	8003c00 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	8000003f 	.word	0x8000003f
 8003c70:	50040300 	.word	0x50040300
 8003c74:	20000008 	.word	0x20000008
 8003c78:	053e2d63 	.word	0x053e2d63

08003c7c <LL_ADC_IsEnabled>:
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <LL_ADC_IsEnabled+0x18>
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <LL_ADC_IsEnabled+0x1a>
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d101      	bne.n	8003cba <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003cc8:	b590      	push	{r4, r7, lr}
 8003cca:	b09f      	sub	sp, #124	@ 0x7c
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e093      	b.n	8003e0e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003cee:	2300      	movs	r3, #0
 8003cf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a47      	ldr	r2, [pc, #284]	@ (8003e18 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d102      	bne.n	8003d06 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d00:	4b46      	ldr	r3, [pc, #280]	@ (8003e1c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	e001      	b.n	8003d0a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d06:	2300      	movs	r3, #0
 8003d08:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10b      	bne.n	8003d28 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d14:	f043 0220 	orr.w	r2, r3, #32
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e072      	b.n	8003e0e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff ffb9 	bl	8003ca2 <LL_ADC_REG_IsConversionOngoing>
 8003d30:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff ffb3 	bl	8003ca2 <LL_ADC_REG_IsConversionOngoing>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d154      	bne.n	8003dec <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003d42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d151      	bne.n	8003dec <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d48:	4b35      	ldr	r3, [pc, #212]	@ (8003e20 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003d4a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d02c      	beq.n	8003dae <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d66:	035b      	lsls	r3, r3, #13
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d6e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d70:	4829      	ldr	r0, [pc, #164]	@ (8003e18 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003d72:	f7ff ff83 	bl	8003c7c <LL_ADC_IsEnabled>
 8003d76:	4604      	mov	r4, r0
 8003d78:	4828      	ldr	r0, [pc, #160]	@ (8003e1c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003d7a:	f7ff ff7f 	bl	8003c7c <LL_ADC_IsEnabled>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	431c      	orrs	r4, r3
 8003d82:	4828      	ldr	r0, [pc, #160]	@ (8003e24 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003d84:	f7ff ff7a 	bl	8003c7c <LL_ADC_IsEnabled>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	4323      	orrs	r3, r4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d137      	bne.n	8003e00 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003d98:	f023 030f 	bic.w	r3, r3, #15
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	6811      	ldr	r1, [r2, #0]
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	6892      	ldr	r2, [r2, #8]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	431a      	orrs	r2, r3
 8003da8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003daa:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003dac:	e028      	b.n	8003e00 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003dae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003db6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003db8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dba:	4817      	ldr	r0, [pc, #92]	@ (8003e18 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003dbc:	f7ff ff5e 	bl	8003c7c <LL_ADC_IsEnabled>
 8003dc0:	4604      	mov	r4, r0
 8003dc2:	4816      	ldr	r0, [pc, #88]	@ (8003e1c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003dc4:	f7ff ff5a 	bl	8003c7c <LL_ADC_IsEnabled>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	431c      	orrs	r4, r3
 8003dcc:	4815      	ldr	r0, [pc, #84]	@ (8003e24 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003dce:	f7ff ff55 	bl	8003c7c <LL_ADC_IsEnabled>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	4323      	orrs	r3, r4
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d112      	bne.n	8003e00 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003dda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003de2:	f023 030f 	bic.w	r3, r3, #15
 8003de6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003de8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003dea:	e009      	b.n	8003e00 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df0:	f043 0220 	orr.w	r2, r3, #32
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003dfe:	e000      	b.n	8003e02 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e00:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e0a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	377c      	adds	r7, #124	@ 0x7c
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd90      	pop	{r4, r7, pc}
 8003e16:	bf00      	nop
 8003e18:	50040000 	.word	0x50040000
 8003e1c:	50040100 	.word	0x50040100
 8003e20:	50040300 	.word	0x50040300
 8003e24:	50040200 	.word	0x50040200

08003e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e38:	4b0c      	ldr	r3, [pc, #48]	@ (8003e6c <__NVIC_SetPriorityGrouping+0x44>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e44:	4013      	ands	r3, r2
 8003e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e5a:	4a04      	ldr	r2, [pc, #16]	@ (8003e6c <__NVIC_SetPriorityGrouping+0x44>)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	60d3      	str	r3, [r2, #12]
}
 8003e60:	bf00      	nop
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	e000ed00 	.word	0xe000ed00

08003e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e74:	4b04      	ldr	r3, [pc, #16]	@ (8003e88 <__NVIC_GetPriorityGrouping+0x18>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	0a1b      	lsrs	r3, r3, #8
 8003e7a:	f003 0307 	and.w	r3, r3, #7
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	e000ed00 	.word	0xe000ed00

08003e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	db0b      	blt.n	8003eb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e9e:	79fb      	ldrb	r3, [r7, #7]
 8003ea0:	f003 021f 	and.w	r2, r3, #31
 8003ea4:	4907      	ldr	r1, [pc, #28]	@ (8003ec4 <__NVIC_EnableIRQ+0x38>)
 8003ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	2001      	movs	r0, #1
 8003eae:	fa00 f202 	lsl.w	r2, r0, r2
 8003eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	e000e100 	.word	0xe000e100

08003ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	6039      	str	r1, [r7, #0]
 8003ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	db0a      	blt.n	8003ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	490c      	ldr	r1, [pc, #48]	@ (8003f14 <__NVIC_SetPriority+0x4c>)
 8003ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee6:	0112      	lsls	r2, r2, #4
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	440b      	add	r3, r1
 8003eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ef0:	e00a      	b.n	8003f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	4908      	ldr	r1, [pc, #32]	@ (8003f18 <__NVIC_SetPriority+0x50>)
 8003ef8:	79fb      	ldrb	r3, [r7, #7]
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	3b04      	subs	r3, #4
 8003f00:	0112      	lsls	r2, r2, #4
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	440b      	add	r3, r1
 8003f06:	761a      	strb	r2, [r3, #24]
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	e000e100 	.word	0xe000e100
 8003f18:	e000ed00 	.word	0xe000ed00

08003f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b089      	sub	sp, #36	@ 0x24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f1c3 0307 	rsb	r3, r3, #7
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	bf28      	it	cs
 8003f3a:	2304      	movcs	r3, #4
 8003f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	3304      	adds	r3, #4
 8003f42:	2b06      	cmp	r3, #6
 8003f44:	d902      	bls.n	8003f4c <NVIC_EncodePriority+0x30>
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	3b03      	subs	r3, #3
 8003f4a:	e000      	b.n	8003f4e <NVIC_EncodePriority+0x32>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	43da      	mvns	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	401a      	ands	r2, r3
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6e:	43d9      	mvns	r1, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f74:	4313      	orrs	r3, r2
         );
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3724      	adds	r7, #36	@ 0x24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f94:	d301      	bcc.n	8003f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f96:	2301      	movs	r3, #1
 8003f98:	e00f      	b.n	8003fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003fc4 <SysTick_Config+0x40>)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fa2:	210f      	movs	r1, #15
 8003fa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003fa8:	f7ff ff8e 	bl	8003ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fac:	4b05      	ldr	r3, [pc, #20]	@ (8003fc4 <SysTick_Config+0x40>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fb2:	4b04      	ldr	r3, [pc, #16]	@ (8003fc4 <SysTick_Config+0x40>)
 8003fb4:	2207      	movs	r2, #7
 8003fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	e000e010 	.word	0xe000e010

08003fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff ff29 	bl	8003e28 <__NVIC_SetPriorityGrouping>
}
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b086      	sub	sp, #24
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003fec:	2300      	movs	r3, #0
 8003fee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ff0:	f7ff ff3e 	bl	8003e70 <__NVIC_GetPriorityGrouping>
 8003ff4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	6978      	ldr	r0, [r7, #20]
 8003ffc:	f7ff ff8e 	bl	8003f1c <NVIC_EncodePriority>
 8004000:	4602      	mov	r2, r0
 8004002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004006:	4611      	mov	r1, r2
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff ff5d 	bl	8003ec8 <__NVIC_SetPriority>
}
 800400e:	bf00      	nop
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	4603      	mov	r3, r0
 800401e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff ff31 	bl	8003e8c <__NVIC_EnableIRQ>
}
 800402a:	bf00      	nop
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7ff ffa2 	bl	8003f84 <SysTick_Config>
 8004040:	4603      	mov	r3, r0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e014      	b.n	8004086 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	791b      	ldrb	r3, [r3, #4]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d105      	bne.n	8004072 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7fd ffa7 	bl	8001fc0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	795b      	ldrb	r3, [r3, #5]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_DAC_Start+0x16>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e03b      	b.n	800411c <HAL_DAC_Start+0x8e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2202      	movs	r2, #2
 80040ae:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6819      	ldr	r1, [r3, #0]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	f003 0310 	and.w	r3, r3, #16
 80040bc:	2201      	movs	r2, #1
 80040be:	409a      	lsls	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10f      	bne.n	80040ee <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d118      	bne.n	800410e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	605a      	str	r2, [r3, #4]
 80040ec:	e00f      	b.n	800410e <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80040f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040fc:	d107      	bne.n	800410e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f042 0202 	orr.w	r2, r2, #2
 800410c:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800413a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800413e:	d120      	bne.n	8004182 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004146:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800414a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800414e:	d118      	bne.n	8004182 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2204      	movs	r2, #4
 8004154:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f043 0201 	orr.w	r2, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800416a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800417a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f852 	bl	8004226 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800418c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004190:	d120      	bne.n	80041d4 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004198:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800419c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041a0:	d118      	bne.n	80041d4 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2204      	movs	r2, #4
 80041a6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f043 0202 	orr.w	r2, r3, #2
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80041bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80041cc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f95a 	bl	8004488 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80041d4:	bf00      	nop
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d105      	bne.n	8004206 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4413      	add	r3, r2
 8004200:	3308      	adds	r3, #8
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	e004      	b.n	8004210 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4413      	add	r3, r2
 800420c:	3314      	adds	r3, #20
 800420e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	461a      	mov	r2, r3
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	371c      	adds	r7, #28
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b088      	sub	sp, #32
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	795b      	ldrb	r3, [r3, #5]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <HAL_DAC_ConfigChannel+0x1c>
 8004252:	2302      	movs	r3, #2
 8004254:	e114      	b.n	8004480 <HAL_DAC_ConfigChannel+0x246>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2201      	movs	r2, #1
 800425a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2202      	movs	r2, #2
 8004260:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b04      	cmp	r3, #4
 8004268:	f040 8081 	bne.w	800436e <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800426c:	f7fe fb8a 	bl	8002984 <HAL_GetTick>
 8004270:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d140      	bne.n	80042fa <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004278:	e018      	b.n	80042ac <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800427a:	f7fe fb83 	bl	8002984 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b01      	cmp	r3, #1
 8004286:	d911      	bls.n	80042ac <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800428e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f043 0208 	orr.w	r2, r3, #8
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2203      	movs	r2, #3
 80042a6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e0e9      	b.n	8004480 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1df      	bne.n	800427a <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80042ba:	2001      	movs	r0, #1
 80042bc:	f7fe fb6e 	bl	800299c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	6992      	ldr	r2, [r2, #24]
 80042c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80042ca:	e023      	b.n	8004314 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80042cc:	f7fe fb5a 	bl	8002984 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d90f      	bls.n	80042fa <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	da0a      	bge.n	80042fa <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f043 0208 	orr.w	r2, r3, #8
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2203      	movs	r2, #3
 80042f4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e0c2      	b.n	8004480 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004300:	2b00      	cmp	r3, #0
 8004302:	dbe3      	blt.n	80042cc <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8004304:	2001      	movs	r0, #1
 8004306:	f7fe fb49 	bl	800299c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	6992      	ldr	r2, [r2, #24]
 8004312:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004324:	fa01 f303 	lsl.w	r3, r1, r3
 8004328:	43db      	mvns	r3, r3
 800432a:	ea02 0103 	and.w	r1, r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	69da      	ldr	r2, [r3, #28]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	409a      	lsls	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f003 0310 	and.w	r3, r3, #16
 800434e:	21ff      	movs	r1, #255	@ 0xff
 8004350:	fa01 f303 	lsl.w	r3, r1, r3
 8004354:	43db      	mvns	r3, r3
 8004356:	ea02 0103 	and.w	r1, r2, r3
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	6a1a      	ldr	r2, [r3, #32]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	409a      	lsls	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d11d      	bne.n	80043b2 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	221f      	movs	r2, #31
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43db      	mvns	r3, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4013      	ands	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f003 0310 	and.w	r3, r3, #16
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	2207      	movs	r2, #7
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	43db      	mvns	r3, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4013      	ands	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f003 0310 	and.w	r3, r3, #16
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6819      	ldr	r1, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f003 0310 	and.w	r3, r3, #16
 8004406:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	43da      	mvns	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	400a      	ands	r2, r1
 8004416:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f003 0310 	and.w	r3, r3, #16
 8004426:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43db      	mvns	r3, r3
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	4013      	ands	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f003 0310 	and.w	r3, r3, #16
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4313      	orrs	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6819      	ldr	r1, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	22c0      	movs	r2, #192	@ 0xc0
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	43da      	mvns	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	400a      	ands	r2, r1
 8004470:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2201      	movs	r2, #1
 8004476:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3720      	adds	r7, #32
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e0ac      	b.n	8004608 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 f8b2 	bl	800461c <DFSDM_GetChannelFromInstance>
 80044b8:	4603      	mov	r3, r0
 80044ba:	4a55      	ldr	r2, [pc, #340]	@ (8004610 <HAL_DFSDM_ChannelInit+0x174>)
 80044bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e09f      	b.n	8004608 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7fd fdbf 	bl	800204c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80044ce:	4b51      	ldr	r3, [pc, #324]	@ (8004614 <HAL_DFSDM_ChannelInit+0x178>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3301      	adds	r3, #1
 80044d4:	4a4f      	ldr	r2, [pc, #316]	@ (8004614 <HAL_DFSDM_ChannelInit+0x178>)
 80044d6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80044d8:	4b4e      	ldr	r3, [pc, #312]	@ (8004614 <HAL_DFSDM_ChannelInit+0x178>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d125      	bne.n	800452c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80044e0:	4b4d      	ldr	r3, [pc, #308]	@ (8004618 <HAL_DFSDM_ChannelInit+0x17c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a4c      	ldr	r2, [pc, #304]	@ (8004618 <HAL_DFSDM_ChannelInit+0x17c>)
 80044e6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80044ea:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80044ec:	4b4a      	ldr	r3, [pc, #296]	@ (8004618 <HAL_DFSDM_ChannelInit+0x17c>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	4948      	ldr	r1, [pc, #288]	@ (8004618 <HAL_DFSDM_ChannelInit+0x17c>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80044fa:	4b47      	ldr	r3, [pc, #284]	@ (8004618 <HAL_DFSDM_ChannelInit+0x17c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a46      	ldr	r2, [pc, #280]	@ (8004618 <HAL_DFSDM_ChannelInit+0x17c>)
 8004500:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8004504:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	791b      	ldrb	r3, [r3, #4]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d108      	bne.n	8004520 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800450e:	4b42      	ldr	r3, [pc, #264]	@ (8004618 <HAL_DFSDM_ChannelInit+0x17c>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	3b01      	subs	r3, #1
 8004518:	041b      	lsls	r3, r3, #16
 800451a:	493f      	ldr	r1, [pc, #252]	@ (8004618 <HAL_DFSDM_ChannelInit+0x17c>)
 800451c:	4313      	orrs	r3, r2
 800451e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004520:	4b3d      	ldr	r3, [pc, #244]	@ (8004618 <HAL_DFSDM_ChannelInit+0x17c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a3c      	ldr	r2, [pc, #240]	@ (8004618 <HAL_DFSDM_ChannelInit+0x17c>)
 8004526:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800452a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 800453a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6819      	ldr	r1, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800454a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004550:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 020f 	bic.w	r2, r2, #15
 8004568:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6819      	ldr	r1, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8004590:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6899      	ldr	r1, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a0:	3b01      	subs	r3, #1
 80045a2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f002 0207 	and.w	r2, r2, #7
 80045bc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6859      	ldr	r1, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ce:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80045e8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 f810 	bl	800461c <DFSDM_GetChannelFromInstance>
 80045fc:	4602      	mov	r2, r0
 80045fe:	4904      	ldr	r1, [pc, #16]	@ (8004610 <HAL_DFSDM_ChannelInit+0x174>)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20000650 	.word	0x20000650
 8004614:	2000064c 	.word	0x2000064c
 8004618:	40016000 	.word	0x40016000

0800461c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a1c      	ldr	r2, [pc, #112]	@ (8004698 <DFSDM_GetChannelFromInstance+0x7c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d102      	bne.n	8004632 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	e02b      	b.n	800468a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a19      	ldr	r2, [pc, #100]	@ (800469c <DFSDM_GetChannelFromInstance+0x80>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d102      	bne.n	8004640 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800463a:	2301      	movs	r3, #1
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	e024      	b.n	800468a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a17      	ldr	r2, [pc, #92]	@ (80046a0 <DFSDM_GetChannelFromInstance+0x84>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d102      	bne.n	800464e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004648:	2302      	movs	r3, #2
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	e01d      	b.n	800468a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a14      	ldr	r2, [pc, #80]	@ (80046a4 <DFSDM_GetChannelFromInstance+0x88>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d102      	bne.n	800465c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004656:	2304      	movs	r3, #4
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	e016      	b.n	800468a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a12      	ldr	r2, [pc, #72]	@ (80046a8 <DFSDM_GetChannelFromInstance+0x8c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d102      	bne.n	800466a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004664:	2305      	movs	r3, #5
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	e00f      	b.n	800468a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a0f      	ldr	r2, [pc, #60]	@ (80046ac <DFSDM_GetChannelFromInstance+0x90>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d102      	bne.n	8004678 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004672:	2306      	movs	r3, #6
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	e008      	b.n	800468a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a0d      	ldr	r2, [pc, #52]	@ (80046b0 <DFSDM_GetChannelFromInstance+0x94>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d102      	bne.n	8004686 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004680:	2307      	movs	r3, #7
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	e001      	b.n	800468a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004686:	2303      	movs	r3, #3
 8004688:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800468a:	68fb      	ldr	r3, [r7, #12]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	40016000 	.word	0x40016000
 800469c:	40016020 	.word	0x40016020
 80046a0:	40016040 	.word	0x40016040
 80046a4:	40016080 	.word	0x40016080
 80046a8:	400160a0 	.word	0x400160a0
 80046ac:	400160c0 	.word	0x400160c0
 80046b0:	400160e0 	.word	0x400160e0

080046b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046be:	2300      	movs	r3, #0
 80046c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046c2:	e17f      	b.n	80049c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	2101      	movs	r1, #1
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	fa01 f303 	lsl.w	r3, r1, r3
 80046d0:	4013      	ands	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 8171 	beq.w	80049be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d005      	beq.n	80046f4 <HAL_GPIO_Init+0x40>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d130      	bne.n	8004756 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	2203      	movs	r2, #3
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	43db      	mvns	r3, r3
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4013      	ands	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800472a:	2201      	movs	r2, #1
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43db      	mvns	r3, r3
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4013      	ands	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	091b      	lsrs	r3, r3, #4
 8004740:	f003 0201 	and.w	r2, r3, #1
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	2b03      	cmp	r3, #3
 8004760:	d118      	bne.n	8004794 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004768:	2201      	movs	r2, #1
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	43db      	mvns	r3, r3
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4013      	ands	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	08db      	lsrs	r3, r3, #3
 800477e:	f003 0201 	and.w	r2, r3, #1
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f003 0303 	and.w	r3, r3, #3
 800479c:	2b03      	cmp	r3, #3
 800479e:	d017      	beq.n	80047d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	2203      	movs	r2, #3
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	43db      	mvns	r3, r3
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	4013      	ands	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d123      	bne.n	8004824 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	08da      	lsrs	r2, r3, #3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3208      	adds	r2, #8
 80047e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	220f      	movs	r2, #15
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	43db      	mvns	r3, r3
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4013      	ands	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	4313      	orrs	r3, r2
 8004814:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	08da      	lsrs	r2, r3, #3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	3208      	adds	r2, #8
 800481e:	6939      	ldr	r1, [r7, #16]
 8004820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	2203      	movs	r2, #3
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	43db      	mvns	r3, r3
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4013      	ands	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f003 0203 	and.w	r2, r3, #3
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 80ac 	beq.w	80049be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004866:	4b5f      	ldr	r3, [pc, #380]	@ (80049e4 <HAL_GPIO_Init+0x330>)
 8004868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800486a:	4a5e      	ldr	r2, [pc, #376]	@ (80049e4 <HAL_GPIO_Init+0x330>)
 800486c:	f043 0301 	orr.w	r3, r3, #1
 8004870:	6613      	str	r3, [r2, #96]	@ 0x60
 8004872:	4b5c      	ldr	r3, [pc, #368]	@ (80049e4 <HAL_GPIO_Init+0x330>)
 8004874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	60bb      	str	r3, [r7, #8]
 800487c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800487e:	4a5a      	ldr	r2, [pc, #360]	@ (80049e8 <HAL_GPIO_Init+0x334>)
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	089b      	lsrs	r3, r3, #2
 8004884:	3302      	adds	r3, #2
 8004886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800488a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	220f      	movs	r2, #15
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43db      	mvns	r3, r3
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4013      	ands	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80048a8:	d025      	beq.n	80048f6 <HAL_GPIO_Init+0x242>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a4f      	ldr	r2, [pc, #316]	@ (80049ec <HAL_GPIO_Init+0x338>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d01f      	beq.n	80048f2 <HAL_GPIO_Init+0x23e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a4e      	ldr	r2, [pc, #312]	@ (80049f0 <HAL_GPIO_Init+0x33c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d019      	beq.n	80048ee <HAL_GPIO_Init+0x23a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a4d      	ldr	r2, [pc, #308]	@ (80049f4 <HAL_GPIO_Init+0x340>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d013      	beq.n	80048ea <HAL_GPIO_Init+0x236>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a4c      	ldr	r2, [pc, #304]	@ (80049f8 <HAL_GPIO_Init+0x344>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00d      	beq.n	80048e6 <HAL_GPIO_Init+0x232>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a4b      	ldr	r2, [pc, #300]	@ (80049fc <HAL_GPIO_Init+0x348>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d007      	beq.n	80048e2 <HAL_GPIO_Init+0x22e>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a4a      	ldr	r2, [pc, #296]	@ (8004a00 <HAL_GPIO_Init+0x34c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d101      	bne.n	80048de <HAL_GPIO_Init+0x22a>
 80048da:	2306      	movs	r3, #6
 80048dc:	e00c      	b.n	80048f8 <HAL_GPIO_Init+0x244>
 80048de:	2307      	movs	r3, #7
 80048e0:	e00a      	b.n	80048f8 <HAL_GPIO_Init+0x244>
 80048e2:	2305      	movs	r3, #5
 80048e4:	e008      	b.n	80048f8 <HAL_GPIO_Init+0x244>
 80048e6:	2304      	movs	r3, #4
 80048e8:	e006      	b.n	80048f8 <HAL_GPIO_Init+0x244>
 80048ea:	2303      	movs	r3, #3
 80048ec:	e004      	b.n	80048f8 <HAL_GPIO_Init+0x244>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e002      	b.n	80048f8 <HAL_GPIO_Init+0x244>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <HAL_GPIO_Init+0x244>
 80048f6:	2300      	movs	r3, #0
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	f002 0203 	and.w	r2, r2, #3
 80048fe:	0092      	lsls	r2, r2, #2
 8004900:	4093      	lsls	r3, r2
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004908:	4937      	ldr	r1, [pc, #220]	@ (80049e8 <HAL_GPIO_Init+0x334>)
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	089b      	lsrs	r3, r3, #2
 800490e:	3302      	adds	r3, #2
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004916:	4b3b      	ldr	r3, [pc, #236]	@ (8004a04 <HAL_GPIO_Init+0x350>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	43db      	mvns	r3, r3
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4013      	ands	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800493a:	4a32      	ldr	r2, [pc, #200]	@ (8004a04 <HAL_GPIO_Init+0x350>)
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004940:	4b30      	ldr	r3, [pc, #192]	@ (8004a04 <HAL_GPIO_Init+0x350>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	43db      	mvns	r3, r3
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	4013      	ands	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4313      	orrs	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004964:	4a27      	ldr	r2, [pc, #156]	@ (8004a04 <HAL_GPIO_Init+0x350>)
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800496a:	4b26      	ldr	r3, [pc, #152]	@ (8004a04 <HAL_GPIO_Init+0x350>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	43db      	mvns	r3, r3
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4013      	ands	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4313      	orrs	r3, r2
 800498c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800498e:	4a1d      	ldr	r2, [pc, #116]	@ (8004a04 <HAL_GPIO_Init+0x350>)
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004994:	4b1b      	ldr	r3, [pc, #108]	@ (8004a04 <HAL_GPIO_Init+0x350>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	43db      	mvns	r3, r3
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4013      	ands	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049b8:	4a12      	ldr	r2, [pc, #72]	@ (8004a04 <HAL_GPIO_Init+0x350>)
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	3301      	adds	r3, #1
 80049c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	fa22 f303 	lsr.w	r3, r2, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f47f ae78 	bne.w	80046c4 <HAL_GPIO_Init+0x10>
  }
}
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop
 80049d8:	371c      	adds	r7, #28
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40021000 	.word	0x40021000
 80049e8:	40010000 	.word	0x40010000
 80049ec:	48000400 	.word	0x48000400
 80049f0:	48000800 	.word	0x48000800
 80049f4:	48000c00 	.word	0x48000c00
 80049f8:	48001000 	.word	0x48001000
 80049fc:	48001400 	.word	0x48001400
 8004a00:	48001800 	.word	0x48001800
 8004a04:	40010400 	.word	0x40010400

08004a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	807b      	strh	r3, [r7, #2]
 8004a14:	4613      	mov	r3, r2
 8004a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a18:	787b      	ldrb	r3, [r7, #1]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a1e:	887a      	ldrh	r2, [r7, #2]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a24:	e002      	b.n	8004a2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a26:	887a      	ldrh	r2, [r7, #2]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a42:	4b08      	ldr	r3, [pc, #32]	@ (8004a64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a44:	695a      	ldr	r2, [r3, #20]
 8004a46:	88fb      	ldrh	r3, [r7, #6]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d006      	beq.n	8004a5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a4e:	4a05      	ldr	r2, [pc, #20]	@ (8004a64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a50:	88fb      	ldrh	r3, [r7, #6]
 8004a52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a54:	88fb      	ldrh	r3, [r7, #6]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 f806 	bl	8004a68 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a5c:	bf00      	nop
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40010400 	.word	0x40010400

08004a68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b082      	sub	sp, #8
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e08d      	b.n	8004bac <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d106      	bne.n	8004aaa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7fd fb35 	bl	8002114 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2224      	movs	r2, #36	@ 0x24
 8004aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0201 	bic.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ace:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689a      	ldr	r2, [r3, #8]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ade:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d107      	bne.n	8004af8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004af4:	609a      	str	r2, [r3, #8]
 8004af6:	e006      	b.n	8004b06 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004b04:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d108      	bne.n	8004b20 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b1c:	605a      	str	r2, [r3, #4]
 8004b1e:	e007      	b.n	8004b30 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b2e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b42:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b52:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69d9      	ldr	r1, [r3, #28]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1a      	ldr	r2, [r3, #32]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f042 0201 	orr.w	r2, r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b20      	cmp	r3, #32
 8004bc8:	d138      	bne.n	8004c3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d101      	bne.n	8004bd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	e032      	b.n	8004c3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2224      	movs	r2, #36	@ 0x24
 8004be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0201 	bic.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6819      	ldr	r1, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	e000      	b.n	8004c3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c3c:	2302      	movs	r3, #2
  }
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b085      	sub	sp, #20
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	d139      	bne.n	8004cd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e033      	b.n	8004cd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2224      	movs	r2, #36	@ 0x24
 8004c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0201 	bic.w	r2, r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004c9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	e000      	b.n	8004cd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004cd4:	2302      	movs	r3, #2
  }
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b086      	sub	sp, #24
 8004ce6:	af02      	add	r7, sp, #8
 8004ce8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e101      	b.n	8004ef8 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d106      	bne.n	8004d0e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f007 f861 	bl	800bdd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2203      	movs	r2, #3
 8004d12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f003 fe14 	bl	800894e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	7c1a      	ldrb	r2, [r3, #16]
 8004d2e:	f88d 2000 	strb.w	r2, [sp]
 8004d32:	3304      	adds	r3, #4
 8004d34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d36:	f003 fd30 	bl	800879a <USB_CoreInit>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e0d5      	b.n	8004ef8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2100      	movs	r1, #0
 8004d52:	4618      	mov	r0, r3
 8004d54:	f003 fe0c 	bl	8008970 <USB_SetCurrentMode>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d005      	beq.n	8004d6a <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2202      	movs	r2, #2
 8004d62:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e0c6      	b.n	8004ef8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	73fb      	strb	r3, [r7, #15]
 8004d6e:	e04a      	b.n	8004e06 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d70:	7bfa      	ldrb	r2, [r7, #15]
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	4413      	add	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	3315      	adds	r3, #21
 8004d80:	2201      	movs	r2, #1
 8004d82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d84:	7bfa      	ldrb	r2, [r7, #15]
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4413      	add	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	3314      	adds	r3, #20
 8004d94:	7bfa      	ldrb	r2, [r7, #15]
 8004d96:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d98:	7bfa      	ldrb	r2, [r7, #15]
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
 8004d9c:	b298      	uxth	r0, r3
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	4413      	add	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	332e      	adds	r3, #46	@ 0x2e
 8004dac:	4602      	mov	r2, r0
 8004dae:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004db0:	7bfa      	ldrb	r2, [r7, #15]
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	4613      	mov	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	4413      	add	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	3318      	adds	r3, #24
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004dc4:	7bfa      	ldrb	r2, [r7, #15]
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	331c      	adds	r3, #28
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004dd8:	7bfa      	ldrb	r2, [r7, #15]
 8004dda:	6879      	ldr	r1, [r7, #4]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	4413      	add	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	440b      	add	r3, r1
 8004de6:	3320      	adds	r3, #32
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004dec:	7bfa      	ldrb	r2, [r7, #15]
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	4613      	mov	r3, r2
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	4413      	add	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	3324      	adds	r3, #36	@ 0x24
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
 8004e02:	3301      	adds	r3, #1
 8004e04:	73fb      	strb	r3, [r7, #15]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	791b      	ldrb	r3, [r3, #4]
 8004e0a:	7bfa      	ldrb	r2, [r7, #15]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d3af      	bcc.n	8004d70 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e10:	2300      	movs	r3, #0
 8004e12:	73fb      	strb	r3, [r7, #15]
 8004e14:	e044      	b.n	8004ea0 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e16:	7bfa      	ldrb	r2, [r7, #15]
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	4413      	add	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	440b      	add	r3, r1
 8004e24:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004e28:	2200      	movs	r2, #0
 8004e2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e2c:	7bfa      	ldrb	r2, [r7, #15]
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	4613      	mov	r3, r2
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	4413      	add	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004e3e:	7bfa      	ldrb	r2, [r7, #15]
 8004e40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e42:	7bfa      	ldrb	r2, [r7, #15]
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	4413      	add	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004e54:	2200      	movs	r2, #0
 8004e56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e58:	7bfa      	ldrb	r2, [r7, #15]
 8004e5a:	6879      	ldr	r1, [r7, #4]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	4413      	add	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	440b      	add	r3, r1
 8004e66:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e6e:	7bfa      	ldrb	r2, [r7, #15]
 8004e70:	6879      	ldr	r1, [r7, #4]
 8004e72:	4613      	mov	r3, r2
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	4413      	add	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	440b      	add	r3, r1
 8004e7c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e84:	7bfa      	ldrb	r2, [r7, #15]
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	73fb      	strb	r3, [r7, #15]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	791b      	ldrb	r3, [r3, #4]
 8004ea4:	7bfa      	ldrb	r2, [r7, #15]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d3b5      	bcc.n	8004e16 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6818      	ldr	r0, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	7c1a      	ldrb	r2, [r3, #16]
 8004eb2:	f88d 2000 	strb.w	r2, [sp]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004eba:	f003 fda5 	bl	8008a08 <USB_DevInit>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d005      	beq.n	8004ed0 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e013      	b.n	8004ef8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	7b1b      	ldrb	r3, [r3, #12]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d102      	bne.n	8004eec <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f001 f86e 	bl	8005fc8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f004 fd5c 	bl	80099ae <USB_DevDisconnect>

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <HAL_PCD_Start+0x1c>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e01c      	b.n	8004f56 <HAL_PCD_Start+0x56>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	7b5b      	ldrb	r3, [r3, #13]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d105      	bne.n	8004f38 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f30:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f003 fcf5 	bl	800892c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f004 fd10 	bl	800996c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f5e:	b590      	push	{r4, r7, lr}
 8004f60:	b08d      	sub	sp, #52	@ 0x34
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f004 fdce 	bl	8009b16 <USB_GetMode>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f040 8481 	bne.w	8005884 <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f004 fd32 	bl	80099f0 <USB_ReadInterrupts>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 8477 	beq.w	8005882 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	0a1b      	lsrs	r3, r3, #8
 8004f9e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f004 fd1f 	bl	80099f0 <USB_ReadInterrupts>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d107      	bne.n	8004fcc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695a      	ldr	r2, [r3, #20]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f002 0202 	and.w	r2, r2, #2
 8004fca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f004 fd0d 	bl	80099f0 <USB_ReadInterrupts>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	f003 0310 	and.w	r3, r3, #16
 8004fdc:	2b10      	cmp	r3, #16
 8004fde:	d161      	bne.n	80050a4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0210 	bic.w	r2, r2, #16
 8004fee:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	f003 020f 	and.w	r2, r3, #15
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	4413      	add	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	4413      	add	r3, r2
 800500c:	3304      	adds	r3, #4
 800500e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005016:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800501a:	d124      	bne.n	8005066 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005022:	4013      	ands	r3, r2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d035      	beq.n	8005094 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	091b      	lsrs	r3, r3, #4
 8005030:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005036:	b29b      	uxth	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	6a38      	ldr	r0, [r7, #32]
 800503c:	f004 fb44 	bl	80096c8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	091b      	lsrs	r3, r3, #4
 8005048:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800504c:	441a      	add	r2, r3
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	695a      	ldr	r2, [r3, #20]
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	091b      	lsrs	r3, r3, #4
 800505a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800505e:	441a      	add	r2, r3
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	615a      	str	r2, [r3, #20]
 8005064:	e016      	b.n	8005094 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800506c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005070:	d110      	bne.n	8005094 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005078:	2208      	movs	r2, #8
 800507a:	4619      	mov	r1, r3
 800507c:	6a38      	ldr	r0, [r7, #32]
 800507e:	f004 fb23 	bl	80096c8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	695a      	ldr	r2, [r3, #20]
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	091b      	lsrs	r3, r3, #4
 800508a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800508e:	441a      	add	r2, r3
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0210 	orr.w	r2, r2, #16
 80050a2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f004 fca1 	bl	80099f0 <USB_ReadInterrupts>
 80050ae:	4603      	mov	r3, r0
 80050b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80050b8:	f040 80a7 	bne.w	800520a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f004 fca6 	bl	8009a16 <USB_ReadDevAllOutEpInterrupt>
 80050ca:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80050cc:	e099      	b.n	8005202 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80050ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 808e 	beq.w	80051f6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	4611      	mov	r1, r2
 80050e4:	4618      	mov	r0, r3
 80050e6:	f004 fcca 	bl	8009a7e <USB_ReadDevOutEPInterrupt>
 80050ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00c      	beq.n	8005110 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80050f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005102:	461a      	mov	r2, r3
 8005104:	2301      	movs	r3, #1
 8005106:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005108:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fe82 	bl	8005e14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00c      	beq.n	8005134 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005126:	461a      	mov	r2, r3
 8005128:	2308      	movs	r3, #8
 800512a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800512c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 febe 	bl	8005eb0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f003 0310 	and.w	r3, r3, #16
 800513a:	2b00      	cmp	r3, #0
 800513c:	d008      	beq.n	8005150 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800513e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800514a:	461a      	mov	r2, r3
 800514c:	2310      	movs	r3, #16
 800514e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d030      	beq.n	80051bc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005162:	2b80      	cmp	r3, #128	@ 0x80
 8005164:	d109      	bne.n	800517a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005174:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005178:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800517a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800517c:	4613      	mov	r3, r2
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	4413      	add	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	4413      	add	r3, r2
 800518c:	3304      	adds	r3, #4
 800518e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	78db      	ldrb	r3, [r3, #3]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d108      	bne.n	80051aa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2200      	movs	r2, #0
 800519c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800519e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	4619      	mov	r1, r3
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f006 ff49 	bl	800c03c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b6:	461a      	mov	r2, r3
 80051b8:	2302      	movs	r3, #2
 80051ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d008      	beq.n	80051d8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d2:	461a      	mov	r2, r3
 80051d4:	2320      	movs	r3, #32
 80051d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d009      	beq.n	80051f6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80051e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ee:	461a      	mov	r2, r3
 80051f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80051f4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80051f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f8:	3301      	adds	r3, #1
 80051fa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80051fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fe:	085b      	lsrs	r3, r3, #1
 8005200:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005204:	2b00      	cmp	r3, #0
 8005206:	f47f af62 	bne.w	80050ce <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f004 fbee 	bl	80099f0 <USB_ReadInterrupts>
 8005214:	4603      	mov	r3, r0
 8005216:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800521a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800521e:	f040 80a4 	bne.w	800536a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f004 fc0f 	bl	8009a4a <USB_ReadDevAllInEpInterrupt>
 800522c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005232:	e096      	b.n	8005362 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 808b 	beq.w	8005356 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	4611      	mov	r1, r2
 800524a:	4618      	mov	r0, r3
 800524c:	f004 fc35 	bl	8009aba <USB_ReadDevInEPInterrupt>
 8005250:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	d020      	beq.n	800529e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800525c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525e:	f003 030f 	and.w	r3, r3, #15
 8005262:	2201      	movs	r2, #1
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005270:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	43db      	mvns	r3, r3
 8005276:	69f9      	ldr	r1, [r7, #28]
 8005278:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800527c:	4013      	ands	r3, r2
 800527e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800528c:	461a      	mov	r2, r3
 800528e:	2301      	movs	r3, #1
 8005290:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005294:	b2db      	uxtb	r3, r3
 8005296:	4619      	mov	r1, r3
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f006 fe3a 	bl	800bf12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d008      	beq.n	80052ba <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80052a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052b4:	461a      	mov	r2, r3
 80052b6:	2308      	movs	r3, #8
 80052b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f003 0310 	and.w	r3, r3, #16
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d008      	beq.n	80052d6 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80052c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052d0:	461a      	mov	r2, r3
 80052d2:	2310      	movs	r3, #16
 80052d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d008      	beq.n	80052f2 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052ec:	461a      	mov	r2, r3
 80052ee:	2340      	movs	r3, #64	@ 0x40
 80052f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d023      	beq.n	8005344 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80052fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052fe:	6a38      	ldr	r0, [r7, #32]
 8005300:	f003 fcca 	bl	8008c98 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005306:	4613      	mov	r3, r2
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	4413      	add	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	3310      	adds	r3, #16
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	4413      	add	r3, r2
 8005314:	3304      	adds	r3, #4
 8005316:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	78db      	ldrb	r3, [r3, #3]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d108      	bne.n	8005332 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2200      	movs	r2, #0
 8005324:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005328:	b2db      	uxtb	r3, r3
 800532a:	4619      	mov	r1, r3
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f006 fe97 	bl	800c060 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800533e:	461a      	mov	r2, r3
 8005340:	2302      	movs	r3, #2
 8005342:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800534e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 fcd6 	bl	8005d02 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005358:	3301      	adds	r3, #1
 800535a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800535c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535e:	085b      	lsrs	r3, r3, #1
 8005360:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005364:	2b00      	cmp	r3, #0
 8005366:	f47f af65 	bne.w	8005234 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f004 fb3e 	bl	80099f0 <USB_ReadInterrupts>
 8005374:	4603      	mov	r3, r0
 8005376:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800537a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800537e:	d122      	bne.n	80053c6 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800538e:	f023 0301 	bic.w	r3, r3, #1
 8005392:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800539a:	2b01      	cmp	r3, #1
 800539c:	d108      	bne.n	80053b0 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80053a6:	2100      	movs	r1, #0
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f007 f8cb 	bl	800c544 <HAL_PCDEx_LPM_Callback>
 80053ae:	e002      	b.n	80053b6 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f006 fe1b 	bl	800bfec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	695a      	ldr	r2, [r3, #20]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80053c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f004 fb10 	bl	80099f0 <USB_ReadInterrupts>
 80053d0:	4603      	mov	r3, r0
 80053d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053da:	d112      	bne.n	8005402 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d102      	bne.n	80053f2 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f006 fdd7 	bl	800bfa0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695a      	ldr	r2, [r3, #20]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005400:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f004 faf2 	bl	80099f0 <USB_ReadInterrupts>
 800540c:	4603      	mov	r3, r0
 800540e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005412:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005416:	d121      	bne.n	800545c <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695a      	ldr	r2, [r3, #20]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005426:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800542e:	2b00      	cmp	r3, #0
 8005430:	d111      	bne.n	8005456 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005440:	089b      	lsrs	r3, r3, #2
 8005442:	f003 020f 	and.w	r2, r3, #15
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800544c:	2101      	movs	r1, #1
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f007 f878 	bl	800c544 <HAL_PCDEx_LPM_Callback>
 8005454:	e002      	b.n	800545c <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f006 fda2 	bl	800bfa0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4618      	mov	r0, r3
 8005462:	f004 fac5 	bl	80099f0 <USB_ReadInterrupts>
 8005466:	4603      	mov	r3, r0
 8005468:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800546c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005470:	f040 80b6 	bne.w	80055e0 <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005482:	f023 0301 	bic.w	r3, r3, #1
 8005486:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2110      	movs	r1, #16
 800548e:	4618      	mov	r0, r3
 8005490:	f003 fc02 	bl	8008c98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005494:	2300      	movs	r3, #0
 8005496:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005498:	e046      	b.n	8005528 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800549a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054a6:	461a      	mov	r2, r3
 80054a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80054ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80054ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054be:	0151      	lsls	r1, r2, #5
 80054c0:	69fa      	ldr	r2, [r7, #28]
 80054c2:	440a      	add	r2, r1
 80054c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80054ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054da:	461a      	mov	r2, r3
 80054dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80054e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054f2:	0151      	lsls	r1, r2, #5
 80054f4:	69fa      	ldr	r2, [r7, #28]
 80054f6:	440a      	add	r2, r1
 80054f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054fc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005500:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005512:	0151      	lsls	r1, r2, #5
 8005514:	69fa      	ldr	r2, [r7, #28]
 8005516:	440a      	add	r2, r1
 8005518:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800551c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005520:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005524:	3301      	adds	r3, #1
 8005526:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	791b      	ldrb	r3, [r3, #4]
 800552c:	461a      	mov	r2, r3
 800552e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005530:	4293      	cmp	r3, r2
 8005532:	d3b2      	bcc.n	800549a <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005542:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005546:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	7bdb      	ldrb	r3, [r3, #15]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d016      	beq.n	800557e <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005556:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800555a:	69fa      	ldr	r2, [r7, #28]
 800555c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005560:	f043 030b 	orr.w	r3, r3, #11
 8005564:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800556e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005570:	69fa      	ldr	r2, [r7, #28]
 8005572:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005576:	f043 030b 	orr.w	r3, r3, #11
 800557a:	6453      	str	r3, [r2, #68]	@ 0x44
 800557c:	e015      	b.n	80055aa <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	69fa      	ldr	r2, [r7, #28]
 8005588:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800558c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005590:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005594:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055a4:	f043 030b 	orr.w	r3, r3, #11
 80055a8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055b8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80055bc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80055c8:	4619      	mov	r1, r3
 80055ca:	4610      	mov	r0, r2
 80055cc:	f004 fad4 	bl	8009b78 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695a      	ldr	r2, [r3, #20]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80055de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f004 fa03 	bl	80099f0 <USB_ReadInterrupts>
 80055ea:	4603      	mov	r3, r0
 80055ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055f4:	d123      	bne.n	800563e <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f004 fa99 	bl	8009b32 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4618      	mov	r0, r3
 8005606:	f003 fbc0 	bl	8008d8a <USB_GetDevSpeed>
 800560a:	4603      	mov	r3, r0
 800560c:	461a      	mov	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681c      	ldr	r4, [r3, #0]
 8005616:	f001 fba3 	bl	8006d60 <HAL_RCC_GetHCLKFreq>
 800561a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005620:	461a      	mov	r2, r3
 8005622:	4620      	mov	r0, r4
 8005624:	f003 f8e6 	bl	80087f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f006 fc9a 	bl	800bf62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695a      	ldr	r2, [r3, #20]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800563c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f004 f9d4 	bl	80099f0 <USB_ReadInterrupts>
 8005648:	4603      	mov	r3, r0
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	2b08      	cmp	r3, #8
 8005650:	d10a      	bne.n	8005668 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f006 fc77 	bl	800bf46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695a      	ldr	r2, [r3, #20]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f002 0208 	and.w	r2, r2, #8
 8005666:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4618      	mov	r0, r3
 800566e:	f004 f9bf 	bl	80099f0 <USB_ReadInterrupts>
 8005672:	4603      	mov	r3, r0
 8005674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005678:	2b80      	cmp	r3, #128	@ 0x80
 800567a:	d123      	bne.n	80056c4 <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005688:	2301      	movs	r3, #1
 800568a:	627b      	str	r3, [r7, #36]	@ 0x24
 800568c:	e014      	b.n	80056b8 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005692:	4613      	mov	r3, r2
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	4413      	add	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d105      	bne.n	80056b2 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	4619      	mov	r1, r3
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 faf7 	bl	8005ca0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b4:	3301      	adds	r3, #1
 80056b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	791b      	ldrb	r3, [r3, #4]
 80056bc:	461a      	mov	r2, r3
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d3e4      	bcc.n	800568e <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f004 f991 	bl	80099f0 <USB_ReadInterrupts>
 80056ce:	4603      	mov	r3, r0
 80056d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056d8:	d13c      	bne.n	8005754 <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056da:	2301      	movs	r3, #1
 80056dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80056de:	e02b      	b.n	8005738 <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80056e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80056f0:	6879      	ldr	r1, [r7, #4]
 80056f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056f4:	4613      	mov	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	440b      	add	r3, r1
 80056fe:	3318      	adds	r3, #24
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d115      	bne.n	8005732 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005706:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005708:	2b00      	cmp	r3, #0
 800570a:	da12      	bge.n	8005732 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005710:	4613      	mov	r3, r2
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	4413      	add	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	440b      	add	r3, r1
 800571a:	3317      	adds	r3, #23
 800571c:	2201      	movs	r2, #1
 800571e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	b2db      	uxtb	r3, r3
 8005724:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005728:	b2db      	uxtb	r3, r3
 800572a:	4619      	mov	r1, r3
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 fab7 	bl	8005ca0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005734:	3301      	adds	r3, #1
 8005736:	627b      	str	r3, [r7, #36]	@ 0x24
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	791b      	ldrb	r3, [r3, #4]
 800573c:	461a      	mov	r2, r3
 800573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005740:	4293      	cmp	r3, r2
 8005742:	d3cd      	bcc.n	80056e0 <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695a      	ldr	r2, [r3, #20]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005752:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4618      	mov	r0, r3
 800575a:	f004 f949 	bl	80099f0 <USB_ReadInterrupts>
 800575e:	4603      	mov	r3, r0
 8005760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005764:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005768:	d156      	bne.n	8005818 <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800576a:	2301      	movs	r3, #1
 800576c:	627b      	str	r3, [r7, #36]	@ 0x24
 800576e:	e045      	b.n	80057fc <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005784:	4613      	mov	r3, r2
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d12e      	bne.n	80057f6 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005798:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800579a:	2b00      	cmp	r3, #0
 800579c:	da2b      	bge.n	80057f6 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80057aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d121      	bne.n	80057f6 <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057b6:	4613      	mov	r3, r2
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	4413      	add	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	440b      	add	r3, r1
 80057c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80057c4:	2201      	movs	r2, #1
 80057c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10a      	bne.n	80057f6 <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	69fa      	ldr	r2, [r7, #28]
 80057ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057f2:	6053      	str	r3, [r2, #4]
            break;
 80057f4:	e008      	b.n	8005808 <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	3301      	adds	r3, #1
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	791b      	ldrb	r3, [r3, #4]
 8005800:	461a      	mov	r2, r3
 8005802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005804:	4293      	cmp	r3, r2
 8005806:	d3b3      	bcc.n	8005770 <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	695a      	ldr	r2, [r3, #20]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005816:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4618      	mov	r0, r3
 800581e:	f004 f8e7 	bl	80099f0 <USB_ReadInterrupts>
 8005822:	4603      	mov	r3, r0
 8005824:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800582c:	d10a      	bne.n	8005844 <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f006 fc28 	bl	800c084 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	695a      	ldr	r2, [r3, #20]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005842:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4618      	mov	r0, r3
 800584a:	f004 f8d1 	bl	80099f0 <USB_ReadInterrupts>
 800584e:	4603      	mov	r3, r0
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b04      	cmp	r3, #4
 8005856:	d115      	bne.n	8005884 <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	f003 0304 	and.w	r3, r3, #4
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f006 fc18 	bl	800c0a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6859      	ldr	r1, [r3, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	430a      	orrs	r2, r1
 800587e:	605a      	str	r2, [r3, #4]
 8005880:	e000      	b.n	8005884 <HAL_PCD_IRQHandler+0x926>
      return;
 8005882:	bf00      	nop
    }
  }
}
 8005884:	3734      	adds	r7, #52	@ 0x34
 8005886:	46bd      	mov	sp, r7
 8005888:	bd90      	pop	{r4, r7, pc}

0800588a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b082      	sub	sp, #8
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	460b      	mov	r3, r1
 8005894:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_PCD_SetAddress+0x1a>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e012      	b.n	80058ca <HAL_PCD_SetAddress+0x40>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	78fa      	ldrb	r2, [r7, #3]
 80058b0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	78fa      	ldrb	r2, [r7, #3]
 80058b8:	4611      	mov	r1, r2
 80058ba:	4618      	mov	r0, r3
 80058bc:	f004 f830 	bl	8009920 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	4608      	mov	r0, r1
 80058dc:	4611      	mov	r1, r2
 80058de:	461a      	mov	r2, r3
 80058e0:	4603      	mov	r3, r0
 80058e2:	70fb      	strb	r3, [r7, #3]
 80058e4:	460b      	mov	r3, r1
 80058e6:	803b      	strh	r3, [r7, #0]
 80058e8:	4613      	mov	r3, r2
 80058ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80058f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	da0f      	bge.n	8005918 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058f8:	78fb      	ldrb	r3, [r7, #3]
 80058fa:	f003 020f 	and.w	r2, r3, #15
 80058fe:	4613      	mov	r3, r2
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	4413      	add	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	3310      	adds	r3, #16
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	4413      	add	r3, r2
 800590c:	3304      	adds	r3, #4
 800590e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2201      	movs	r2, #1
 8005914:	705a      	strb	r2, [r3, #1]
 8005916:	e00f      	b.n	8005938 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	f003 020f 	and.w	r2, r3, #15
 800591e:	4613      	mov	r3, r2
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	4413      	add	r3, r2
 800592e:	3304      	adds	r3, #4
 8005930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	f003 030f 	and.w	r3, r3, #15
 800593e:	b2da      	uxtb	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005944:	883b      	ldrh	r3, [r7, #0]
 8005946:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	78ba      	ldrb	r2, [r7, #2]
 8005952:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	785b      	ldrb	r3, [r3, #1]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d004      	beq.n	8005966 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	461a      	mov	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005966:	78bb      	ldrb	r3, [r7, #2]
 8005968:	2b02      	cmp	r3, #2
 800596a:	d102      	bne.n	8005972 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005978:	2b01      	cmp	r3, #1
 800597a:	d101      	bne.n	8005980 <HAL_PCD_EP_Open+0xae>
 800597c:	2302      	movs	r3, #2
 800597e:	e00e      	b.n	800599e <HAL_PCD_EP_Open+0xcc>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68f9      	ldr	r1, [r7, #12]
 800598e:	4618      	mov	r0, r3
 8005990:	f003 fa1a 	bl	8008dc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800599c:	7afb      	ldrb	r3, [r7, #11]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b084      	sub	sp, #16
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	460b      	mov	r3, r1
 80059b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	da0f      	bge.n	80059da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059ba:	78fb      	ldrb	r3, [r7, #3]
 80059bc:	f003 020f 	and.w	r2, r3, #15
 80059c0:	4613      	mov	r3, r2
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	3310      	adds	r3, #16
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	4413      	add	r3, r2
 80059ce:	3304      	adds	r3, #4
 80059d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	705a      	strb	r2, [r3, #1]
 80059d8:	e00f      	b.n	80059fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059da:	78fb      	ldrb	r3, [r7, #3]
 80059dc:	f003 020f 	and.w	r2, r3, #15
 80059e0:	4613      	mov	r3, r2
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	4413      	add	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	4413      	add	r3, r2
 80059f0:	3304      	adds	r3, #4
 80059f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80059fa:	78fb      	ldrb	r3, [r7, #3]
 80059fc:	f003 030f 	and.w	r3, r3, #15
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_PCD_EP_Close+0x6e>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e00e      	b.n	8005a32 <HAL_PCD_EP_Close+0x8c>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68f9      	ldr	r1, [r7, #12]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f003 fa58 	bl	8008ed8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b086      	sub	sp, #24
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	60f8      	str	r0, [r7, #12]
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	603b      	str	r3, [r7, #0]
 8005a46:	460b      	mov	r3, r1
 8005a48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a4a:	7afb      	ldrb	r3, [r7, #11]
 8005a4c:	f003 020f 	and.w	r2, r3, #15
 8005a50:	4613      	mov	r3, r2
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	3304      	adds	r3, #4
 8005a62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	2200      	movs	r2, #0
 8005a74:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a7c:	7afb      	ldrb	r3, [r7, #11]
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6979      	ldr	r1, [r7, #20]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f003 fafe 	bl	8009090 <USB_EPStartXfer>

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005aaa:	78fb      	ldrb	r3, [r7, #3]
 8005aac:	f003 020f 	and.w	r2, r3, #15
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005ac0:	681b      	ldr	r3, [r3, #0]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b086      	sub	sp, #24
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	603b      	str	r3, [r7, #0]
 8005ada:	460b      	mov	r3, r1
 8005adc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ade:	7afb      	ldrb	r3, [r7, #11]
 8005ae0:	f003 020f 	and.w	r2, r3, #15
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	4413      	add	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	3310      	adds	r3, #16
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4413      	add	r3, r2
 8005af2:	3304      	adds	r3, #4
 8005af4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2200      	movs	r2, #0
 8005b06:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b0e:	7afb      	ldrb	r3, [r7, #11]
 8005b10:	f003 030f 	and.w	r3, r3, #15
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6979      	ldr	r1, [r7, #20]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f003 fab5 	bl	8009090 <USB_EPStartXfer>

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005b3c:	78fb      	ldrb	r3, [r7, #3]
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	7912      	ldrb	r2, [r2, #4]
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d901      	bls.n	8005b4e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e04e      	b.n	8005bec <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	da0f      	bge.n	8005b76 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b56:	78fb      	ldrb	r3, [r7, #3]
 8005b58:	f003 020f 	and.w	r2, r3, #15
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	4413      	add	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	3310      	adds	r3, #16
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	4413      	add	r3, r2
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2201      	movs	r2, #1
 8005b72:	705a      	strb	r2, [r3, #1]
 8005b74:	e00d      	b.n	8005b92 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005b76:	78fa      	ldrb	r2, [r7, #3]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	4413      	add	r3, r2
 8005b88:	3304      	adds	r3, #4
 8005b8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2201      	movs	r2, #1
 8005b96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	f003 030f 	and.w	r3, r3, #15
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d101      	bne.n	8005bb2 <HAL_PCD_EP_SetStall+0x82>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e01c      	b.n	8005bec <HAL_PCD_EP_SetStall+0xbc>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68f9      	ldr	r1, [r7, #12]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f003 fdd9 	bl	8009778 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005bc6:	78fb      	ldrb	r3, [r7, #3]
 8005bc8:	f003 030f 	and.w	r3, r3, #15
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d108      	bne.n	8005be2 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005bda:	4619      	mov	r1, r3
 8005bdc:	4610      	mov	r0, r2
 8005bde:	f003 ffcb 	bl	8009b78 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	f003 030f 	and.w	r3, r3, #15
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	7912      	ldrb	r2, [r2, #4]
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d901      	bls.n	8005c12 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e042      	b.n	8005c98 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	da0f      	bge.n	8005c3a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c1a:	78fb      	ldrb	r3, [r7, #3]
 8005c1c:	f003 020f 	and.w	r2, r3, #15
 8005c20:	4613      	mov	r3, r2
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	4413      	add	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	3310      	adds	r3, #16
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	3304      	adds	r3, #4
 8005c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	705a      	strb	r2, [r3, #1]
 8005c38:	e00f      	b.n	8005c5a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c3a:	78fb      	ldrb	r3, [r7, #3]
 8005c3c:	f003 020f 	and.w	r2, r3, #15
 8005c40:	4613      	mov	r3, r2
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	4413      	add	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	4413      	add	r3, r2
 8005c50:	3304      	adds	r3, #4
 8005c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	f003 030f 	and.w	r3, r3, #15
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d101      	bne.n	8005c7a <HAL_PCD_EP_ClrStall+0x86>
 8005c76:	2302      	movs	r3, #2
 8005c78:	e00e      	b.n	8005c98 <HAL_PCD_EP_ClrStall+0xa4>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68f9      	ldr	r1, [r7, #12]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f003 fde3 	bl	8009854 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005cac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	da0c      	bge.n	8005cce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cb4:	78fb      	ldrb	r3, [r7, #3]
 8005cb6:	f003 020f 	and.w	r2, r3, #15
 8005cba:	4613      	mov	r3, r2
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	3310      	adds	r3, #16
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	3304      	adds	r3, #4
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	e00c      	b.n	8005ce8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cce:	78fb      	ldrb	r3, [r7, #3]
 8005cd0:	f003 020f 	and.w	r2, r3, #15
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	4413      	add	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68f9      	ldr	r1, [r7, #12]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f003 fc06 	bl	8009500 <USB_EPStopXfer>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005cf8:	7afb      	ldrb	r3, [r7, #11]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b088      	sub	sp, #32
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	3310      	adds	r3, #16
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	4413      	add	r3, r2
 8005d26:	3304      	adds	r3, #4
 8005d28:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	695a      	ldr	r2, [r3, #20]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d901      	bls.n	8005d3a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e067      	b.n	8005e0a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	691a      	ldr	r2, [r3, #16]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	69fa      	ldr	r2, [r7, #28]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d902      	bls.n	8005d56 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	3303      	adds	r3, #3
 8005d5a:	089b      	lsrs	r3, r3, #2
 8005d5c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d5e:	e026      	b.n	8005dae <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	691a      	ldr	r2, [r3, #16]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	69fa      	ldr	r2, [r7, #28]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d902      	bls.n	8005d7c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	3303      	adds	r3, #3
 8005d80:	089b      	lsrs	r3, r3, #2
 8005d82:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	68d9      	ldr	r1, [r3, #12]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	6978      	ldr	r0, [r7, #20]
 8005d92:	f003 fc5f 	bl	8009654 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	441a      	add	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	695a      	ldr	r2, [r3, #20]
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	441a      	add	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d809      	bhi.n	8005dd8 <PCD_WriteEmptyTxFifo+0xd6>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	695a      	ldr	r2, [r3, #20]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d203      	bcs.n	8005dd8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1c3      	bne.n	8005d60 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	691a      	ldr	r2, [r3, #16]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d811      	bhi.n	8005e08 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	f003 030f 	and.w	r3, r3, #15
 8005dea:	2201      	movs	r2, #1
 8005dec:	fa02 f303 	lsl.w	r3, r2, r3
 8005df0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005df8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	43db      	mvns	r3, r3
 8005dfe:	6939      	ldr	r1, [r7, #16]
 8005e00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e04:	4013      	ands	r3, r2
 8005e06:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3720      	adds	r7, #32
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	333c      	adds	r3, #60	@ 0x3c
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	4a19      	ldr	r2, [pc, #100]	@ (8005eac <PCD_EP_OutXfrComplete_int+0x98>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d124      	bne.n	8005e94 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00a      	beq.n	8005e6a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e60:	461a      	mov	r2, r3
 8005e62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e66:	6093      	str	r3, [r2, #8]
 8005e68:	e01a      	b.n	8005ea0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f003 0320 	and.w	r3, r3, #32
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d008      	beq.n	8005e86 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e80:	461a      	mov	r2, r3
 8005e82:	2320      	movs	r3, #32
 8005e84:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f006 f825 	bl	800bedc <HAL_PCD_DataOutStageCallback>
 8005e92:	e005      	b.n	8005ea0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	4619      	mov	r1, r3
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f006 f81e 	bl	800bedc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	4f54310a 	.word	0x4f54310a

08005eb0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	333c      	adds	r3, #60	@ 0x3c
 8005ec8:	3304      	adds	r3, #4
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8005f14 <PCD_EP_OutSetupPacket_int+0x64>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d90e      	bls.n	8005f04 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d009      	beq.n	8005f04 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005efc:	461a      	mov	r2, r3
 8005efe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f02:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f005 ffd7 	bl	800beb8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	4f54300a 	.word	0x4f54300a

08005f18 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	70fb      	strb	r3, [r7, #3]
 8005f24:	4613      	mov	r3, r2
 8005f26:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d107      	bne.n	8005f46 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005f36:	883b      	ldrh	r3, [r7, #0]
 8005f38:	0419      	lsls	r1, r3, #16
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f44:	e028      	b.n	8005f98 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4c:	0c1b      	lsrs	r3, r3, #16
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	4413      	add	r3, r2
 8005f52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f54:	2300      	movs	r3, #0
 8005f56:	73fb      	strb	r3, [r7, #15]
 8005f58:	e00d      	b.n	8005f76 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
 8005f60:	3340      	adds	r3, #64	@ 0x40
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	0c1b      	lsrs	r3, r3, #16
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
 8005f72:	3301      	adds	r3, #1
 8005f74:	73fb      	strb	r3, [r7, #15]
 8005f76:	7bfa      	ldrb	r2, [r7, #15]
 8005f78:	78fb      	ldrb	r3, [r7, #3]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d3ec      	bcc.n	8005f5a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005f80:	883b      	ldrh	r3, [r7, #0]
 8005f82:	0418      	lsls	r0, r3, #16
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6819      	ldr	r1, [r3, #0]
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	4302      	orrs	r2, r0
 8005f90:	3340      	adds	r3, #64	@ 0x40
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	440b      	add	r3, r1
 8005f96:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	460b      	mov	r3, r1
 8005fb0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	887a      	ldrh	r2, [r7, #2]
 8005fb8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ffa:	f043 0303 	orr.w	r3, r3, #3
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006010:	b480      	push	{r7}
 8006012:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006014:	4b05      	ldr	r3, [pc, #20]	@ (800602c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a04      	ldr	r2, [pc, #16]	@ (800602c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800601a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800601e:	6013      	str	r3, [r2, #0]
}
 8006020:	bf00      	nop
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	40007000 	.word	0x40007000

08006030 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006030:	b480      	push	{r7}
 8006032:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006034:	4b04      	ldr	r3, [pc, #16]	@ (8006048 <HAL_PWREx_GetVoltageRange+0x18>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800603c:	4618      	mov	r0, r3
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	40007000 	.word	0x40007000

0800604c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800605a:	d130      	bne.n	80060be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800605c:	4b23      	ldr	r3, [pc, #140]	@ (80060ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006064:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006068:	d038      	beq.n	80060dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800606a:	4b20      	ldr	r3, [pc, #128]	@ (80060ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006072:	4a1e      	ldr	r2, [pc, #120]	@ (80060ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006074:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006078:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800607a:	4b1d      	ldr	r3, [pc, #116]	@ (80060f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2232      	movs	r2, #50	@ 0x32
 8006080:	fb02 f303 	mul.w	r3, r2, r3
 8006084:	4a1b      	ldr	r2, [pc, #108]	@ (80060f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006086:	fba2 2303 	umull	r2, r3, r2, r3
 800608a:	0c9b      	lsrs	r3, r3, #18
 800608c:	3301      	adds	r3, #1
 800608e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006090:	e002      	b.n	8006098 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	3b01      	subs	r3, #1
 8006096:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006098:	4b14      	ldr	r3, [pc, #80]	@ (80060ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060a4:	d102      	bne.n	80060ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1f2      	bne.n	8006092 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80060ac:	4b0f      	ldr	r3, [pc, #60]	@ (80060ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060b8:	d110      	bne.n	80060dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e00f      	b.n	80060de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80060be:	4b0b      	ldr	r3, [pc, #44]	@ (80060ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80060c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060ca:	d007      	beq.n	80060dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80060cc:	4b07      	ldr	r3, [pc, #28]	@ (80060ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80060d4:	4a05      	ldr	r2, [pc, #20]	@ (80060ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80060da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	40007000 	.word	0x40007000
 80060f0:	20000008 	.word	0x20000008
 80060f4:	431bde83 	.word	0x431bde83

080060f8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80060fc:	4b05      	ldr	r3, [pc, #20]	@ (8006114 <HAL_PWREx_EnableVddUSB+0x1c>)
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	4a04      	ldr	r2, [pc, #16]	@ (8006114 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006102:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006106:	6053      	str	r3, [r2, #4]
}
 8006108:	bf00      	nop
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	40007000 	.word	0x40007000

08006118 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af02      	add	r7, sp, #8
 800611e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006120:	f7fc fc30 	bl	8002984 <HAL_GetTick>
 8006124:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e063      	b.n	80061f8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10b      	bne.n	8006154 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f7fc f843 	bl	80021d0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800614a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f858 	bl	8006204 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	3b01      	subs	r3, #1
 8006164:	021a      	lsls	r2, r3, #8
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	2120      	movs	r1, #32
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f850 	bl	8006220 <QSPI_WaitFlagStateUntilTimeout>
 8006180:	4603      	mov	r3, r0
 8006182:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006184:	7afb      	ldrb	r3, [r7, #11]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d131      	bne.n	80061ee <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006194:	f023 0310 	bic.w	r3, r3, #16
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6852      	ldr	r2, [r2, #4]
 800619c:	0611      	lsls	r1, r2, #24
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	68d2      	ldr	r2, [r2, #12]
 80061a2:	4311      	orrs	r1, r2
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	6812      	ldr	r2, [r2, #0]
 80061a8:	430b      	orrs	r3, r1
 80061aa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	4b13      	ldr	r3, [pc, #76]	@ (8006200 <HAL_QSPI_Init+0xe8>)
 80061b4:	4013      	ands	r3, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6912      	ldr	r2, [r2, #16]
 80061ba:	0411      	lsls	r1, r2, #16
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6952      	ldr	r2, [r2, #20]
 80061c0:	4311      	orrs	r1, r2
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6992      	ldr	r2, [r2, #24]
 80061c6:	4311      	orrs	r1, r2
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	6812      	ldr	r2, [r2, #0]
 80061cc:	430b      	orrs	r3, r1
 80061ce:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0201 	orr.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80061f6:	7afb      	ldrb	r3, [r7, #11]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	ffe0f8fe 	.word	0xffe0f8fe

08006204 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	603b      	str	r3, [r7, #0]
 800622c:	4613      	mov	r3, r2
 800622e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006230:	e01a      	b.n	8006268 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006238:	d016      	beq.n	8006268 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800623a:	f7fc fba3 	bl	8002984 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	429a      	cmp	r2, r3
 8006248:	d302      	bcc.n	8006250 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10b      	bne.n	8006268 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2204      	movs	r2, #4
 8006254:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800625c:	f043 0201 	orr.w	r2, r3, #1
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e00e      	b.n	8006286 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	4013      	ands	r3, r2
 8006272:	2b00      	cmp	r3, #0
 8006274:	bf14      	ite	ne
 8006276:	2301      	movne	r3, #1
 8006278:	2300      	moveq	r3, #0
 800627a:	b2db      	uxtb	r3, r3
 800627c:	461a      	mov	r2, r3
 800627e:	79fb      	ldrb	r3, [r7, #7]
 8006280:	429a      	cmp	r2, r3
 8006282:	d1d6      	bne.n	8006232 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e3ca      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062a2:	4b97      	ldr	r3, [pc, #604]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 030c 	and.w	r3, r3, #12
 80062aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062ac:	4b94      	ldr	r3, [pc, #592]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f003 0303 	and.w	r3, r3, #3
 80062b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0310 	and.w	r3, r3, #16
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 80e4 	beq.w	800648c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d007      	beq.n	80062da <HAL_RCC_OscConfig+0x4a>
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	2b0c      	cmp	r3, #12
 80062ce:	f040 808b 	bne.w	80063e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	f040 8087 	bne.w	80063e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80062da:	4b89      	ldr	r3, [pc, #548]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d005      	beq.n	80062f2 <HAL_RCC_OscConfig+0x62>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e3a2      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1a      	ldr	r2, [r3, #32]
 80062f6:	4b82      	ldr	r3, [pc, #520]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0308 	and.w	r3, r3, #8
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d004      	beq.n	800630c <HAL_RCC_OscConfig+0x7c>
 8006302:	4b7f      	ldr	r3, [pc, #508]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800630a:	e005      	b.n	8006318 <HAL_RCC_OscConfig+0x88>
 800630c:	4b7c      	ldr	r3, [pc, #496]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 800630e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006312:	091b      	lsrs	r3, r3, #4
 8006314:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006318:	4293      	cmp	r3, r2
 800631a:	d223      	bcs.n	8006364 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fd55 	bl	8006dd0 <RCC_SetFlashLatencyFromMSIRange>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e383      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006330:	4b73      	ldr	r3, [pc, #460]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a72      	ldr	r2, [pc, #456]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 8006336:	f043 0308 	orr.w	r3, r3, #8
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	4b70      	ldr	r3, [pc, #448]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	496d      	ldr	r1, [pc, #436]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 800634a:	4313      	orrs	r3, r2
 800634c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800634e:	4b6c      	ldr	r3, [pc, #432]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	021b      	lsls	r3, r3, #8
 800635c:	4968      	ldr	r1, [pc, #416]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 800635e:	4313      	orrs	r3, r2
 8006360:	604b      	str	r3, [r1, #4]
 8006362:	e025      	b.n	80063b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006364:	4b66      	ldr	r3, [pc, #408]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a65      	ldr	r2, [pc, #404]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 800636a:	f043 0308 	orr.w	r3, r3, #8
 800636e:	6013      	str	r3, [r2, #0]
 8006370:	4b63      	ldr	r3, [pc, #396]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	4960      	ldr	r1, [pc, #384]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 800637e:	4313      	orrs	r3, r2
 8006380:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006382:	4b5f      	ldr	r3, [pc, #380]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	021b      	lsls	r3, r3, #8
 8006390:	495b      	ldr	r1, [pc, #364]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 8006392:	4313      	orrs	r3, r2
 8006394:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d109      	bne.n	80063b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 fd15 	bl	8006dd0 <RCC_SetFlashLatencyFromMSIRange>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e343      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063b0:	f000 fc4a 	bl	8006c48 <HAL_RCC_GetSysClockFreq>
 80063b4:	4602      	mov	r2, r0
 80063b6:	4b52      	ldr	r3, [pc, #328]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	091b      	lsrs	r3, r3, #4
 80063bc:	f003 030f 	and.w	r3, r3, #15
 80063c0:	4950      	ldr	r1, [pc, #320]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 80063c2:	5ccb      	ldrb	r3, [r1, r3]
 80063c4:	f003 031f 	and.w	r3, r3, #31
 80063c8:	fa22 f303 	lsr.w	r3, r2, r3
 80063cc:	4a4e      	ldr	r2, [pc, #312]	@ (8006508 <HAL_RCC_OscConfig+0x278>)
 80063ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80063d0:	4b4e      	ldr	r3, [pc, #312]	@ (800650c <HAL_RCC_OscConfig+0x27c>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fc fa85 	bl	80028e4 <HAL_InitTick>
 80063da:	4603      	mov	r3, r0
 80063dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d052      	beq.n	800648a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	e327      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d032      	beq.n	8006456 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80063f0:	4b43      	ldr	r3, [pc, #268]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a42      	ldr	r2, [pc, #264]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 80063f6:	f043 0301 	orr.w	r3, r3, #1
 80063fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063fc:	f7fc fac2 	bl	8002984 <HAL_GetTick>
 8006400:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006402:	e008      	b.n	8006416 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006404:	f7fc fabe 	bl	8002984 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e310      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006416:	4b3a      	ldr	r3, [pc, #232]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d0f0      	beq.n	8006404 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006422:	4b37      	ldr	r3, [pc, #220]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a36      	ldr	r2, [pc, #216]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 8006428:	f043 0308 	orr.w	r3, r3, #8
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	4b34      	ldr	r3, [pc, #208]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	4931      	ldr	r1, [pc, #196]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 800643c:	4313      	orrs	r3, r2
 800643e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006440:	4b2f      	ldr	r3, [pc, #188]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	492c      	ldr	r1, [pc, #176]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 8006450:	4313      	orrs	r3, r2
 8006452:	604b      	str	r3, [r1, #4]
 8006454:	e01a      	b.n	800648c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006456:	4b2a      	ldr	r3, [pc, #168]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a29      	ldr	r2, [pc, #164]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 800645c:	f023 0301 	bic.w	r3, r3, #1
 8006460:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006462:	f7fc fa8f 	bl	8002984 <HAL_GetTick>
 8006466:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006468:	e008      	b.n	800647c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800646a:	f7fc fa8b 	bl	8002984 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	2b02      	cmp	r3, #2
 8006476:	d901      	bls.n	800647c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e2dd      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800647c:	4b20      	ldr	r3, [pc, #128]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1f0      	bne.n	800646a <HAL_RCC_OscConfig+0x1da>
 8006488:	e000      	b.n	800648c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800648a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d074      	beq.n	8006582 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	2b08      	cmp	r3, #8
 800649c:	d005      	beq.n	80064aa <HAL_RCC_OscConfig+0x21a>
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	2b0c      	cmp	r3, #12
 80064a2:	d10e      	bne.n	80064c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	2b03      	cmp	r3, #3
 80064a8:	d10b      	bne.n	80064c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064aa:	4b15      	ldr	r3, [pc, #84]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d064      	beq.n	8006580 <HAL_RCC_OscConfig+0x2f0>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d160      	bne.n	8006580 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e2ba      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064ca:	d106      	bne.n	80064da <HAL_RCC_OscConfig+0x24a>
 80064cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a0b      	ldr	r2, [pc, #44]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 80064d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	e026      	b.n	8006528 <HAL_RCC_OscConfig+0x298>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064e2:	d115      	bne.n	8006510 <HAL_RCC_OscConfig+0x280>
 80064e4:	4b06      	ldr	r3, [pc, #24]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a05      	ldr	r2, [pc, #20]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 80064ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	4b03      	ldr	r3, [pc, #12]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a02      	ldr	r2, [pc, #8]	@ (8006500 <HAL_RCC_OscConfig+0x270>)
 80064f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064fa:	6013      	str	r3, [r2, #0]
 80064fc:	e014      	b.n	8006528 <HAL_RCC_OscConfig+0x298>
 80064fe:	bf00      	nop
 8006500:	40021000 	.word	0x40021000
 8006504:	0800f328 	.word	0x0800f328
 8006508:	20000008 	.word	0x20000008
 800650c:	2000000c 	.word	0x2000000c
 8006510:	4ba0      	ldr	r3, [pc, #640]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a9f      	ldr	r2, [pc, #636]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 8006516:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800651a:	6013      	str	r3, [r2, #0]
 800651c:	4b9d      	ldr	r3, [pc, #628]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a9c      	ldr	r2, [pc, #624]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 8006522:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d013      	beq.n	8006558 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006530:	f7fc fa28 	bl	8002984 <HAL_GetTick>
 8006534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006536:	e008      	b.n	800654a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006538:	f7fc fa24 	bl	8002984 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b64      	cmp	r3, #100	@ 0x64
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e276      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800654a:	4b92      	ldr	r3, [pc, #584]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0f0      	beq.n	8006538 <HAL_RCC_OscConfig+0x2a8>
 8006556:	e014      	b.n	8006582 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006558:	f7fc fa14 	bl	8002984 <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800655e:	e008      	b.n	8006572 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006560:	f7fc fa10 	bl	8002984 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b64      	cmp	r3, #100	@ 0x64
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e262      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006572:	4b88      	ldr	r3, [pc, #544]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f0      	bne.n	8006560 <HAL_RCC_OscConfig+0x2d0>
 800657e:	e000      	b.n	8006582 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d060      	beq.n	8006650 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	2b04      	cmp	r3, #4
 8006592:	d005      	beq.n	80065a0 <HAL_RCC_OscConfig+0x310>
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	2b0c      	cmp	r3, #12
 8006598:	d119      	bne.n	80065ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2b02      	cmp	r3, #2
 800659e:	d116      	bne.n	80065ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065a0:	4b7c      	ldr	r3, [pc, #496]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d005      	beq.n	80065b8 <HAL_RCC_OscConfig+0x328>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e23f      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065b8:	4b76      	ldr	r3, [pc, #472]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	061b      	lsls	r3, r3, #24
 80065c6:	4973      	ldr	r1, [pc, #460]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065cc:	e040      	b.n	8006650 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d023      	beq.n	800661e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065d6:	4b6f      	ldr	r3, [pc, #444]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a6e      	ldr	r2, [pc, #440]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 80065dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e2:	f7fc f9cf 	bl	8002984 <HAL_GetTick>
 80065e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065e8:	e008      	b.n	80065fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065ea:	f7fc f9cb 	bl	8002984 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e21d      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065fc:	4b65      	ldr	r3, [pc, #404]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0f0      	beq.n	80065ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006608:	4b62      	ldr	r3, [pc, #392]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	061b      	lsls	r3, r3, #24
 8006616:	495f      	ldr	r1, [pc, #380]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 8006618:	4313      	orrs	r3, r2
 800661a:	604b      	str	r3, [r1, #4]
 800661c:	e018      	b.n	8006650 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800661e:	4b5d      	ldr	r3, [pc, #372]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a5c      	ldr	r2, [pc, #368]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 8006624:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800662a:	f7fc f9ab 	bl	8002984 <HAL_GetTick>
 800662e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006630:	e008      	b.n	8006644 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006632:	f7fc f9a7 	bl	8002984 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d901      	bls.n	8006644 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e1f9      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006644:	4b53      	ldr	r3, [pc, #332]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1f0      	bne.n	8006632 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0308 	and.w	r3, r3, #8
 8006658:	2b00      	cmp	r3, #0
 800665a:	d03c      	beq.n	80066d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d01c      	beq.n	800669e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006664:	4b4b      	ldr	r3, [pc, #300]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 8006666:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800666a:	4a4a      	ldr	r2, [pc, #296]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 800666c:	f043 0301 	orr.w	r3, r3, #1
 8006670:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006674:	f7fc f986 	bl	8002984 <HAL_GetTick>
 8006678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800667a:	e008      	b.n	800668e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800667c:	f7fc f982 	bl	8002984 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b02      	cmp	r3, #2
 8006688:	d901      	bls.n	800668e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e1d4      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800668e:	4b41      	ldr	r3, [pc, #260]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 8006690:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d0ef      	beq.n	800667c <HAL_RCC_OscConfig+0x3ec>
 800669c:	e01b      	b.n	80066d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800669e:	4b3d      	ldr	r3, [pc, #244]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 80066a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066a4:	4a3b      	ldr	r2, [pc, #236]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 80066a6:	f023 0301 	bic.w	r3, r3, #1
 80066aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ae:	f7fc f969 	bl	8002984 <HAL_GetTick>
 80066b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066b4:	e008      	b.n	80066c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066b6:	f7fc f965 	bl	8002984 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d901      	bls.n	80066c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e1b7      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066c8:	4b32      	ldr	r3, [pc, #200]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 80066ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1ef      	bne.n	80066b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0304 	and.w	r3, r3, #4
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 80a6 	beq.w	8006830 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066e4:	2300      	movs	r3, #0
 80066e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80066e8:	4b2a      	ldr	r3, [pc, #168]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 80066ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10d      	bne.n	8006710 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066f4:	4b27      	ldr	r3, [pc, #156]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 80066f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066f8:	4a26      	ldr	r2, [pc, #152]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 80066fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006700:	4b24      	ldr	r3, [pc, #144]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 8006702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006708:	60bb      	str	r3, [r7, #8]
 800670a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800670c:	2301      	movs	r3, #1
 800670e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006710:	4b21      	ldr	r3, [pc, #132]	@ (8006798 <HAL_RCC_OscConfig+0x508>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006718:	2b00      	cmp	r3, #0
 800671a:	d118      	bne.n	800674e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800671c:	4b1e      	ldr	r3, [pc, #120]	@ (8006798 <HAL_RCC_OscConfig+0x508>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a1d      	ldr	r2, [pc, #116]	@ (8006798 <HAL_RCC_OscConfig+0x508>)
 8006722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006726:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006728:	f7fc f92c 	bl	8002984 <HAL_GetTick>
 800672c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800672e:	e008      	b.n	8006742 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006730:	f7fc f928 	bl	8002984 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b02      	cmp	r3, #2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e17a      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006742:	4b15      	ldr	r3, [pc, #84]	@ (8006798 <HAL_RCC_OscConfig+0x508>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0f0      	beq.n	8006730 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d108      	bne.n	8006768 <HAL_RCC_OscConfig+0x4d8>
 8006756:	4b0f      	ldr	r3, [pc, #60]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 8006758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800675c:	4a0d      	ldr	r2, [pc, #52]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 800675e:	f043 0301 	orr.w	r3, r3, #1
 8006762:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006766:	e029      	b.n	80067bc <HAL_RCC_OscConfig+0x52c>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	2b05      	cmp	r3, #5
 800676e:	d115      	bne.n	800679c <HAL_RCC_OscConfig+0x50c>
 8006770:	4b08      	ldr	r3, [pc, #32]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 8006772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006776:	4a07      	ldr	r2, [pc, #28]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 8006778:	f043 0304 	orr.w	r3, r3, #4
 800677c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006780:	4b04      	ldr	r3, [pc, #16]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 8006782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006786:	4a03      	ldr	r2, [pc, #12]	@ (8006794 <HAL_RCC_OscConfig+0x504>)
 8006788:	f043 0301 	orr.w	r3, r3, #1
 800678c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006790:	e014      	b.n	80067bc <HAL_RCC_OscConfig+0x52c>
 8006792:	bf00      	nop
 8006794:	40021000 	.word	0x40021000
 8006798:	40007000 	.word	0x40007000
 800679c:	4b9c      	ldr	r3, [pc, #624]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 800679e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067a2:	4a9b      	ldr	r2, [pc, #620]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 80067a4:	f023 0301 	bic.w	r3, r3, #1
 80067a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067ac:	4b98      	ldr	r3, [pc, #608]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 80067ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b2:	4a97      	ldr	r2, [pc, #604]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 80067b4:	f023 0304 	bic.w	r3, r3, #4
 80067b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d016      	beq.n	80067f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067c4:	f7fc f8de 	bl	8002984 <HAL_GetTick>
 80067c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067ca:	e00a      	b.n	80067e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067cc:	f7fc f8da 	bl	8002984 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067da:	4293      	cmp	r3, r2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e12a      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067e2:	4b8b      	ldr	r3, [pc, #556]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 80067e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d0ed      	beq.n	80067cc <HAL_RCC_OscConfig+0x53c>
 80067f0:	e015      	b.n	800681e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067f2:	f7fc f8c7 	bl	8002984 <HAL_GetTick>
 80067f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067f8:	e00a      	b.n	8006810 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067fa:	f7fc f8c3 	bl	8002984 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006808:	4293      	cmp	r3, r2
 800680a:	d901      	bls.n	8006810 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e113      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006810:	4b7f      	ldr	r3, [pc, #508]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 8006812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1ed      	bne.n	80067fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800681e:	7ffb      	ldrb	r3, [r7, #31]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d105      	bne.n	8006830 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006824:	4b7a      	ldr	r3, [pc, #488]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 8006826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006828:	4a79      	ldr	r2, [pc, #484]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 800682a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800682e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 80fe 	beq.w	8006a36 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683e:	2b02      	cmp	r3, #2
 8006840:	f040 80d0 	bne.w	80069e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006844:	4b72      	ldr	r3, [pc, #456]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f003 0203 	and.w	r2, r3, #3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006854:	429a      	cmp	r2, r3
 8006856:	d130      	bne.n	80068ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006862:	3b01      	subs	r3, #1
 8006864:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006866:	429a      	cmp	r2, r3
 8006868:	d127      	bne.n	80068ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006874:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006876:	429a      	cmp	r2, r3
 8006878:	d11f      	bne.n	80068ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006884:	2a07      	cmp	r2, #7
 8006886:	bf14      	ite	ne
 8006888:	2201      	movne	r2, #1
 800688a:	2200      	moveq	r2, #0
 800688c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800688e:	4293      	cmp	r3, r2
 8006890:	d113      	bne.n	80068ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800689c:	085b      	lsrs	r3, r3, #1
 800689e:	3b01      	subs	r3, #1
 80068a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d109      	bne.n	80068ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b0:	085b      	lsrs	r3, r3, #1
 80068b2:	3b01      	subs	r3, #1
 80068b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d06e      	beq.n	8006998 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	2b0c      	cmp	r3, #12
 80068be:	d069      	beq.n	8006994 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80068c0:	4b53      	ldr	r3, [pc, #332]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d105      	bne.n	80068d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80068cc:	4b50      	ldr	r3, [pc, #320]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e0ad      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80068dc:	4b4c      	ldr	r3, [pc, #304]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a4b      	ldr	r2, [pc, #300]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 80068e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80068e8:	f7fc f84c 	bl	8002984 <HAL_GetTick>
 80068ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068ee:	e008      	b.n	8006902 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068f0:	f7fc f848 	bl	8002984 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d901      	bls.n	8006902 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e09a      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006902:	4b43      	ldr	r3, [pc, #268]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1f0      	bne.n	80068f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800690e:	4b40      	ldr	r3, [pc, #256]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	4b40      	ldr	r3, [pc, #256]	@ (8006a14 <HAL_RCC_OscConfig+0x784>)
 8006914:	4013      	ands	r3, r2
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800691e:	3a01      	subs	r2, #1
 8006920:	0112      	lsls	r2, r2, #4
 8006922:	4311      	orrs	r1, r2
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006928:	0212      	lsls	r2, r2, #8
 800692a:	4311      	orrs	r1, r2
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006930:	0852      	lsrs	r2, r2, #1
 8006932:	3a01      	subs	r2, #1
 8006934:	0552      	lsls	r2, r2, #21
 8006936:	4311      	orrs	r1, r2
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800693c:	0852      	lsrs	r2, r2, #1
 800693e:	3a01      	subs	r2, #1
 8006940:	0652      	lsls	r2, r2, #25
 8006942:	4311      	orrs	r1, r2
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006948:	0912      	lsrs	r2, r2, #4
 800694a:	0452      	lsls	r2, r2, #17
 800694c:	430a      	orrs	r2, r1
 800694e:	4930      	ldr	r1, [pc, #192]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 8006950:	4313      	orrs	r3, r2
 8006952:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006954:	4b2e      	ldr	r3, [pc, #184]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a2d      	ldr	r2, [pc, #180]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 800695a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800695e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006960:	4b2b      	ldr	r3, [pc, #172]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	4a2a      	ldr	r2, [pc, #168]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 8006966:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800696a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800696c:	f7fc f80a 	bl	8002984 <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006974:	f7fc f806 	bl	8002984 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e058      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006986:	4b22      	ldr	r3, [pc, #136]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0f0      	beq.n	8006974 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006992:	e050      	b.n	8006a36 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e04f      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006998:	4b1d      	ldr	r3, [pc, #116]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d148      	bne.n	8006a36 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80069a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a19      	ldr	r2, [pc, #100]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 80069aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069b0:	4b17      	ldr	r3, [pc, #92]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	4a16      	ldr	r2, [pc, #88]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 80069b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80069bc:	f7fb ffe2 	bl	8002984 <HAL_GetTick>
 80069c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069c2:	e008      	b.n	80069d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c4:	f7fb ffde 	bl	8002984 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e030      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d0f0      	beq.n	80069c4 <HAL_RCC_OscConfig+0x734>
 80069e2:	e028      	b.n	8006a36 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	2b0c      	cmp	r3, #12
 80069e8:	d023      	beq.n	8006a32 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ea:	4b09      	ldr	r3, [pc, #36]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a08      	ldr	r2, [pc, #32]	@ (8006a10 <HAL_RCC_OscConfig+0x780>)
 80069f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f6:	f7fb ffc5 	bl	8002984 <HAL_GetTick>
 80069fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069fc:	e00c      	b.n	8006a18 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069fe:	f7fb ffc1 	bl	8002984 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d905      	bls.n	8006a18 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e013      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
 8006a10:	40021000 	.word	0x40021000
 8006a14:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a18:	4b09      	ldr	r3, [pc, #36]	@ (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1ec      	bne.n	80069fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006a24:	4b06      	ldr	r3, [pc, #24]	@ (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 8006a26:	68da      	ldr	r2, [r3, #12]
 8006a28:	4905      	ldr	r1, [pc, #20]	@ (8006a40 <HAL_RCC_OscConfig+0x7b0>)
 8006a2a:	4b06      	ldr	r3, [pc, #24]	@ (8006a44 <HAL_RCC_OscConfig+0x7b4>)
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	60cb      	str	r3, [r1, #12]
 8006a30:	e001      	b.n	8006a36 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e000      	b.n	8006a38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3720      	adds	r7, #32
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	40021000 	.word	0x40021000
 8006a44:	feeefffc 	.word	0xfeeefffc

08006a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e0e7      	b.n	8006c2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a5c:	4b75      	ldr	r3, [pc, #468]	@ (8006c34 <HAL_RCC_ClockConfig+0x1ec>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d910      	bls.n	8006a8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a6a:	4b72      	ldr	r3, [pc, #456]	@ (8006c34 <HAL_RCC_ClockConfig+0x1ec>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f023 0207 	bic.w	r2, r3, #7
 8006a72:	4970      	ldr	r1, [pc, #448]	@ (8006c34 <HAL_RCC_ClockConfig+0x1ec>)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a7a:	4b6e      	ldr	r3, [pc, #440]	@ (8006c34 <HAL_RCC_ClockConfig+0x1ec>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0307 	and.w	r3, r3, #7
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d001      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e0cf      	b.n	8006c2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0302 	and.w	r3, r3, #2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d010      	beq.n	8006aba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	4b66      	ldr	r3, [pc, #408]	@ (8006c38 <HAL_RCC_ClockConfig+0x1f0>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d908      	bls.n	8006aba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006aa8:	4b63      	ldr	r3, [pc, #396]	@ (8006c38 <HAL_RCC_ClockConfig+0x1f0>)
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	4960      	ldr	r1, [pc, #384]	@ (8006c38 <HAL_RCC_ClockConfig+0x1f0>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d04c      	beq.n	8006b60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d107      	bne.n	8006ade <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ace:	4b5a      	ldr	r3, [pc, #360]	@ (8006c38 <HAL_RCC_ClockConfig+0x1f0>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d121      	bne.n	8006b1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e0a6      	b.n	8006c2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d107      	bne.n	8006af6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ae6:	4b54      	ldr	r3, [pc, #336]	@ (8006c38 <HAL_RCC_ClockConfig+0x1f0>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d115      	bne.n	8006b1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e09a      	b.n	8006c2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d107      	bne.n	8006b0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006afe:	4b4e      	ldr	r3, [pc, #312]	@ (8006c38 <HAL_RCC_ClockConfig+0x1f0>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d109      	bne.n	8006b1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e08e      	b.n	8006c2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8006c38 <HAL_RCC_ClockConfig+0x1f0>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e086      	b.n	8006c2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b1e:	4b46      	ldr	r3, [pc, #280]	@ (8006c38 <HAL_RCC_ClockConfig+0x1f0>)
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f023 0203 	bic.w	r2, r3, #3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	4943      	ldr	r1, [pc, #268]	@ (8006c38 <HAL_RCC_ClockConfig+0x1f0>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b30:	f7fb ff28 	bl	8002984 <HAL_GetTick>
 8006b34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b36:	e00a      	b.n	8006b4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b38:	f7fb ff24 	bl	8002984 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e06e      	b.n	8006c2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8006c38 <HAL_RCC_ClockConfig+0x1f0>)
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f003 020c 	and.w	r2, r3, #12
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d1eb      	bne.n	8006b38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d010      	beq.n	8006b8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	4b31      	ldr	r3, [pc, #196]	@ (8006c38 <HAL_RCC_ClockConfig+0x1f0>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d208      	bcs.n	8006b8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8006c38 <HAL_RCC_ClockConfig+0x1f0>)
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	492b      	ldr	r1, [pc, #172]	@ (8006c38 <HAL_RCC_ClockConfig+0x1f0>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b8e:	4b29      	ldr	r3, [pc, #164]	@ (8006c34 <HAL_RCC_ClockConfig+0x1ec>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0307 	and.w	r3, r3, #7
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d210      	bcs.n	8006bbe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b9c:	4b25      	ldr	r3, [pc, #148]	@ (8006c34 <HAL_RCC_ClockConfig+0x1ec>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f023 0207 	bic.w	r2, r3, #7
 8006ba4:	4923      	ldr	r1, [pc, #140]	@ (8006c34 <HAL_RCC_ClockConfig+0x1ec>)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bac:	4b21      	ldr	r3, [pc, #132]	@ (8006c34 <HAL_RCC_ClockConfig+0x1ec>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0307 	and.w	r3, r3, #7
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d001      	beq.n	8006bbe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e036      	b.n	8006c2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0304 	and.w	r3, r3, #4
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d008      	beq.n	8006bdc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bca:	4b1b      	ldr	r3, [pc, #108]	@ (8006c38 <HAL_RCC_ClockConfig+0x1f0>)
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	4918      	ldr	r1, [pc, #96]	@ (8006c38 <HAL_RCC_ClockConfig+0x1f0>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0308 	and.w	r3, r3, #8
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d009      	beq.n	8006bfc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006be8:	4b13      	ldr	r3, [pc, #76]	@ (8006c38 <HAL_RCC_ClockConfig+0x1f0>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	4910      	ldr	r1, [pc, #64]	@ (8006c38 <HAL_RCC_ClockConfig+0x1f0>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006bfc:	f000 f824 	bl	8006c48 <HAL_RCC_GetSysClockFreq>
 8006c00:	4602      	mov	r2, r0
 8006c02:	4b0d      	ldr	r3, [pc, #52]	@ (8006c38 <HAL_RCC_ClockConfig+0x1f0>)
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	091b      	lsrs	r3, r3, #4
 8006c08:	f003 030f 	and.w	r3, r3, #15
 8006c0c:	490b      	ldr	r1, [pc, #44]	@ (8006c3c <HAL_RCC_ClockConfig+0x1f4>)
 8006c0e:	5ccb      	ldrb	r3, [r1, r3]
 8006c10:	f003 031f 	and.w	r3, r3, #31
 8006c14:	fa22 f303 	lsr.w	r3, r2, r3
 8006c18:	4a09      	ldr	r2, [pc, #36]	@ (8006c40 <HAL_RCC_ClockConfig+0x1f8>)
 8006c1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006c1c:	4b09      	ldr	r3, [pc, #36]	@ (8006c44 <HAL_RCC_ClockConfig+0x1fc>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7fb fe5f 	bl	80028e4 <HAL_InitTick>
 8006c26:	4603      	mov	r3, r0
 8006c28:	72fb      	strb	r3, [r7, #11]

  return status;
 8006c2a:	7afb      	ldrb	r3, [r7, #11]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	40022000 	.word	0x40022000
 8006c38:	40021000 	.word	0x40021000
 8006c3c:	0800f328 	.word	0x0800f328
 8006c40:	20000008 	.word	0x20000008
 8006c44:	2000000c 	.word	0x2000000c

08006c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b089      	sub	sp, #36	@ 0x24
 8006c4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	61fb      	str	r3, [r7, #28]
 8006c52:	2300      	movs	r3, #0
 8006c54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c56:	4b3e      	ldr	r3, [pc, #248]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f003 030c 	and.w	r3, r3, #12
 8006c5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c60:	4b3b      	ldr	r3, [pc, #236]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	f003 0303 	and.w	r3, r3, #3
 8006c68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d005      	beq.n	8006c7c <HAL_RCC_GetSysClockFreq+0x34>
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	2b0c      	cmp	r3, #12
 8006c74:	d121      	bne.n	8006cba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d11e      	bne.n	8006cba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006c7c:	4b34      	ldr	r3, [pc, #208]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0308 	and.w	r3, r3, #8
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d107      	bne.n	8006c98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006c88:	4b31      	ldr	r3, [pc, #196]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c8e:	0a1b      	lsrs	r3, r3, #8
 8006c90:	f003 030f 	and.w	r3, r3, #15
 8006c94:	61fb      	str	r3, [r7, #28]
 8006c96:	e005      	b.n	8006ca4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006c98:	4b2d      	ldr	r3, [pc, #180]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	091b      	lsrs	r3, r3, #4
 8006c9e:	f003 030f 	and.w	r3, r3, #15
 8006ca2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006ca4:	4a2b      	ldr	r2, [pc, #172]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10d      	bne.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006cb8:	e00a      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d102      	bne.n	8006cc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006cc0:	4b25      	ldr	r3, [pc, #148]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x110>)
 8006cc2:	61bb      	str	r3, [r7, #24]
 8006cc4:	e004      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	d101      	bne.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ccc:	4b23      	ldr	r3, [pc, #140]	@ (8006d5c <HAL_RCC_GetSysClockFreq+0x114>)
 8006cce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	2b0c      	cmp	r3, #12
 8006cd4:	d134      	bne.n	8006d40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	f003 0303 	and.w	r3, r3, #3
 8006cde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d003      	beq.n	8006cee <HAL_RCC_GetSysClockFreq+0xa6>
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	d003      	beq.n	8006cf4 <HAL_RCC_GetSysClockFreq+0xac>
 8006cec:	e005      	b.n	8006cfa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006cee:	4b1a      	ldr	r3, [pc, #104]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x110>)
 8006cf0:	617b      	str	r3, [r7, #20]
      break;
 8006cf2:	e005      	b.n	8006d00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006cf4:	4b19      	ldr	r3, [pc, #100]	@ (8006d5c <HAL_RCC_GetSysClockFreq+0x114>)
 8006cf6:	617b      	str	r3, [r7, #20]
      break;
 8006cf8:	e002      	b.n	8006d00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	617b      	str	r3, [r7, #20]
      break;
 8006cfe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d00:	4b13      	ldr	r3, [pc, #76]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	091b      	lsrs	r3, r3, #4
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006d0e:	4b10      	ldr	r3, [pc, #64]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	0a1b      	lsrs	r3, r3, #8
 8006d14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	fb03 f202 	mul.w	r2, r3, r2
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d26:	4b0a      	ldr	r3, [pc, #40]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	0e5b      	lsrs	r3, r3, #25
 8006d2c:	f003 0303 	and.w	r3, r3, #3
 8006d30:	3301      	adds	r3, #1
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006d40:	69bb      	ldr	r3, [r7, #24]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3724      	adds	r7, #36	@ 0x24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	40021000 	.word	0x40021000
 8006d54:	0800f340 	.word	0x0800f340
 8006d58:	00f42400 	.word	0x00f42400
 8006d5c:	007a1200 	.word	0x007a1200

08006d60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d64:	4b03      	ldr	r3, [pc, #12]	@ (8006d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d66:	681b      	ldr	r3, [r3, #0]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	20000008 	.word	0x20000008

08006d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006d7c:	f7ff fff0 	bl	8006d60 <HAL_RCC_GetHCLKFreq>
 8006d80:	4602      	mov	r2, r0
 8006d82:	4b06      	ldr	r3, [pc, #24]	@ (8006d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	0a1b      	lsrs	r3, r3, #8
 8006d88:	f003 0307 	and.w	r3, r3, #7
 8006d8c:	4904      	ldr	r1, [pc, #16]	@ (8006da0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d8e:	5ccb      	ldrb	r3, [r1, r3]
 8006d90:	f003 031f 	and.w	r3, r3, #31
 8006d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	40021000 	.word	0x40021000
 8006da0:	0800f338 	.word	0x0800f338

08006da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006da8:	f7ff ffda 	bl	8006d60 <HAL_RCC_GetHCLKFreq>
 8006dac:	4602      	mov	r2, r0
 8006dae:	4b06      	ldr	r3, [pc, #24]	@ (8006dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	0adb      	lsrs	r3, r3, #11
 8006db4:	f003 0307 	and.w	r3, r3, #7
 8006db8:	4904      	ldr	r1, [pc, #16]	@ (8006dcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8006dba:	5ccb      	ldrb	r3, [r1, r3]
 8006dbc:	f003 031f 	and.w	r3, r3, #31
 8006dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	40021000 	.word	0x40021000
 8006dcc:	0800f338 	.word	0x0800f338

08006dd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006dd8:	2300      	movs	r3, #0
 8006dda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8006e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006de8:	f7ff f922 	bl	8006030 <HAL_PWREx_GetVoltageRange>
 8006dec:	6178      	str	r0, [r7, #20]
 8006dee:	e014      	b.n	8006e1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006df0:	4b25      	ldr	r3, [pc, #148]	@ (8006e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006df4:	4a24      	ldr	r2, [pc, #144]	@ (8006e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dfc:	4b22      	ldr	r3, [pc, #136]	@ (8006e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006e08:	f7ff f912 	bl	8006030 <HAL_PWREx_GetVoltageRange>
 8006e0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8006e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e12:	4a1d      	ldr	r2, [pc, #116]	@ (8006e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e18:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e20:	d10b      	bne.n	8006e3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b80      	cmp	r3, #128	@ 0x80
 8006e26:	d919      	bls.n	8006e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2ba0      	cmp	r3, #160	@ 0xa0
 8006e2c:	d902      	bls.n	8006e34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e2e:	2302      	movs	r3, #2
 8006e30:	613b      	str	r3, [r7, #16]
 8006e32:	e013      	b.n	8006e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e34:	2301      	movs	r3, #1
 8006e36:	613b      	str	r3, [r7, #16]
 8006e38:	e010      	b.n	8006e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b80      	cmp	r3, #128	@ 0x80
 8006e3e:	d902      	bls.n	8006e46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006e40:	2303      	movs	r3, #3
 8006e42:	613b      	str	r3, [r7, #16]
 8006e44:	e00a      	b.n	8006e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b80      	cmp	r3, #128	@ 0x80
 8006e4a:	d102      	bne.n	8006e52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	613b      	str	r3, [r7, #16]
 8006e50:	e004      	b.n	8006e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b70      	cmp	r3, #112	@ 0x70
 8006e56:	d101      	bne.n	8006e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e58:	2301      	movs	r3, #1
 8006e5a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f023 0207 	bic.w	r2, r3, #7
 8006e64:	4909      	ldr	r1, [pc, #36]	@ (8006e8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006e6c:	4b07      	ldr	r3, [pc, #28]	@ (8006e8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0307 	and.w	r3, r3, #7
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d001      	beq.n	8006e7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e000      	b.n	8006e80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	40021000 	.word	0x40021000
 8006e8c:	40022000 	.word	0x40022000

08006e90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e98:	2300      	movs	r3, #0
 8006e9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d041      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006eb0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006eb4:	d02a      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006eb6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006eba:	d824      	bhi.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006ebc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ec0:	d008      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006ec2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ec6:	d81e      	bhi.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00a      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006ecc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ed0:	d010      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006ed2:	e018      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006ed4:	4b86      	ldr	r3, [pc, #536]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	4a85      	ldr	r2, [pc, #532]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006eda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ede:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006ee0:	e015      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 facb 	bl	8007484 <RCCEx_PLLSAI1_Config>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006ef2:	e00c      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	3320      	adds	r3, #32
 8006ef8:	2100      	movs	r1, #0
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 fbb6 	bl	800766c <RCCEx_PLLSAI2_Config>
 8006f00:	4603      	mov	r3, r0
 8006f02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f04:	e003      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	74fb      	strb	r3, [r7, #19]
      break;
 8006f0a:	e000      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f0e:	7cfb      	ldrb	r3, [r7, #19]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10b      	bne.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f14:	4b76      	ldr	r3, [pc, #472]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f22:	4973      	ldr	r1, [pc, #460]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006f2a:	e001      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f2c:	7cfb      	ldrb	r3, [r7, #19]
 8006f2e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d041      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f40:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006f44:	d02a      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006f46:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006f4a:	d824      	bhi.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006f4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f50:	d008      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006f52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f56:	d81e      	bhi.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00a      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006f5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f60:	d010      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006f62:	e018      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006f64:	4b62      	ldr	r3, [pc, #392]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	4a61      	ldr	r2, [pc, #388]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f6e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006f70:	e015      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	3304      	adds	r3, #4
 8006f76:	2100      	movs	r1, #0
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 fa83 	bl	8007484 <RCCEx_PLLSAI1_Config>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006f82:	e00c      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	3320      	adds	r3, #32
 8006f88:	2100      	movs	r1, #0
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 fb6e 	bl	800766c <RCCEx_PLLSAI2_Config>
 8006f90:	4603      	mov	r3, r0
 8006f92:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006f94:	e003      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	74fb      	strb	r3, [r7, #19]
      break;
 8006f9a:	e000      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006f9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f9e:	7cfb      	ldrb	r3, [r7, #19]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10b      	bne.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006fa4:	4b52      	ldr	r3, [pc, #328]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006faa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fb2:	494f      	ldr	r1, [pc, #316]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006fba:	e001      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fbc:	7cfb      	ldrb	r3, [r7, #19]
 8006fbe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 80a0 	beq.w	800710e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006fd2:	4b47      	ldr	r3, [pc, #284]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e000      	b.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00d      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fe8:	4b41      	ldr	r3, [pc, #260]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fec:	4a40      	ldr	r2, [pc, #256]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ff2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ff4:	4b3e      	ldr	r3, [pc, #248]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ffc:	60bb      	str	r3, [r7, #8]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007000:	2301      	movs	r3, #1
 8007002:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007004:	4b3b      	ldr	r3, [pc, #236]	@ (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a3a      	ldr	r2, [pc, #232]	@ (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800700a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800700e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007010:	f7fb fcb8 	bl	8002984 <HAL_GetTick>
 8007014:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007016:	e009      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007018:	f7fb fcb4 	bl	8002984 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b02      	cmp	r3, #2
 8007024:	d902      	bls.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	74fb      	strb	r3, [r7, #19]
        break;
 800702a:	e005      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800702c:	4b31      	ldr	r3, [pc, #196]	@ (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0ef      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007038:	7cfb      	ldrb	r3, [r7, #19]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d15c      	bne.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800703e:	4b2c      	ldr	r3, [pc, #176]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007044:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007048:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d01f      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	429a      	cmp	r2, r3
 800705a:	d019      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800705c:	4b24      	ldr	r3, [pc, #144]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800705e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007066:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007068:	4b21      	ldr	r3, [pc, #132]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800706a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800706e:	4a20      	ldr	r2, [pc, #128]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007074:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007078:	4b1d      	ldr	r3, [pc, #116]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800707a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800707e:	4a1c      	ldr	r2, [pc, #112]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007080:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007084:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007088:	4a19      	ldr	r2, [pc, #100]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b00      	cmp	r3, #0
 8007098:	d016      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800709a:	f7fb fc73 	bl	8002984 <HAL_GetTick>
 800709e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070a0:	e00b      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070a2:	f7fb fc6f 	bl	8002984 <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d902      	bls.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	74fb      	strb	r3, [r7, #19]
            break;
 80070b8:	e006      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070ba:	4b0d      	ldr	r3, [pc, #52]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d0ec      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80070c8:	7cfb      	ldrb	r3, [r7, #19]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10c      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070ce:	4b08      	ldr	r3, [pc, #32]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070de:	4904      	ldr	r1, [pc, #16]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80070e6:	e009      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80070e8:	7cfb      	ldrb	r3, [r7, #19]
 80070ea:	74bb      	strb	r3, [r7, #18]
 80070ec:	e006      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80070ee:	bf00      	nop
 80070f0:	40021000 	.word	0x40021000
 80070f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070f8:	7cfb      	ldrb	r3, [r7, #19]
 80070fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070fc:	7c7b      	ldrb	r3, [r7, #17]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d105      	bne.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007102:	4b9e      	ldr	r3, [pc, #632]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007106:	4a9d      	ldr	r2, [pc, #628]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007108:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800710c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00a      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800711a:	4b98      	ldr	r3, [pc, #608]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800711c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007120:	f023 0203 	bic.w	r2, r3, #3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007128:	4994      	ldr	r1, [pc, #592]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800712a:	4313      	orrs	r3, r2
 800712c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00a      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800713c:	4b8f      	ldr	r3, [pc, #572]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800713e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007142:	f023 020c 	bic.w	r2, r3, #12
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800714a:	498c      	ldr	r1, [pc, #560]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800714c:	4313      	orrs	r3, r2
 800714e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0304 	and.w	r3, r3, #4
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00a      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800715e:	4b87      	ldr	r3, [pc, #540]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007164:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716c:	4983      	ldr	r1, [pc, #524]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800716e:	4313      	orrs	r3, r2
 8007170:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0308 	and.w	r3, r3, #8
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00a      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007180:	4b7e      	ldr	r3, [pc, #504]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007186:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800718e:	497b      	ldr	r1, [pc, #492]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007190:	4313      	orrs	r3, r2
 8007192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0310 	and.w	r3, r3, #16
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00a      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80071a2:	4b76      	ldr	r3, [pc, #472]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071b0:	4972      	ldr	r1, [pc, #456]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0320 	and.w	r3, r3, #32
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00a      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80071c4:	4b6d      	ldr	r3, [pc, #436]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071d2:	496a      	ldr	r1, [pc, #424]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00a      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071e6:	4b65      	ldr	r3, [pc, #404]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071f4:	4961      	ldr	r1, [pc, #388]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00a      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007208:	4b5c      	ldr	r3, [pc, #368]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800720a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800720e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007216:	4959      	ldr	r1, [pc, #356]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007218:	4313      	orrs	r3, r2
 800721a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00a      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800722a:	4b54      	ldr	r3, [pc, #336]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800722c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007230:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007238:	4950      	ldr	r1, [pc, #320]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800723a:	4313      	orrs	r3, r2
 800723c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00a      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800724c:	4b4b      	ldr	r3, [pc, #300]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800724e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007252:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800725a:	4948      	ldr	r1, [pc, #288]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800725c:	4313      	orrs	r3, r2
 800725e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00a      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800726e:	4b43      	ldr	r3, [pc, #268]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007274:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800727c:	493f      	ldr	r1, [pc, #252]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800727e:	4313      	orrs	r3, r2
 8007280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d028      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007290:	4b3a      	ldr	r3, [pc, #232]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007296:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800729e:	4937      	ldr	r1, [pc, #220]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072ae:	d106      	bne.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072b0:	4b32      	ldr	r3, [pc, #200]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	4a31      	ldr	r2, [pc, #196]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072ba:	60d3      	str	r3, [r2, #12]
 80072bc:	e011      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072c6:	d10c      	bne.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3304      	adds	r3, #4
 80072cc:	2101      	movs	r1, #1
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 f8d8 	bl	8007484 <RCCEx_PLLSAI1_Config>
 80072d4:	4603      	mov	r3, r0
 80072d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80072d8:	7cfb      	ldrb	r3, [r7, #19]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80072de:	7cfb      	ldrb	r3, [r7, #19]
 80072e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d028      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80072ee:	4b23      	ldr	r3, [pc, #140]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072fc:	491f      	ldr	r1, [pc, #124]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007308:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800730c:	d106      	bne.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800730e:	4b1b      	ldr	r3, [pc, #108]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	4a1a      	ldr	r2, [pc, #104]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007314:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007318:	60d3      	str	r3, [r2, #12]
 800731a:	e011      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007320:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007324:	d10c      	bne.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	3304      	adds	r3, #4
 800732a:	2101      	movs	r1, #1
 800732c:	4618      	mov	r0, r3
 800732e:	f000 f8a9 	bl	8007484 <RCCEx_PLLSAI1_Config>
 8007332:	4603      	mov	r3, r0
 8007334:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007336:	7cfb      	ldrb	r3, [r7, #19]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800733c:	7cfb      	ldrb	r3, [r7, #19]
 800733e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d02b      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800734c:	4b0b      	ldr	r3, [pc, #44]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800734e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007352:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800735a:	4908      	ldr	r1, [pc, #32]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800735c:	4313      	orrs	r3, r2
 800735e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007366:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800736a:	d109      	bne.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800736c:	4b03      	ldr	r3, [pc, #12]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	4a02      	ldr	r2, [pc, #8]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007372:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007376:	60d3      	str	r3, [r2, #12]
 8007378:	e014      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800737a:	bf00      	nop
 800737c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007384:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007388:	d10c      	bne.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	3304      	adds	r3, #4
 800738e:	2101      	movs	r1, #1
 8007390:	4618      	mov	r0, r3
 8007392:	f000 f877 	bl	8007484 <RCCEx_PLLSAI1_Config>
 8007396:	4603      	mov	r3, r0
 8007398:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800739a:	7cfb      	ldrb	r3, [r7, #19]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80073a0:	7cfb      	ldrb	r3, [r7, #19]
 80073a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d02f      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80073b0:	4b2b      	ldr	r3, [pc, #172]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80073b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073be:	4928      	ldr	r1, [pc, #160]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073ce:	d10d      	bne.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	3304      	adds	r3, #4
 80073d4:	2102      	movs	r1, #2
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 f854 	bl	8007484 <RCCEx_PLLSAI1_Config>
 80073dc:	4603      	mov	r3, r0
 80073de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80073e0:	7cfb      	ldrb	r3, [r7, #19]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d014      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80073e6:	7cfb      	ldrb	r3, [r7, #19]
 80073e8:	74bb      	strb	r3, [r7, #18]
 80073ea:	e011      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073f4:	d10c      	bne.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	3320      	adds	r3, #32
 80073fa:	2102      	movs	r1, #2
 80073fc:	4618      	mov	r0, r3
 80073fe:	f000 f935 	bl	800766c <RCCEx_PLLSAI2_Config>
 8007402:	4603      	mov	r3, r0
 8007404:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007406:	7cfb      	ldrb	r3, [r7, #19]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800740c:	7cfb      	ldrb	r3, [r7, #19]
 800740e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00a      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800741c:	4b10      	ldr	r3, [pc, #64]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800741e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007422:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800742a:	490d      	ldr	r1, [pc, #52]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800742c:	4313      	orrs	r3, r2
 800742e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00b      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800743e:	4b08      	ldr	r3, [pc, #32]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007444:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800744e:	4904      	ldr	r1, [pc, #16]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007450:	4313      	orrs	r3, r2
 8007452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007456:	7cbb      	ldrb	r3, [r7, #18]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3718      	adds	r7, #24
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	40021000 	.word	0x40021000

08007464 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007464:	b480      	push	{r7}
 8007466:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007468:	4b05      	ldr	r3, [pc, #20]	@ (8007480 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a04      	ldr	r2, [pc, #16]	@ (8007480 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800746e:	f043 0304 	orr.w	r3, r3, #4
 8007472:	6013      	str	r3, [r2, #0]
}
 8007474:	bf00      	nop
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	40021000 	.word	0x40021000

08007484 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007492:	4b75      	ldr	r3, [pc, #468]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	f003 0303 	and.w	r3, r3, #3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d018      	beq.n	80074d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800749e:	4b72      	ldr	r3, [pc, #456]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	f003 0203 	and.w	r2, r3, #3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d10d      	bne.n	80074ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
       ||
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d009      	beq.n	80074ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80074b6:	4b6c      	ldr	r3, [pc, #432]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	091b      	lsrs	r3, r3, #4
 80074bc:	f003 0307 	and.w	r3, r3, #7
 80074c0:	1c5a      	adds	r2, r3, #1
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
       ||
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d047      	beq.n	800755a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	73fb      	strb	r3, [r7, #15]
 80074ce:	e044      	b.n	800755a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2b03      	cmp	r3, #3
 80074d6:	d018      	beq.n	800750a <RCCEx_PLLSAI1_Config+0x86>
 80074d8:	2b03      	cmp	r3, #3
 80074da:	d825      	bhi.n	8007528 <RCCEx_PLLSAI1_Config+0xa4>
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d002      	beq.n	80074e6 <RCCEx_PLLSAI1_Config+0x62>
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d009      	beq.n	80074f8 <RCCEx_PLLSAI1_Config+0x74>
 80074e4:	e020      	b.n	8007528 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80074e6:	4b60      	ldr	r3, [pc, #384]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0302 	and.w	r3, r3, #2
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d11d      	bne.n	800752e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074f6:	e01a      	b.n	800752e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80074f8:	4b5b      	ldr	r3, [pc, #364]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007500:	2b00      	cmp	r3, #0
 8007502:	d116      	bne.n	8007532 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007508:	e013      	b.n	8007532 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800750a:	4b57      	ldr	r3, [pc, #348]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10f      	bne.n	8007536 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007516:	4b54      	ldr	r3, [pc, #336]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d109      	bne.n	8007536 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007526:	e006      	b.n	8007536 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	73fb      	strb	r3, [r7, #15]
      break;
 800752c:	e004      	b.n	8007538 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800752e:	bf00      	nop
 8007530:	e002      	b.n	8007538 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007532:	bf00      	nop
 8007534:	e000      	b.n	8007538 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007536:	bf00      	nop
    }

    if(status == HAL_OK)
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10d      	bne.n	800755a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800753e:	4b4a      	ldr	r3, [pc, #296]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6819      	ldr	r1, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	3b01      	subs	r3, #1
 8007550:	011b      	lsls	r3, r3, #4
 8007552:	430b      	orrs	r3, r1
 8007554:	4944      	ldr	r1, [pc, #272]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007556:	4313      	orrs	r3, r2
 8007558:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800755a:	7bfb      	ldrb	r3, [r7, #15]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d17d      	bne.n	800765c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007560:	4b41      	ldr	r3, [pc, #260]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a40      	ldr	r2, [pc, #256]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007566:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800756a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800756c:	f7fb fa0a 	bl	8002984 <HAL_GetTick>
 8007570:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007572:	e009      	b.n	8007588 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007574:	f7fb fa06 	bl	8002984 <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	2b02      	cmp	r3, #2
 8007580:	d902      	bls.n	8007588 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	73fb      	strb	r3, [r7, #15]
        break;
 8007586:	e005      	b.n	8007594 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007588:	4b37      	ldr	r3, [pc, #220]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1ef      	bne.n	8007574 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d160      	bne.n	800765c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d111      	bne.n	80075c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075a0:	4b31      	ldr	r3, [pc, #196]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80075a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	6892      	ldr	r2, [r2, #8]
 80075b0:	0211      	lsls	r1, r2, #8
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	68d2      	ldr	r2, [r2, #12]
 80075b6:	0912      	lsrs	r2, r2, #4
 80075b8:	0452      	lsls	r2, r2, #17
 80075ba:	430a      	orrs	r2, r1
 80075bc:	492a      	ldr	r1, [pc, #168]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	610b      	str	r3, [r1, #16]
 80075c2:	e027      	b.n	8007614 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d112      	bne.n	80075f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075ca:	4b27      	ldr	r3, [pc, #156]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80075d2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	6892      	ldr	r2, [r2, #8]
 80075da:	0211      	lsls	r1, r2, #8
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	6912      	ldr	r2, [r2, #16]
 80075e0:	0852      	lsrs	r2, r2, #1
 80075e2:	3a01      	subs	r2, #1
 80075e4:	0552      	lsls	r2, r2, #21
 80075e6:	430a      	orrs	r2, r1
 80075e8:	491f      	ldr	r1, [pc, #124]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	610b      	str	r3, [r1, #16]
 80075ee:	e011      	b.n	8007614 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80075f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	6892      	ldr	r2, [r2, #8]
 8007600:	0211      	lsls	r1, r2, #8
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	6952      	ldr	r2, [r2, #20]
 8007606:	0852      	lsrs	r2, r2, #1
 8007608:	3a01      	subs	r2, #1
 800760a:	0652      	lsls	r2, r2, #25
 800760c:	430a      	orrs	r2, r1
 800760e:	4916      	ldr	r1, [pc, #88]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007610:	4313      	orrs	r3, r2
 8007612:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007614:	4b14      	ldr	r3, [pc, #80]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a13      	ldr	r2, [pc, #76]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 800761a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800761e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007620:	f7fb f9b0 	bl	8002984 <HAL_GetTick>
 8007624:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007626:	e009      	b.n	800763c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007628:	f7fb f9ac 	bl	8002984 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	2b02      	cmp	r3, #2
 8007634:	d902      	bls.n	800763c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	73fb      	strb	r3, [r7, #15]
          break;
 800763a:	e005      	b.n	8007648 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800763c:	4b0a      	ldr	r3, [pc, #40]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0ef      	beq.n	8007628 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007648:	7bfb      	ldrb	r3, [r7, #15]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d106      	bne.n	800765c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800764e:	4b06      	ldr	r3, [pc, #24]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007650:	691a      	ldr	r2, [r3, #16]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	4904      	ldr	r1, [pc, #16]	@ (8007668 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007658:	4313      	orrs	r3, r2
 800765a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800765c:	7bfb      	ldrb	r3, [r7, #15]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	40021000 	.word	0x40021000

0800766c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800767a:	4b6a      	ldr	r3, [pc, #424]	@ (8007824 <RCCEx_PLLSAI2_Config+0x1b8>)
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	f003 0303 	and.w	r3, r3, #3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d018      	beq.n	80076b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007686:	4b67      	ldr	r3, [pc, #412]	@ (8007824 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f003 0203 	and.w	r2, r3, #3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	429a      	cmp	r2, r3
 8007694:	d10d      	bne.n	80076b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
       ||
 800769a:	2b00      	cmp	r3, #0
 800769c:	d009      	beq.n	80076b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800769e:	4b61      	ldr	r3, [pc, #388]	@ (8007824 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	091b      	lsrs	r3, r3, #4
 80076a4:	f003 0307 	and.w	r3, r3, #7
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
       ||
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d047      	beq.n	8007742 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	73fb      	strb	r3, [r7, #15]
 80076b6:	e044      	b.n	8007742 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b03      	cmp	r3, #3
 80076be:	d018      	beq.n	80076f2 <RCCEx_PLLSAI2_Config+0x86>
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d825      	bhi.n	8007710 <RCCEx_PLLSAI2_Config+0xa4>
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d002      	beq.n	80076ce <RCCEx_PLLSAI2_Config+0x62>
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d009      	beq.n	80076e0 <RCCEx_PLLSAI2_Config+0x74>
 80076cc:	e020      	b.n	8007710 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80076ce:	4b55      	ldr	r3, [pc, #340]	@ (8007824 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0302 	and.w	r3, r3, #2
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d11d      	bne.n	8007716 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076de:	e01a      	b.n	8007716 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80076e0:	4b50      	ldr	r3, [pc, #320]	@ (8007824 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d116      	bne.n	800771a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076f0:	e013      	b.n	800771a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80076f2:	4b4c      	ldr	r3, [pc, #304]	@ (8007824 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10f      	bne.n	800771e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80076fe:	4b49      	ldr	r3, [pc, #292]	@ (8007824 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d109      	bne.n	800771e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800770e:	e006      	b.n	800771e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	73fb      	strb	r3, [r7, #15]
      break;
 8007714:	e004      	b.n	8007720 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007716:	bf00      	nop
 8007718:	e002      	b.n	8007720 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800771a:	bf00      	nop
 800771c:	e000      	b.n	8007720 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800771e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007720:	7bfb      	ldrb	r3, [r7, #15]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10d      	bne.n	8007742 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007726:	4b3f      	ldr	r3, [pc, #252]	@ (8007824 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6819      	ldr	r1, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	3b01      	subs	r3, #1
 8007738:	011b      	lsls	r3, r3, #4
 800773a:	430b      	orrs	r3, r1
 800773c:	4939      	ldr	r1, [pc, #228]	@ (8007824 <RCCEx_PLLSAI2_Config+0x1b8>)
 800773e:	4313      	orrs	r3, r2
 8007740:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d167      	bne.n	8007818 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007748:	4b36      	ldr	r3, [pc, #216]	@ (8007824 <RCCEx_PLLSAI2_Config+0x1b8>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a35      	ldr	r2, [pc, #212]	@ (8007824 <RCCEx_PLLSAI2_Config+0x1b8>)
 800774e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007754:	f7fb f916 	bl	8002984 <HAL_GetTick>
 8007758:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800775a:	e009      	b.n	8007770 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800775c:	f7fb f912 	bl	8002984 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	2b02      	cmp	r3, #2
 8007768:	d902      	bls.n	8007770 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	73fb      	strb	r3, [r7, #15]
        break;
 800776e:	e005      	b.n	800777c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007770:	4b2c      	ldr	r3, [pc, #176]	@ (8007824 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1ef      	bne.n	800775c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800777c:	7bfb      	ldrb	r3, [r7, #15]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d14a      	bne.n	8007818 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d111      	bne.n	80077ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007788:	4b26      	ldr	r3, [pc, #152]	@ (8007824 <RCCEx_PLLSAI2_Config+0x1b8>)
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007790:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	6892      	ldr	r2, [r2, #8]
 8007798:	0211      	lsls	r1, r2, #8
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	68d2      	ldr	r2, [r2, #12]
 800779e:	0912      	lsrs	r2, r2, #4
 80077a0:	0452      	lsls	r2, r2, #17
 80077a2:	430a      	orrs	r2, r1
 80077a4:	491f      	ldr	r1, [pc, #124]	@ (8007824 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	614b      	str	r3, [r1, #20]
 80077aa:	e011      	b.n	80077d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80077ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007824 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80077b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	6892      	ldr	r2, [r2, #8]
 80077bc:	0211      	lsls	r1, r2, #8
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	6912      	ldr	r2, [r2, #16]
 80077c2:	0852      	lsrs	r2, r2, #1
 80077c4:	3a01      	subs	r2, #1
 80077c6:	0652      	lsls	r2, r2, #25
 80077c8:	430a      	orrs	r2, r1
 80077ca:	4916      	ldr	r1, [pc, #88]	@ (8007824 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80077d0:	4b14      	ldr	r3, [pc, #80]	@ (8007824 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a13      	ldr	r2, [pc, #76]	@ (8007824 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077dc:	f7fb f8d2 	bl	8002984 <HAL_GetTick>
 80077e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80077e2:	e009      	b.n	80077f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80077e4:	f7fb f8ce 	bl	8002984 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d902      	bls.n	80077f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	73fb      	strb	r3, [r7, #15]
          break;
 80077f6:	e005      	b.n	8007804 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80077f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007824 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d0ef      	beq.n	80077e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007804:	7bfb      	ldrb	r3, [r7, #15]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d106      	bne.n	8007818 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800780a:	4b06      	ldr	r3, [pc, #24]	@ (8007824 <RCCEx_PLLSAI2_Config+0x1b8>)
 800780c:	695a      	ldr	r2, [r3, #20]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	4904      	ldr	r1, [pc, #16]	@ (8007824 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007814:	4313      	orrs	r3, r2
 8007816:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007818:	7bfb      	ldrb	r3, [r7, #15]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	40021000 	.word	0x40021000

08007828 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e095      	b.n	8007966 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800783e:	2b00      	cmp	r3, #0
 8007840:	d108      	bne.n	8007854 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800784a:	d009      	beq.n	8007860 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	61da      	str	r2, [r3, #28]
 8007852:	e005      	b.n	8007860 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b00      	cmp	r3, #0
 8007870:	d106      	bne.n	8007880 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7fa fcec 	bl	8002258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2202      	movs	r2, #2
 8007884:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007896:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80078a0:	d902      	bls.n	80078a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80078a2:	2300      	movs	r3, #0
 80078a4:	60fb      	str	r3, [r7, #12]
 80078a6:	e002      	b.n	80078ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80078a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80078ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80078b6:	d007      	beq.n	80078c8 <HAL_SPI_Init+0xa0>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80078c0:	d002      	beq.n	80078c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80078d8:	431a      	orrs	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	431a      	orrs	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	431a      	orrs	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078f6:	431a      	orrs	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	69db      	ldr	r3, [r3, #28]
 80078fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007900:	431a      	orrs	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800790a:	ea42 0103 	orr.w	r1, r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007912:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	0c1b      	lsrs	r3, r3, #16
 8007924:	f003 0204 	and.w	r2, r3, #4
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792c:	f003 0310 	and.w	r3, r3, #16
 8007930:	431a      	orrs	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007936:	f003 0308 	and.w	r3, r3, #8
 800793a:	431a      	orrs	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007944:	ea42 0103 	orr.w	r1, r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b082      	sub	sp, #8
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d101      	bne.n	8007980 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e049      	b.n	8007a14 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b00      	cmp	r3, #0
 800798a:	d106      	bne.n	800799a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f7fa fca3 	bl	80022e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2202      	movs	r2, #2
 800799e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	3304      	adds	r3, #4
 80079aa:	4619      	mov	r1, r3
 80079ac:	4610      	mov	r0, r2
 80079ae:	f000 f8a5 	bl	8007afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d001      	beq.n	8007a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e04f      	b.n	8007ad4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68da      	ldr	r2, [r3, #12]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f042 0201 	orr.w	r2, r2, #1
 8007a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a23      	ldr	r2, [pc, #140]	@ (8007ae0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d01d      	beq.n	8007a92 <HAL_TIM_Base_Start_IT+0x76>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a5e:	d018      	beq.n	8007a92 <HAL_TIM_Base_Start_IT+0x76>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a1f      	ldr	r2, [pc, #124]	@ (8007ae4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d013      	beq.n	8007a92 <HAL_TIM_Base_Start_IT+0x76>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8007ae8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d00e      	beq.n	8007a92 <HAL_TIM_Base_Start_IT+0x76>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a1c      	ldr	r2, [pc, #112]	@ (8007aec <HAL_TIM_Base_Start_IT+0xd0>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d009      	beq.n	8007a92 <HAL_TIM_Base_Start_IT+0x76>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a1b      	ldr	r2, [pc, #108]	@ (8007af0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d004      	beq.n	8007a92 <HAL_TIM_Base_Start_IT+0x76>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a19      	ldr	r2, [pc, #100]	@ (8007af4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d115      	bne.n	8007abe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	689a      	ldr	r2, [r3, #8]
 8007a98:	4b17      	ldr	r3, [pc, #92]	@ (8007af8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b06      	cmp	r3, #6
 8007aa2:	d015      	beq.n	8007ad0 <HAL_TIM_Base_Start_IT+0xb4>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007aaa:	d011      	beq.n	8007ad0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f042 0201 	orr.w	r2, r2, #1
 8007aba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007abc:	e008      	b.n	8007ad0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f042 0201 	orr.w	r2, r2, #1
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	e000      	b.n	8007ad2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ad0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	40012c00 	.word	0x40012c00
 8007ae4:	40000400 	.word	0x40000400
 8007ae8:	40000800 	.word	0x40000800
 8007aec:	40000c00 	.word	0x40000c00
 8007af0:	40013400 	.word	0x40013400
 8007af4:	40014000 	.word	0x40014000
 8007af8:	00010007 	.word	0x00010007

08007afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a46      	ldr	r2, [pc, #280]	@ (8007c28 <TIM_Base_SetConfig+0x12c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d013      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b1a:	d00f      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a43      	ldr	r2, [pc, #268]	@ (8007c2c <TIM_Base_SetConfig+0x130>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d00b      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a42      	ldr	r2, [pc, #264]	@ (8007c30 <TIM_Base_SetConfig+0x134>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d007      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a41      	ldr	r2, [pc, #260]	@ (8007c34 <TIM_Base_SetConfig+0x138>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d003      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a40      	ldr	r2, [pc, #256]	@ (8007c38 <TIM_Base_SetConfig+0x13c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d108      	bne.n	8007b4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a35      	ldr	r2, [pc, #212]	@ (8007c28 <TIM_Base_SetConfig+0x12c>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d01f      	beq.n	8007b96 <TIM_Base_SetConfig+0x9a>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b5c:	d01b      	beq.n	8007b96 <TIM_Base_SetConfig+0x9a>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a32      	ldr	r2, [pc, #200]	@ (8007c2c <TIM_Base_SetConfig+0x130>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d017      	beq.n	8007b96 <TIM_Base_SetConfig+0x9a>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a31      	ldr	r2, [pc, #196]	@ (8007c30 <TIM_Base_SetConfig+0x134>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d013      	beq.n	8007b96 <TIM_Base_SetConfig+0x9a>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a30      	ldr	r2, [pc, #192]	@ (8007c34 <TIM_Base_SetConfig+0x138>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d00f      	beq.n	8007b96 <TIM_Base_SetConfig+0x9a>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a2f      	ldr	r2, [pc, #188]	@ (8007c38 <TIM_Base_SetConfig+0x13c>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d00b      	beq.n	8007b96 <TIM_Base_SetConfig+0x9a>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a2e      	ldr	r2, [pc, #184]	@ (8007c3c <TIM_Base_SetConfig+0x140>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d007      	beq.n	8007b96 <TIM_Base_SetConfig+0x9a>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a2d      	ldr	r2, [pc, #180]	@ (8007c40 <TIM_Base_SetConfig+0x144>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d003      	beq.n	8007b96 <TIM_Base_SetConfig+0x9a>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a2c      	ldr	r2, [pc, #176]	@ (8007c44 <TIM_Base_SetConfig+0x148>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d108      	bne.n	8007ba8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	689a      	ldr	r2, [r3, #8]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a16      	ldr	r2, [pc, #88]	@ (8007c28 <TIM_Base_SetConfig+0x12c>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d00f      	beq.n	8007bf4 <TIM_Base_SetConfig+0xf8>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a18      	ldr	r2, [pc, #96]	@ (8007c38 <TIM_Base_SetConfig+0x13c>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d00b      	beq.n	8007bf4 <TIM_Base_SetConfig+0xf8>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a17      	ldr	r2, [pc, #92]	@ (8007c3c <TIM_Base_SetConfig+0x140>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d007      	beq.n	8007bf4 <TIM_Base_SetConfig+0xf8>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a16      	ldr	r2, [pc, #88]	@ (8007c40 <TIM_Base_SetConfig+0x144>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d003      	beq.n	8007bf4 <TIM_Base_SetConfig+0xf8>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a15      	ldr	r2, [pc, #84]	@ (8007c44 <TIM_Base_SetConfig+0x148>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d103      	bne.n	8007bfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	691a      	ldr	r2, [r3, #16]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d105      	bne.n	8007c1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	f023 0201 	bic.w	r2, r3, #1
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	611a      	str	r2, [r3, #16]
  }
}
 8007c1a:	bf00      	nop
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	40012c00 	.word	0x40012c00
 8007c2c:	40000400 	.word	0x40000400
 8007c30:	40000800 	.word	0x40000800
 8007c34:	40000c00 	.word	0x40000c00
 8007c38:	40013400 	.word	0x40013400
 8007c3c:	40014000 	.word	0x40014000
 8007c40:	40014400 	.word	0x40014400
 8007c44:	40014800 	.word	0x40014800

08007c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d101      	bne.n	8007c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	e068      	b.n	8007d32 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a2e      	ldr	r2, [pc, #184]	@ (8007d40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d004      	beq.n	8007c94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8007d44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d108      	bne.n	8007ca6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007c9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a1e      	ldr	r2, [pc, #120]	@ (8007d40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d01d      	beq.n	8007d06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cd2:	d018      	beq.n	8007d06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8007d48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d013      	beq.n	8007d06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a1a      	ldr	r2, [pc, #104]	@ (8007d4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d00e      	beq.n	8007d06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a18      	ldr	r2, [pc, #96]	@ (8007d50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d009      	beq.n	8007d06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a13      	ldr	r2, [pc, #76]	@ (8007d44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d004      	beq.n	8007d06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a14      	ldr	r2, [pc, #80]	@ (8007d54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d10c      	bne.n	8007d20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	40012c00 	.word	0x40012c00
 8007d44:	40013400 	.word	0x40013400
 8007d48:	40000400 	.word	0x40000400
 8007d4c:	40000800 	.word	0x40000800
 8007d50:	40000c00 	.word	0x40000c00
 8007d54:	40014000 	.word	0x40014000

08007d58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e040      	b.n	8007dec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d106      	bne.n	8007d80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7fa fad6 	bl	800232c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2224      	movs	r2, #36	@ 0x24
 8007d84:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 0201 	bic.w	r2, r2, #1
 8007d94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d002      	beq.n	8007da4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fae0 	bl	8008364 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f825 	bl	8007df4 <UART_SetConfig>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d101      	bne.n	8007db4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e01b      	b.n	8007dec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685a      	ldr	r2, [r3, #4]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007dc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	689a      	ldr	r2, [r3, #8]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007dd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f042 0201 	orr.w	r2, r2, #1
 8007de2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fb5f 	bl	80084a8 <UART_CheckIdleState>
 8007dea:	4603      	mov	r3, r0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007df8:	b08a      	sub	sp, #40	@ 0x28
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	689a      	ldr	r2, [r3, #8]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	431a      	orrs	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	431a      	orrs	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	4ba4      	ldr	r3, [pc, #656]	@ (80080b4 <UART_SetConfig+0x2c0>)
 8007e24:	4013      	ands	r3, r2
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	6812      	ldr	r2, [r2, #0]
 8007e2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007e2c:	430b      	orrs	r3, r1
 8007e2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	68da      	ldr	r2, [r3, #12]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a99      	ldr	r2, [pc, #612]	@ (80080b8 <UART_SetConfig+0x2c4>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d004      	beq.n	8007e60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e70:	430a      	orrs	r2, r1
 8007e72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a90      	ldr	r2, [pc, #576]	@ (80080bc <UART_SetConfig+0x2c8>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d126      	bne.n	8007ecc <UART_SetConfig+0xd8>
 8007e7e:	4b90      	ldr	r3, [pc, #576]	@ (80080c0 <UART_SetConfig+0x2cc>)
 8007e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e84:	f003 0303 	and.w	r3, r3, #3
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	d81b      	bhi.n	8007ec4 <UART_SetConfig+0xd0>
 8007e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e94 <UART_SetConfig+0xa0>)
 8007e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e92:	bf00      	nop
 8007e94:	08007ea5 	.word	0x08007ea5
 8007e98:	08007eb5 	.word	0x08007eb5
 8007e9c:	08007ead 	.word	0x08007ead
 8007ea0:	08007ebd 	.word	0x08007ebd
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007eaa:	e116      	b.n	80080da <UART_SetConfig+0x2e6>
 8007eac:	2302      	movs	r3, #2
 8007eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007eb2:	e112      	b.n	80080da <UART_SetConfig+0x2e6>
 8007eb4:	2304      	movs	r3, #4
 8007eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007eba:	e10e      	b.n	80080da <UART_SetConfig+0x2e6>
 8007ebc:	2308      	movs	r3, #8
 8007ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ec2:	e10a      	b.n	80080da <UART_SetConfig+0x2e6>
 8007ec4:	2310      	movs	r3, #16
 8007ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007eca:	e106      	b.n	80080da <UART_SetConfig+0x2e6>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a7c      	ldr	r2, [pc, #496]	@ (80080c4 <UART_SetConfig+0x2d0>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d138      	bne.n	8007f48 <UART_SetConfig+0x154>
 8007ed6:	4b7a      	ldr	r3, [pc, #488]	@ (80080c0 <UART_SetConfig+0x2cc>)
 8007ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007edc:	f003 030c 	and.w	r3, r3, #12
 8007ee0:	2b0c      	cmp	r3, #12
 8007ee2:	d82d      	bhi.n	8007f40 <UART_SetConfig+0x14c>
 8007ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8007eec <UART_SetConfig+0xf8>)
 8007ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eea:	bf00      	nop
 8007eec:	08007f21 	.word	0x08007f21
 8007ef0:	08007f41 	.word	0x08007f41
 8007ef4:	08007f41 	.word	0x08007f41
 8007ef8:	08007f41 	.word	0x08007f41
 8007efc:	08007f31 	.word	0x08007f31
 8007f00:	08007f41 	.word	0x08007f41
 8007f04:	08007f41 	.word	0x08007f41
 8007f08:	08007f41 	.word	0x08007f41
 8007f0c:	08007f29 	.word	0x08007f29
 8007f10:	08007f41 	.word	0x08007f41
 8007f14:	08007f41 	.word	0x08007f41
 8007f18:	08007f41 	.word	0x08007f41
 8007f1c:	08007f39 	.word	0x08007f39
 8007f20:	2300      	movs	r3, #0
 8007f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f26:	e0d8      	b.n	80080da <UART_SetConfig+0x2e6>
 8007f28:	2302      	movs	r3, #2
 8007f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f2e:	e0d4      	b.n	80080da <UART_SetConfig+0x2e6>
 8007f30:	2304      	movs	r3, #4
 8007f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f36:	e0d0      	b.n	80080da <UART_SetConfig+0x2e6>
 8007f38:	2308      	movs	r3, #8
 8007f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f3e:	e0cc      	b.n	80080da <UART_SetConfig+0x2e6>
 8007f40:	2310      	movs	r3, #16
 8007f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f46:	e0c8      	b.n	80080da <UART_SetConfig+0x2e6>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a5e      	ldr	r2, [pc, #376]	@ (80080c8 <UART_SetConfig+0x2d4>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d125      	bne.n	8007f9e <UART_SetConfig+0x1aa>
 8007f52:	4b5b      	ldr	r3, [pc, #364]	@ (80080c0 <UART_SetConfig+0x2cc>)
 8007f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f58:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007f5c:	2b30      	cmp	r3, #48	@ 0x30
 8007f5e:	d016      	beq.n	8007f8e <UART_SetConfig+0x19a>
 8007f60:	2b30      	cmp	r3, #48	@ 0x30
 8007f62:	d818      	bhi.n	8007f96 <UART_SetConfig+0x1a2>
 8007f64:	2b20      	cmp	r3, #32
 8007f66:	d00a      	beq.n	8007f7e <UART_SetConfig+0x18a>
 8007f68:	2b20      	cmp	r3, #32
 8007f6a:	d814      	bhi.n	8007f96 <UART_SetConfig+0x1a2>
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d002      	beq.n	8007f76 <UART_SetConfig+0x182>
 8007f70:	2b10      	cmp	r3, #16
 8007f72:	d008      	beq.n	8007f86 <UART_SetConfig+0x192>
 8007f74:	e00f      	b.n	8007f96 <UART_SetConfig+0x1a2>
 8007f76:	2300      	movs	r3, #0
 8007f78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f7c:	e0ad      	b.n	80080da <UART_SetConfig+0x2e6>
 8007f7e:	2302      	movs	r3, #2
 8007f80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f84:	e0a9      	b.n	80080da <UART_SetConfig+0x2e6>
 8007f86:	2304      	movs	r3, #4
 8007f88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f8c:	e0a5      	b.n	80080da <UART_SetConfig+0x2e6>
 8007f8e:	2308      	movs	r3, #8
 8007f90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f94:	e0a1      	b.n	80080da <UART_SetConfig+0x2e6>
 8007f96:	2310      	movs	r3, #16
 8007f98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f9c:	e09d      	b.n	80080da <UART_SetConfig+0x2e6>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a4a      	ldr	r2, [pc, #296]	@ (80080cc <UART_SetConfig+0x2d8>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d125      	bne.n	8007ff4 <UART_SetConfig+0x200>
 8007fa8:	4b45      	ldr	r3, [pc, #276]	@ (80080c0 <UART_SetConfig+0x2cc>)
 8007faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007fb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fb4:	d016      	beq.n	8007fe4 <UART_SetConfig+0x1f0>
 8007fb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fb8:	d818      	bhi.n	8007fec <UART_SetConfig+0x1f8>
 8007fba:	2b80      	cmp	r3, #128	@ 0x80
 8007fbc:	d00a      	beq.n	8007fd4 <UART_SetConfig+0x1e0>
 8007fbe:	2b80      	cmp	r3, #128	@ 0x80
 8007fc0:	d814      	bhi.n	8007fec <UART_SetConfig+0x1f8>
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d002      	beq.n	8007fcc <UART_SetConfig+0x1d8>
 8007fc6:	2b40      	cmp	r3, #64	@ 0x40
 8007fc8:	d008      	beq.n	8007fdc <UART_SetConfig+0x1e8>
 8007fca:	e00f      	b.n	8007fec <UART_SetConfig+0x1f8>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fd2:	e082      	b.n	80080da <UART_SetConfig+0x2e6>
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fda:	e07e      	b.n	80080da <UART_SetConfig+0x2e6>
 8007fdc:	2304      	movs	r3, #4
 8007fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fe2:	e07a      	b.n	80080da <UART_SetConfig+0x2e6>
 8007fe4:	2308      	movs	r3, #8
 8007fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fea:	e076      	b.n	80080da <UART_SetConfig+0x2e6>
 8007fec:	2310      	movs	r3, #16
 8007fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ff2:	e072      	b.n	80080da <UART_SetConfig+0x2e6>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a35      	ldr	r2, [pc, #212]	@ (80080d0 <UART_SetConfig+0x2dc>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d12a      	bne.n	8008054 <UART_SetConfig+0x260>
 8007ffe:	4b30      	ldr	r3, [pc, #192]	@ (80080c0 <UART_SetConfig+0x2cc>)
 8008000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008004:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008008:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800800c:	d01a      	beq.n	8008044 <UART_SetConfig+0x250>
 800800e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008012:	d81b      	bhi.n	800804c <UART_SetConfig+0x258>
 8008014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008018:	d00c      	beq.n	8008034 <UART_SetConfig+0x240>
 800801a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800801e:	d815      	bhi.n	800804c <UART_SetConfig+0x258>
 8008020:	2b00      	cmp	r3, #0
 8008022:	d003      	beq.n	800802c <UART_SetConfig+0x238>
 8008024:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008028:	d008      	beq.n	800803c <UART_SetConfig+0x248>
 800802a:	e00f      	b.n	800804c <UART_SetConfig+0x258>
 800802c:	2300      	movs	r3, #0
 800802e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008032:	e052      	b.n	80080da <UART_SetConfig+0x2e6>
 8008034:	2302      	movs	r3, #2
 8008036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800803a:	e04e      	b.n	80080da <UART_SetConfig+0x2e6>
 800803c:	2304      	movs	r3, #4
 800803e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008042:	e04a      	b.n	80080da <UART_SetConfig+0x2e6>
 8008044:	2308      	movs	r3, #8
 8008046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800804a:	e046      	b.n	80080da <UART_SetConfig+0x2e6>
 800804c:	2310      	movs	r3, #16
 800804e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008052:	e042      	b.n	80080da <UART_SetConfig+0x2e6>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a17      	ldr	r2, [pc, #92]	@ (80080b8 <UART_SetConfig+0x2c4>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d13a      	bne.n	80080d4 <UART_SetConfig+0x2e0>
 800805e:	4b18      	ldr	r3, [pc, #96]	@ (80080c0 <UART_SetConfig+0x2cc>)
 8008060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008064:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008068:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800806c:	d01a      	beq.n	80080a4 <UART_SetConfig+0x2b0>
 800806e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008072:	d81b      	bhi.n	80080ac <UART_SetConfig+0x2b8>
 8008074:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008078:	d00c      	beq.n	8008094 <UART_SetConfig+0x2a0>
 800807a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800807e:	d815      	bhi.n	80080ac <UART_SetConfig+0x2b8>
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <UART_SetConfig+0x298>
 8008084:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008088:	d008      	beq.n	800809c <UART_SetConfig+0x2a8>
 800808a:	e00f      	b.n	80080ac <UART_SetConfig+0x2b8>
 800808c:	2300      	movs	r3, #0
 800808e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008092:	e022      	b.n	80080da <UART_SetConfig+0x2e6>
 8008094:	2302      	movs	r3, #2
 8008096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800809a:	e01e      	b.n	80080da <UART_SetConfig+0x2e6>
 800809c:	2304      	movs	r3, #4
 800809e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080a2:	e01a      	b.n	80080da <UART_SetConfig+0x2e6>
 80080a4:	2308      	movs	r3, #8
 80080a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080aa:	e016      	b.n	80080da <UART_SetConfig+0x2e6>
 80080ac:	2310      	movs	r3, #16
 80080ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080b2:	e012      	b.n	80080da <UART_SetConfig+0x2e6>
 80080b4:	efff69f3 	.word	0xefff69f3
 80080b8:	40008000 	.word	0x40008000
 80080bc:	40013800 	.word	0x40013800
 80080c0:	40021000 	.word	0x40021000
 80080c4:	40004400 	.word	0x40004400
 80080c8:	40004800 	.word	0x40004800
 80080cc:	40004c00 	.word	0x40004c00
 80080d0:	40005000 	.word	0x40005000
 80080d4:	2310      	movs	r3, #16
 80080d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a9f      	ldr	r2, [pc, #636]	@ (800835c <UART_SetConfig+0x568>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d17a      	bne.n	80081da <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80080e8:	2b08      	cmp	r3, #8
 80080ea:	d824      	bhi.n	8008136 <UART_SetConfig+0x342>
 80080ec:	a201      	add	r2, pc, #4	@ (adr r2, 80080f4 <UART_SetConfig+0x300>)
 80080ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f2:	bf00      	nop
 80080f4:	08008119 	.word	0x08008119
 80080f8:	08008137 	.word	0x08008137
 80080fc:	08008121 	.word	0x08008121
 8008100:	08008137 	.word	0x08008137
 8008104:	08008127 	.word	0x08008127
 8008108:	08008137 	.word	0x08008137
 800810c:	08008137 	.word	0x08008137
 8008110:	08008137 	.word	0x08008137
 8008114:	0800812f 	.word	0x0800812f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008118:	f7fe fe2e 	bl	8006d78 <HAL_RCC_GetPCLK1Freq>
 800811c:	61f8      	str	r0, [r7, #28]
        break;
 800811e:	e010      	b.n	8008142 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008120:	4b8f      	ldr	r3, [pc, #572]	@ (8008360 <UART_SetConfig+0x56c>)
 8008122:	61fb      	str	r3, [r7, #28]
        break;
 8008124:	e00d      	b.n	8008142 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008126:	f7fe fd8f 	bl	8006c48 <HAL_RCC_GetSysClockFreq>
 800812a:	61f8      	str	r0, [r7, #28]
        break;
 800812c:	e009      	b.n	8008142 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800812e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008132:	61fb      	str	r3, [r7, #28]
        break;
 8008134:	e005      	b.n	8008142 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008136:	2300      	movs	r3, #0
 8008138:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008140:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 80fb 	beq.w	8008340 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	685a      	ldr	r2, [r3, #4]
 800814e:	4613      	mov	r3, r2
 8008150:	005b      	lsls	r3, r3, #1
 8008152:	4413      	add	r3, r2
 8008154:	69fa      	ldr	r2, [r7, #28]
 8008156:	429a      	cmp	r2, r3
 8008158:	d305      	bcc.n	8008166 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008160:	69fa      	ldr	r2, [r7, #28]
 8008162:	429a      	cmp	r2, r3
 8008164:	d903      	bls.n	800816e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800816c:	e0e8      	b.n	8008340 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	2200      	movs	r2, #0
 8008172:	461c      	mov	r4, r3
 8008174:	4615      	mov	r5, r2
 8008176:	f04f 0200 	mov.w	r2, #0
 800817a:	f04f 0300 	mov.w	r3, #0
 800817e:	022b      	lsls	r3, r5, #8
 8008180:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008184:	0222      	lsls	r2, r4, #8
 8008186:	68f9      	ldr	r1, [r7, #12]
 8008188:	6849      	ldr	r1, [r1, #4]
 800818a:	0849      	lsrs	r1, r1, #1
 800818c:	2000      	movs	r0, #0
 800818e:	4688      	mov	r8, r1
 8008190:	4681      	mov	r9, r0
 8008192:	eb12 0a08 	adds.w	sl, r2, r8
 8008196:	eb43 0b09 	adc.w	fp, r3, r9
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	603b      	str	r3, [r7, #0]
 80081a2:	607a      	str	r2, [r7, #4]
 80081a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081a8:	4650      	mov	r0, sl
 80081aa:	4659      	mov	r1, fp
 80081ac:	f7f8 fd4c 	bl	8000c48 <__aeabi_uldivmod>
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	4613      	mov	r3, r2
 80081b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081be:	d308      	bcc.n	80081d2 <UART_SetConfig+0x3de>
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081c6:	d204      	bcs.n	80081d2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	69ba      	ldr	r2, [r7, #24]
 80081ce:	60da      	str	r2, [r3, #12]
 80081d0:	e0b6      	b.n	8008340 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80081d8:	e0b2      	b.n	8008340 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	69db      	ldr	r3, [r3, #28]
 80081de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081e2:	d15e      	bne.n	80082a2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80081e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80081e8:	2b08      	cmp	r3, #8
 80081ea:	d828      	bhi.n	800823e <UART_SetConfig+0x44a>
 80081ec:	a201      	add	r2, pc, #4	@ (adr r2, 80081f4 <UART_SetConfig+0x400>)
 80081ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f2:	bf00      	nop
 80081f4:	08008219 	.word	0x08008219
 80081f8:	08008221 	.word	0x08008221
 80081fc:	08008229 	.word	0x08008229
 8008200:	0800823f 	.word	0x0800823f
 8008204:	0800822f 	.word	0x0800822f
 8008208:	0800823f 	.word	0x0800823f
 800820c:	0800823f 	.word	0x0800823f
 8008210:	0800823f 	.word	0x0800823f
 8008214:	08008237 	.word	0x08008237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008218:	f7fe fdae 	bl	8006d78 <HAL_RCC_GetPCLK1Freq>
 800821c:	61f8      	str	r0, [r7, #28]
        break;
 800821e:	e014      	b.n	800824a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008220:	f7fe fdc0 	bl	8006da4 <HAL_RCC_GetPCLK2Freq>
 8008224:	61f8      	str	r0, [r7, #28]
        break;
 8008226:	e010      	b.n	800824a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008228:	4b4d      	ldr	r3, [pc, #308]	@ (8008360 <UART_SetConfig+0x56c>)
 800822a:	61fb      	str	r3, [r7, #28]
        break;
 800822c:	e00d      	b.n	800824a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800822e:	f7fe fd0b 	bl	8006c48 <HAL_RCC_GetSysClockFreq>
 8008232:	61f8      	str	r0, [r7, #28]
        break;
 8008234:	e009      	b.n	800824a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800823a:	61fb      	str	r3, [r7, #28]
        break;
 800823c:	e005      	b.n	800824a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008248:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d077      	beq.n	8008340 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	005a      	lsls	r2, r3, #1
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	085b      	lsrs	r3, r3, #1
 800825a:	441a      	add	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	fbb2 f3f3 	udiv	r3, r2, r3
 8008264:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	2b0f      	cmp	r3, #15
 800826a:	d916      	bls.n	800829a <UART_SetConfig+0x4a6>
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008272:	d212      	bcs.n	800829a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	b29b      	uxth	r3, r3
 8008278:	f023 030f 	bic.w	r3, r3, #15
 800827c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	085b      	lsrs	r3, r3, #1
 8008282:	b29b      	uxth	r3, r3
 8008284:	f003 0307 	and.w	r3, r3, #7
 8008288:	b29a      	uxth	r2, r3
 800828a:	8afb      	ldrh	r3, [r7, #22]
 800828c:	4313      	orrs	r3, r2
 800828e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	8afa      	ldrh	r2, [r7, #22]
 8008296:	60da      	str	r2, [r3, #12]
 8008298:	e052      	b.n	8008340 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80082a0:	e04e      	b.n	8008340 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80082a6:	2b08      	cmp	r3, #8
 80082a8:	d827      	bhi.n	80082fa <UART_SetConfig+0x506>
 80082aa:	a201      	add	r2, pc, #4	@ (adr r2, 80082b0 <UART_SetConfig+0x4bc>)
 80082ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b0:	080082d5 	.word	0x080082d5
 80082b4:	080082dd 	.word	0x080082dd
 80082b8:	080082e5 	.word	0x080082e5
 80082bc:	080082fb 	.word	0x080082fb
 80082c0:	080082eb 	.word	0x080082eb
 80082c4:	080082fb 	.word	0x080082fb
 80082c8:	080082fb 	.word	0x080082fb
 80082cc:	080082fb 	.word	0x080082fb
 80082d0:	080082f3 	.word	0x080082f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082d4:	f7fe fd50 	bl	8006d78 <HAL_RCC_GetPCLK1Freq>
 80082d8:	61f8      	str	r0, [r7, #28]
        break;
 80082da:	e014      	b.n	8008306 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082dc:	f7fe fd62 	bl	8006da4 <HAL_RCC_GetPCLK2Freq>
 80082e0:	61f8      	str	r0, [r7, #28]
        break;
 80082e2:	e010      	b.n	8008306 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082e4:	4b1e      	ldr	r3, [pc, #120]	@ (8008360 <UART_SetConfig+0x56c>)
 80082e6:	61fb      	str	r3, [r7, #28]
        break;
 80082e8:	e00d      	b.n	8008306 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082ea:	f7fe fcad 	bl	8006c48 <HAL_RCC_GetSysClockFreq>
 80082ee:	61f8      	str	r0, [r7, #28]
        break;
 80082f0:	e009      	b.n	8008306 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082f6:	61fb      	str	r3, [r7, #28]
        break;
 80082f8:	e005      	b.n	8008306 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80082fa:	2300      	movs	r3, #0
 80082fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008304:	bf00      	nop
    }

    if (pclk != 0U)
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d019      	beq.n	8008340 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	085a      	lsrs	r2, r3, #1
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	441a      	add	r2, r3
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	fbb2 f3f3 	udiv	r3, r2, r3
 800831e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	2b0f      	cmp	r3, #15
 8008324:	d909      	bls.n	800833a <UART_SetConfig+0x546>
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800832c:	d205      	bcs.n	800833a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	b29a      	uxth	r2, r3
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	60da      	str	r2, [r3, #12]
 8008338:	e002      	b.n	8008340 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800834c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008350:	4618      	mov	r0, r3
 8008352:	3728      	adds	r7, #40	@ 0x28
 8008354:	46bd      	mov	sp, r7
 8008356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800835a:	bf00      	nop
 800835c:	40008000 	.word	0x40008000
 8008360:	00f42400 	.word	0x00f42400

08008364 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008370:	f003 0308 	and.w	r3, r3, #8
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00a      	beq.n	800838e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	430a      	orrs	r2, r1
 800838c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00a      	beq.n	80083b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	430a      	orrs	r2, r1
 80083ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b4:	f003 0302 	and.w	r3, r3, #2
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00a      	beq.n	80083d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	430a      	orrs	r2, r1
 80083d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083d6:	f003 0304 	and.w	r3, r3, #4
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f8:	f003 0310 	and.w	r3, r3, #16
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00a      	beq.n	8008416 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	430a      	orrs	r2, r1
 8008414:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841a:	f003 0320 	and.w	r3, r3, #32
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00a      	beq.n	8008438 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	430a      	orrs	r2, r1
 8008436:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800843c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008440:	2b00      	cmp	r3, #0
 8008442:	d01a      	beq.n	800847a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800845e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008462:	d10a      	bne.n	800847a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	430a      	orrs	r2, r1
 8008478:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800847e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00a      	beq.n	800849c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	430a      	orrs	r2, r1
 800849a:	605a      	str	r2, [r3, #4]
  }
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b098      	sub	sp, #96	@ 0x60
 80084ac:	af02      	add	r7, sp, #8
 80084ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084b8:	f7fa fa64 	bl	8002984 <HAL_GetTick>
 80084bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 0308 	and.w	r3, r3, #8
 80084c8:	2b08      	cmp	r3, #8
 80084ca:	d12e      	bne.n	800852a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084d4:	2200      	movs	r2, #0
 80084d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f88c 	bl	80085f8 <UART_WaitOnFlagUntilTimeout>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d021      	beq.n	800852a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ee:	e853 3f00 	ldrex	r3, [r3]
 80084f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	461a      	mov	r2, r3
 8008502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008504:	647b      	str	r3, [r7, #68]	@ 0x44
 8008506:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008508:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800850a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800850c:	e841 2300 	strex	r3, r2, [r1]
 8008510:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1e6      	bne.n	80084e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2220      	movs	r2, #32
 800851c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e062      	b.n	80085f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0304 	and.w	r3, r3, #4
 8008534:	2b04      	cmp	r3, #4
 8008536:	d149      	bne.n	80085cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008538:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008540:	2200      	movs	r2, #0
 8008542:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f856 	bl	80085f8 <UART_WaitOnFlagUntilTimeout>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d03c      	beq.n	80085cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855a:	e853 3f00 	ldrex	r3, [r3]
 800855e:	623b      	str	r3, [r7, #32]
   return(result);
 8008560:	6a3b      	ldr	r3, [r7, #32]
 8008562:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008566:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	461a      	mov	r2, r3
 800856e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008570:	633b      	str	r3, [r7, #48]	@ 0x30
 8008572:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008574:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008576:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008578:	e841 2300 	strex	r3, r2, [r1]
 800857c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800857e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1e6      	bne.n	8008552 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	3308      	adds	r3, #8
 800858a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	e853 3f00 	ldrex	r3, [r3]
 8008592:	60fb      	str	r3, [r7, #12]
   return(result);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f023 0301 	bic.w	r3, r3, #1
 800859a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3308      	adds	r3, #8
 80085a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085a4:	61fa      	str	r2, [r7, #28]
 80085a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a8:	69b9      	ldr	r1, [r7, #24]
 80085aa:	69fa      	ldr	r2, [r7, #28]
 80085ac:	e841 2300 	strex	r3, r2, [r1]
 80085b0:	617b      	str	r3, [r7, #20]
   return(result);
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1e5      	bne.n	8008584 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2220      	movs	r2, #32
 80085bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085c8:	2303      	movs	r3, #3
 80085ca:	e011      	b.n	80085f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2220      	movs	r2, #32
 80085d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2220      	movs	r2, #32
 80085d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3758      	adds	r7, #88	@ 0x58
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	603b      	str	r3, [r7, #0]
 8008604:	4613      	mov	r3, r2
 8008606:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008608:	e04f      	b.n	80086aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008610:	d04b      	beq.n	80086aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008612:	f7fa f9b7 	bl	8002984 <HAL_GetTick>
 8008616:	4602      	mov	r2, r0
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	1ad3      	subs	r3, r2, r3
 800861c:	69ba      	ldr	r2, [r7, #24]
 800861e:	429a      	cmp	r2, r3
 8008620:	d302      	bcc.n	8008628 <UART_WaitOnFlagUntilTimeout+0x30>
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d101      	bne.n	800862c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	e04e      	b.n	80086ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0304 	and.w	r3, r3, #4
 8008636:	2b00      	cmp	r3, #0
 8008638:	d037      	beq.n	80086aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	2b80      	cmp	r3, #128	@ 0x80
 800863e:	d034      	beq.n	80086aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	2b40      	cmp	r3, #64	@ 0x40
 8008644:	d031      	beq.n	80086aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	69db      	ldr	r3, [r3, #28]
 800864c:	f003 0308 	and.w	r3, r3, #8
 8008650:	2b08      	cmp	r3, #8
 8008652:	d110      	bne.n	8008676 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2208      	movs	r2, #8
 800865a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 f838 	bl	80086d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2208      	movs	r2, #8
 8008666:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e029      	b.n	80086ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	69db      	ldr	r3, [r3, #28]
 800867c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008680:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008684:	d111      	bne.n	80086aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800868e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f000 f81e 	bl	80086d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2220      	movs	r2, #32
 800869a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e00f      	b.n	80086ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	69da      	ldr	r2, [r3, #28]
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	4013      	ands	r3, r2
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	bf0c      	ite	eq
 80086ba:	2301      	moveq	r3, #1
 80086bc:	2300      	movne	r3, #0
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	461a      	mov	r2, r3
 80086c2:	79fb      	ldrb	r3, [r7, #7]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d0a0      	beq.n	800860a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b095      	sub	sp, #84	@ 0x54
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086e2:	e853 3f00 	ldrex	r3, [r3]
 80086e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80086e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	461a      	mov	r2, r3
 80086f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80086fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80086fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008700:	e841 2300 	strex	r3, r2, [r1]
 8008704:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1e6      	bne.n	80086da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3308      	adds	r3, #8
 8008712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008714:	6a3b      	ldr	r3, [r7, #32]
 8008716:	e853 3f00 	ldrex	r3, [r3]
 800871a:	61fb      	str	r3, [r7, #28]
   return(result);
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	f023 0301 	bic.w	r3, r3, #1
 8008722:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	3308      	adds	r3, #8
 800872a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800872c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800872e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008730:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008732:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008734:	e841 2300 	strex	r3, r2, [r1]
 8008738:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800873a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e5      	bne.n	800870c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008744:	2b01      	cmp	r3, #1
 8008746:	d118      	bne.n	800877a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	e853 3f00 	ldrex	r3, [r3]
 8008754:	60bb      	str	r3, [r7, #8]
   return(result);
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	f023 0310 	bic.w	r3, r3, #16
 800875c:	647b      	str	r3, [r7, #68]	@ 0x44
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	461a      	mov	r2, r3
 8008764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008766:	61bb      	str	r3, [r7, #24]
 8008768:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876a:	6979      	ldr	r1, [r7, #20]
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	e841 2300 	strex	r3, r2, [r1]
 8008772:	613b      	str	r3, [r7, #16]
   return(result);
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1e6      	bne.n	8008748 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2220      	movs	r2, #32
 800877e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800878e:	bf00      	nop
 8008790:	3754      	adds	r7, #84	@ 0x54
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800879a:	b084      	sub	sp, #16
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	f107 001c 	add.w	r0, r7, #28
 80087a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f001 fa25 	bl	8009c08 <USB_CoreReset>
 80087be:	4603      	mov	r3, r0
 80087c0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80087c2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d106      	bne.n	80087d8 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80087d6:	e005      	b.n	80087e4 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087f0:	b004      	add	sp, #16
 80087f2:	4770      	bx	lr

080087f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b087      	sub	sp, #28
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	4613      	mov	r3, r2
 8008800:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008802:	79fb      	ldrb	r3, [r7, #7]
 8008804:	2b02      	cmp	r3, #2
 8008806:	d165      	bne.n	80088d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	4a3e      	ldr	r2, [pc, #248]	@ (8008904 <USB_SetTurnaroundTime+0x110>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d906      	bls.n	800881e <USB_SetTurnaroundTime+0x2a>
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	4a3d      	ldr	r2, [pc, #244]	@ (8008908 <USB_SetTurnaroundTime+0x114>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d202      	bcs.n	800881e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008818:	230f      	movs	r3, #15
 800881a:	617b      	str	r3, [r7, #20]
 800881c:	e05c      	b.n	80088d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	4a39      	ldr	r2, [pc, #228]	@ (8008908 <USB_SetTurnaroundTime+0x114>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d306      	bcc.n	8008834 <USB_SetTurnaroundTime+0x40>
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	4a38      	ldr	r2, [pc, #224]	@ (800890c <USB_SetTurnaroundTime+0x118>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d202      	bcs.n	8008834 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800882e:	230e      	movs	r3, #14
 8008830:	617b      	str	r3, [r7, #20]
 8008832:	e051      	b.n	80088d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	4a35      	ldr	r2, [pc, #212]	@ (800890c <USB_SetTurnaroundTime+0x118>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d306      	bcc.n	800884a <USB_SetTurnaroundTime+0x56>
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	4a34      	ldr	r2, [pc, #208]	@ (8008910 <USB_SetTurnaroundTime+0x11c>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d202      	bcs.n	800884a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008844:	230d      	movs	r3, #13
 8008846:	617b      	str	r3, [r7, #20]
 8008848:	e046      	b.n	80088d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	4a30      	ldr	r2, [pc, #192]	@ (8008910 <USB_SetTurnaroundTime+0x11c>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d306      	bcc.n	8008860 <USB_SetTurnaroundTime+0x6c>
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	4a2f      	ldr	r2, [pc, #188]	@ (8008914 <USB_SetTurnaroundTime+0x120>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d802      	bhi.n	8008860 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800885a:	230c      	movs	r3, #12
 800885c:	617b      	str	r3, [r7, #20]
 800885e:	e03b      	b.n	80088d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	4a2c      	ldr	r2, [pc, #176]	@ (8008914 <USB_SetTurnaroundTime+0x120>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d906      	bls.n	8008876 <USB_SetTurnaroundTime+0x82>
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	4a2b      	ldr	r2, [pc, #172]	@ (8008918 <USB_SetTurnaroundTime+0x124>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d802      	bhi.n	8008876 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008870:	230b      	movs	r3, #11
 8008872:	617b      	str	r3, [r7, #20]
 8008874:	e030      	b.n	80088d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	4a27      	ldr	r2, [pc, #156]	@ (8008918 <USB_SetTurnaroundTime+0x124>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d906      	bls.n	800888c <USB_SetTurnaroundTime+0x98>
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	4a26      	ldr	r2, [pc, #152]	@ (800891c <USB_SetTurnaroundTime+0x128>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d802      	bhi.n	800888c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008886:	230a      	movs	r3, #10
 8008888:	617b      	str	r3, [r7, #20]
 800888a:	e025      	b.n	80088d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	4a23      	ldr	r2, [pc, #140]	@ (800891c <USB_SetTurnaroundTime+0x128>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d906      	bls.n	80088a2 <USB_SetTurnaroundTime+0xae>
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	4a22      	ldr	r2, [pc, #136]	@ (8008920 <USB_SetTurnaroundTime+0x12c>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d202      	bcs.n	80088a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800889c:	2309      	movs	r3, #9
 800889e:	617b      	str	r3, [r7, #20]
 80088a0:	e01a      	b.n	80088d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	4a1e      	ldr	r2, [pc, #120]	@ (8008920 <USB_SetTurnaroundTime+0x12c>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d306      	bcc.n	80088b8 <USB_SetTurnaroundTime+0xc4>
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	4a1d      	ldr	r2, [pc, #116]	@ (8008924 <USB_SetTurnaroundTime+0x130>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d802      	bhi.n	80088b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80088b2:	2308      	movs	r3, #8
 80088b4:	617b      	str	r3, [r7, #20]
 80088b6:	e00f      	b.n	80088d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	4a1a      	ldr	r2, [pc, #104]	@ (8008924 <USB_SetTurnaroundTime+0x130>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d906      	bls.n	80088ce <USB_SetTurnaroundTime+0xda>
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	4a19      	ldr	r2, [pc, #100]	@ (8008928 <USB_SetTurnaroundTime+0x134>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d202      	bcs.n	80088ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80088c8:	2307      	movs	r3, #7
 80088ca:	617b      	str	r3, [r7, #20]
 80088cc:	e004      	b.n	80088d8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80088ce:	2306      	movs	r3, #6
 80088d0:	617b      	str	r3, [r7, #20]
 80088d2:	e001      	b.n	80088d8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80088d4:	2309      	movs	r3, #9
 80088d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	68da      	ldr	r2, [r3, #12]
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	029b      	lsls	r3, r3, #10
 80088ec:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80088f0:	431a      	orrs	r2, r3
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	371c      	adds	r7, #28
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr
 8008904:	00d8acbf 	.word	0x00d8acbf
 8008908:	00e4e1c0 	.word	0x00e4e1c0
 800890c:	00f42400 	.word	0x00f42400
 8008910:	01067380 	.word	0x01067380
 8008914:	011a499f 	.word	0x011a499f
 8008918:	01312cff 	.word	0x01312cff
 800891c:	014ca43f 	.word	0x014ca43f
 8008920:	016e3600 	.word	0x016e3600
 8008924:	01a6ab1f 	.word	0x01a6ab1f
 8008928:	01e84800 	.word	0x01e84800

0800892c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	f043 0201 	orr.w	r2, r3, #1
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	370c      	adds	r7, #12
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr

0800894e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800894e:	b480      	push	{r7}
 8008950:	b083      	sub	sp, #12
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	f023 0201 	bic.w	r2, r3, #1
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	460b      	mov	r3, r1
 800897a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800897c:	2300      	movs	r3, #0
 800897e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800898c:	78fb      	ldrb	r3, [r7, #3]
 800898e:	2b01      	cmp	r3, #1
 8008990:	d115      	bne.n	80089be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800899e:	200a      	movs	r0, #10
 80089a0:	f7f9 fffc 	bl	800299c <HAL_Delay>
      ms += 10U;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	330a      	adds	r3, #10
 80089a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f001 f8b3 	bl	8009b16 <USB_GetMode>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d01e      	beq.n	80089f4 <USB_SetCurrentMode+0x84>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2bc7      	cmp	r3, #199	@ 0xc7
 80089ba:	d9f0      	bls.n	800899e <USB_SetCurrentMode+0x2e>
 80089bc:	e01a      	b.n	80089f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80089be:	78fb      	ldrb	r3, [r7, #3]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d115      	bne.n	80089f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80089d0:	200a      	movs	r0, #10
 80089d2:	f7f9 ffe3 	bl	800299c <HAL_Delay>
      ms += 10U;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	330a      	adds	r3, #10
 80089da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f001 f89a 	bl	8009b16 <USB_GetMode>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d005      	beq.n	80089f4 <USB_SetCurrentMode+0x84>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2bc7      	cmp	r3, #199	@ 0xc7
 80089ec:	d9f0      	bls.n	80089d0 <USB_SetCurrentMode+0x60>
 80089ee:	e001      	b.n	80089f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e005      	b.n	8008a00 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2bc8      	cmp	r3, #200	@ 0xc8
 80089f8:	d101      	bne.n	80089fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e000      	b.n	8008a00 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a08:	b084      	sub	sp, #16
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b086      	sub	sp, #24
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
 8008a12:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008a16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008a22:	2300      	movs	r3, #0
 8008a24:	613b      	str	r3, [r7, #16]
 8008a26:	e009      	b.n	8008a3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	3340      	adds	r3, #64	@ 0x40
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4413      	add	r3, r2
 8008a32:	2200      	movs	r2, #0
 8008a34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	613b      	str	r3, [r7, #16]
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	2b0e      	cmp	r3, #14
 8008a40:	d9f2      	bls.n	8008a28 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008a42:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d11c      	bne.n	8008a84 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a58:	f043 0302 	orr.w	r3, r3, #2
 8008a5c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a62:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	601a      	str	r2, [r3, #0]
 8008a82:	e005      	b.n	8008a90 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a88:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008a96:	461a      	mov	r2, r3
 8008a98:	2300      	movs	r3, #0
 8008a9a:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008a9c:	2103      	movs	r1, #3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f95a 	bl	8008d58 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008aa4:	2110      	movs	r1, #16
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f8f6 	bl	8008c98 <USB_FlushTxFifo>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f920 	bl	8008cfc <USB_FlushRxFifo>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008acc:	461a      	mov	r2, r3
 8008ace:	2300      	movs	r3, #0
 8008ad0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ad8:	461a      	mov	r2, r3
 8008ada:	2300      	movs	r3, #0
 8008adc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008aea:	2300      	movs	r3, #0
 8008aec:	613b      	str	r3, [r7, #16]
 8008aee:	e043      	b.n	8008b78 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	015a      	lsls	r2, r3, #5
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	4413      	add	r3, r2
 8008af8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b06:	d118      	bne.n	8008b3a <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10a      	bne.n	8008b24 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008b20:	6013      	str	r3, [r2, #0]
 8008b22:	e013      	b.n	8008b4c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	015a      	lsls	r2, r3, #5
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b30:	461a      	mov	r2, r3
 8008b32:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	e008      	b.n	8008b4c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	015a      	lsls	r2, r3, #5
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b46:	461a      	mov	r2, r3
 8008b48:	2300      	movs	r3, #0
 8008b4a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	015a      	lsls	r2, r3, #5
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	4413      	add	r3, r2
 8008b54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b58:	461a      	mov	r2, r3
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	015a      	lsls	r2, r3, #5
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	4413      	add	r3, r2
 8008b66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008b70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	3301      	adds	r3, #1
 8008b76:	613b      	str	r3, [r7, #16]
 8008b78:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d3b5      	bcc.n	8008af0 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b84:	2300      	movs	r3, #0
 8008b86:	613b      	str	r3, [r7, #16]
 8008b88:	e043      	b.n	8008c12 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ba0:	d118      	bne.n	8008bd4 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10a      	bne.n	8008bbe <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	015a      	lsls	r2, r3, #5
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	4413      	add	r3, r2
 8008bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008bba:	6013      	str	r3, [r2, #0]
 8008bbc:	e013      	b.n	8008be6 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	015a      	lsls	r2, r3, #5
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bca:	461a      	mov	r2, r3
 8008bcc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008bd0:	6013      	str	r3, [r2, #0]
 8008bd2:	e008      	b.n	8008be6 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	015a      	lsls	r2, r3, #5
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	4413      	add	r3, r2
 8008bdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008be0:	461a      	mov	r2, r3
 8008be2:	2300      	movs	r3, #0
 8008be4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	015a      	lsls	r2, r3, #5
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	4413      	add	r3, r2
 8008bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	015a      	lsls	r2, r3, #5
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	4413      	add	r3, r2
 8008c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c04:	461a      	mov	r2, r3
 8008c06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008c0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	613b      	str	r3, [r7, #16]
 8008c12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008c16:	461a      	mov	r2, r3
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d3b5      	bcc.n	8008b8a <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c30:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008c3e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	699b      	ldr	r3, [r3, #24]
 8008c44:	f043 0210 	orr.w	r2, r3, #16
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	699a      	ldr	r2, [r3, #24]
 8008c50:	4b10      	ldr	r3, [pc, #64]	@ (8008c94 <USB_DevInit+0x28c>)
 8008c52:	4313      	orrs	r3, r2
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008c58:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d005      	beq.n	8008c6c <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	f043 0208 	orr.w	r2, r3, #8
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008c6c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d107      	bne.n	8008c84 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c7c:	f043 0304 	orr.w	r3, r3, #4
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3718      	adds	r7, #24
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c90:	b004      	add	sp, #16
 8008c92:	4770      	bx	lr
 8008c94:	803c3800 	.word	0x803c3800

08008c98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008cb2:	d901      	bls.n	8008cb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	e01b      	b.n	8008cf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	daf2      	bge.n	8008ca6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	019b      	lsls	r3, r3, #6
 8008cc8:	f043 0220 	orr.w	r2, r3, #32
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008cdc:	d901      	bls.n	8008ce2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e006      	b.n	8008cf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	f003 0320 	and.w	r3, r3, #32
 8008cea:	2b20      	cmp	r3, #32
 8008cec:	d0f0      	beq.n	8008cd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d04:	2300      	movs	r3, #0
 8008d06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008d14:	d901      	bls.n	8008d1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008d16:	2303      	movs	r3, #3
 8008d18:	e018      	b.n	8008d4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	daf2      	bge.n	8008d08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008d22:	2300      	movs	r3, #0
 8008d24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2210      	movs	r2, #16
 8008d2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008d38:	d901      	bls.n	8008d3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e006      	b.n	8008d4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	f003 0310 	and.w	r3, r3, #16
 8008d46:	2b10      	cmp	r3, #16
 8008d48:	d0f0      	beq.n	8008d2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3714      	adds	r7, #20
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	460b      	mov	r3, r1
 8008d62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	78fb      	ldrb	r3, [r7, #3]
 8008d72:	68f9      	ldr	r1, [r7, #12]
 8008d74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3714      	adds	r7, #20
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b087      	sub	sp, #28
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	f003 0306 	and.w	r3, r3, #6
 8008da2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d002      	beq.n	8008db0 <USB_GetDevSpeed+0x26>
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2b06      	cmp	r3, #6
 8008dae:	d102      	bne.n	8008db6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008db0:	2302      	movs	r3, #2
 8008db2:	75fb      	strb	r3, [r7, #23]
 8008db4:	e001      	b.n	8008dba <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8008db6:	230f      	movs	r3, #15
 8008db8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	371c      	adds	r7, #28
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	785b      	ldrb	r3, [r3, #1]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d13a      	bne.n	8008e5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dea:	69da      	ldr	r2, [r3, #28]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	f003 030f 	and.w	r3, r3, #15
 8008df4:	2101      	movs	r1, #1
 8008df6:	fa01 f303 	lsl.w	r3, r1, r3
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	68f9      	ldr	r1, [r7, #12]
 8008dfe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e02:	4313      	orrs	r3, r2
 8008e04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d155      	bne.n	8008ec8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	015a      	lsls	r2, r3, #5
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4413      	add	r3, r2
 8008e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	791b      	ldrb	r3, [r3, #4]
 8008e36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	059b      	lsls	r3, r3, #22
 8008e3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e40:	4313      	orrs	r3, r2
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	0151      	lsls	r1, r2, #5
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	440a      	add	r2, r1
 8008e4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e56:	6013      	str	r3, [r2, #0]
 8008e58:	e036      	b.n	8008ec8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e60:	69da      	ldr	r2, [r3, #28]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	f003 030f 	and.w	r3, r3, #15
 8008e6a:	2101      	movs	r1, #1
 8008e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e70:	041b      	lsls	r3, r3, #16
 8008e72:	68f9      	ldr	r1, [r7, #12]
 8008e74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d11a      	bne.n	8008ec8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	015a      	lsls	r2, r3, #5
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	4413      	add	r3, r2
 8008e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	791b      	ldrb	r3, [r3, #4]
 8008eac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008eae:	430b      	orrs	r3, r1
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	0151      	lsls	r1, r2, #5
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	440a      	add	r2, r1
 8008eba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ec2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ec6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3714      	adds	r7, #20
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
	...

08008ed8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	785b      	ldrb	r3, [r3, #1]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d161      	bne.n	8008fb8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f0a:	d11f      	bne.n	8008f4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	0151      	lsls	r1, r2, #5
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	440a      	add	r2, r1
 8008f22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008f2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	015a      	lsls	r2, r3, #5
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	4413      	add	r3, r2
 8008f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	0151      	lsls	r1, r2, #5
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	440a      	add	r2, r1
 8008f42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	f003 030f 	and.w	r3, r3, #15
 8008f5c:	2101      	movs	r1, #1
 8008f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	43db      	mvns	r3, r3
 8008f66:	68f9      	ldr	r1, [r7, #12]
 8008f68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f76:	69da      	ldr	r2, [r3, #28]
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	f003 030f 	and.w	r3, r3, #15
 8008f80:	2101      	movs	r1, #1
 8008f82:	fa01 f303 	lsl.w	r3, r1, r3
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	43db      	mvns	r3, r3
 8008f8a:	68f9      	ldr	r1, [r7, #12]
 8008f8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f90:	4013      	ands	r3, r2
 8008f92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	015a      	lsls	r2, r3, #5
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	0159      	lsls	r1, r3, #5
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	440b      	add	r3, r1
 8008faa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fae:	4619      	mov	r1, r3
 8008fb0:	4b35      	ldr	r3, [pc, #212]	@ (8009088 <USB_DeactivateEndpoint+0x1b0>)
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	600b      	str	r3, [r1, #0]
 8008fb6:	e060      	b.n	800907a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008fca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fce:	d11f      	bne.n	8009010 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	015a      	lsls	r2, r3, #5
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	0151      	lsls	r1, r2, #5
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	440a      	add	r2, r1
 8008fe6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008fee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	015a      	lsls	r2, r3, #5
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	0151      	lsls	r1, r2, #5
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	440a      	add	r2, r1
 8009006:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800900a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800900e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009016:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	f003 030f 	and.w	r3, r3, #15
 8009020:	2101      	movs	r1, #1
 8009022:	fa01 f303 	lsl.w	r3, r1, r3
 8009026:	041b      	lsls	r3, r3, #16
 8009028:	43db      	mvns	r3, r3
 800902a:	68f9      	ldr	r1, [r7, #12]
 800902c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009030:	4013      	ands	r3, r2
 8009032:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800903a:	69da      	ldr	r2, [r3, #28]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	f003 030f 	and.w	r3, r3, #15
 8009044:	2101      	movs	r1, #1
 8009046:	fa01 f303 	lsl.w	r3, r1, r3
 800904a:	041b      	lsls	r3, r3, #16
 800904c:	43db      	mvns	r3, r3
 800904e:	68f9      	ldr	r1, [r7, #12]
 8009050:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009054:	4013      	ands	r3, r2
 8009056:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	015a      	lsls	r2, r3, #5
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	4413      	add	r3, r2
 8009060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	0159      	lsls	r1, r3, #5
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	440b      	add	r3, r1
 800906e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009072:	4619      	mov	r1, r3
 8009074:	4b05      	ldr	r3, [pc, #20]	@ (800908c <USB_DeactivateEndpoint+0x1b4>)
 8009076:	4013      	ands	r3, r2
 8009078:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3714      	adds	r7, #20
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	ec337800 	.word	0xec337800
 800908c:	eff37800 	.word	0xeff37800

08009090 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b086      	sub	sp, #24
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	785b      	ldrb	r3, [r3, #1]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	f040 812d 	bne.w	8009308 <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d132      	bne.n	800911c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	015a      	lsls	r2, r3, #5
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	4413      	add	r3, r2
 80090be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	0151      	lsls	r1, r2, #5
 80090c8:	697a      	ldr	r2, [r7, #20]
 80090ca:	440a      	add	r2, r1
 80090cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090d0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80090d4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80090d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	015a      	lsls	r2, r3, #5
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	4413      	add	r3, r2
 80090e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	0151      	lsls	r1, r2, #5
 80090ec:	697a      	ldr	r2, [r7, #20]
 80090ee:	440a      	add	r2, r1
 80090f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80090f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	015a      	lsls	r2, r3, #5
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	4413      	add	r3, r2
 8009102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	693a      	ldr	r2, [r7, #16]
 800910a:	0151      	lsls	r1, r2, #5
 800910c:	697a      	ldr	r2, [r7, #20]
 800910e:	440a      	add	r2, r1
 8009110:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009114:	0cdb      	lsrs	r3, r3, #19
 8009116:	04db      	lsls	r3, r3, #19
 8009118:	6113      	str	r3, [r2, #16]
 800911a:	e097      	b.n	800924c <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	015a      	lsls	r2, r3, #5
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	4413      	add	r3, r2
 8009124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	693a      	ldr	r2, [r7, #16]
 800912c:	0151      	lsls	r1, r2, #5
 800912e:	697a      	ldr	r2, [r7, #20]
 8009130:	440a      	add	r2, r1
 8009132:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009136:	0cdb      	lsrs	r3, r3, #19
 8009138:	04db      	lsls	r3, r3, #19
 800913a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	015a      	lsls	r2, r3, #5
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	4413      	add	r3, r2
 8009144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	693a      	ldr	r2, [r7, #16]
 800914c:	0151      	lsls	r1, r2, #5
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	440a      	add	r2, r1
 8009152:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009156:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800915a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800915e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d11a      	bne.n	800919c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	691a      	ldr	r2, [r3, #16]
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	429a      	cmp	r2, r3
 8009170:	d903      	bls.n	800917a <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	689a      	ldr	r2, [r3, #8]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	015a      	lsls	r2, r3, #5
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	4413      	add	r3, r2
 8009182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009186:	691b      	ldr	r3, [r3, #16]
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	0151      	lsls	r1, r2, #5
 800918c:	697a      	ldr	r2, [r7, #20]
 800918e:	440a      	add	r2, r1
 8009190:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009194:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009198:	6113      	str	r3, [r2, #16]
 800919a:	e044      	b.n	8009226 <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	691a      	ldr	r2, [r3, #16]
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	4413      	add	r3, r2
 80091a6:	1e5a      	subs	r2, r3, #1
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b0:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	015a      	lsls	r2, r3, #5
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	4413      	add	r3, r2
 80091ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091be:	691a      	ldr	r2, [r3, #16]
 80091c0:	89fb      	ldrh	r3, [r7, #14]
 80091c2:	04d9      	lsls	r1, r3, #19
 80091c4:	4b8f      	ldr	r3, [pc, #572]	@ (8009404 <USB_EPStartXfer+0x374>)
 80091c6:	400b      	ands	r3, r1
 80091c8:	6939      	ldr	r1, [r7, #16]
 80091ca:	0148      	lsls	r0, r1, #5
 80091cc:	6979      	ldr	r1, [r7, #20]
 80091ce:	4401      	add	r1, r0
 80091d0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80091d4:	4313      	orrs	r3, r2
 80091d6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	791b      	ldrb	r3, [r3, #4]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d122      	bne.n	8009226 <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	015a      	lsls	r2, r3, #5
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	693a      	ldr	r2, [r7, #16]
 80091f0:	0151      	lsls	r1, r2, #5
 80091f2:	697a      	ldr	r2, [r7, #20]
 80091f4:	440a      	add	r2, r1
 80091f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091fa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80091fe:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	015a      	lsls	r2, r3, #5
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	4413      	add	r3, r2
 8009208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800920c:	691a      	ldr	r2, [r3, #16]
 800920e:	89fb      	ldrh	r3, [r7, #14]
 8009210:	075b      	lsls	r3, r3, #29
 8009212:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009216:	6939      	ldr	r1, [r7, #16]
 8009218:	0148      	lsls	r0, r1, #5
 800921a:	6979      	ldr	r1, [r7, #20]
 800921c:	4401      	add	r1, r0
 800921e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009222:	4313      	orrs	r3, r2
 8009224:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	015a      	lsls	r2, r3, #5
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	4413      	add	r3, r2
 800922e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009232:	691a      	ldr	r2, [r3, #16]
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800923c:	6939      	ldr	r1, [r7, #16]
 800923e:	0148      	lsls	r0, r1, #5
 8009240:	6979      	ldr	r1, [r7, #20]
 8009242:	4401      	add	r1, r0
 8009244:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009248:	4313      	orrs	r3, r2
 800924a:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	4413      	add	r3, r2
 8009254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	693a      	ldr	r2, [r7, #16]
 800925c:	0151      	lsls	r1, r2, #5
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	440a      	add	r2, r1
 8009262:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009266:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800926a:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	791b      	ldrb	r3, [r3, #4]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d015      	beq.n	80092a0 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 813a 	beq.w	80094f2 <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	f003 030f 	and.w	r3, r3, #15
 800928e:	2101      	movs	r1, #1
 8009290:	fa01 f303 	lsl.w	r3, r1, r3
 8009294:	6979      	ldr	r1, [r7, #20]
 8009296:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800929a:	4313      	orrs	r3, r2
 800929c:	634b      	str	r3, [r1, #52]	@ 0x34
 800929e:	e128      	b.n	80094f2 <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d110      	bne.n	80092d2 <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	015a      	lsls	r2, r3, #5
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	4413      	add	r3, r2
 80092b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	693a      	ldr	r2, [r7, #16]
 80092c0:	0151      	lsls	r1, r2, #5
 80092c2:	697a      	ldr	r2, [r7, #20]
 80092c4:	440a      	add	r2, r1
 80092c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80092ce:	6013      	str	r3, [r2, #0]
 80092d0:	e00f      	b.n	80092f2 <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	015a      	lsls	r2, r3, #5
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	4413      	add	r3, r2
 80092da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	693a      	ldr	r2, [r7, #16]
 80092e2:	0151      	lsls	r1, r2, #5
 80092e4:	697a      	ldr	r2, [r7, #20]
 80092e6:	440a      	add	r2, r1
 80092e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092f0:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	68d9      	ldr	r1, [r3, #12]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	781a      	ldrb	r2, [r3, #0]
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	b29b      	uxth	r3, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 f9a7 	bl	8009654 <USB_WritePacket>
 8009306:	e0f4      	b.n	80094f2 <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	015a      	lsls	r2, r3, #5
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	4413      	add	r3, r2
 8009310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	0151      	lsls	r1, r2, #5
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	440a      	add	r2, r1
 800931e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009322:	0cdb      	lsrs	r3, r3, #19
 8009324:	04db      	lsls	r3, r3, #19
 8009326:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	015a      	lsls	r2, r3, #5
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	4413      	add	r3, r2
 8009330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	693a      	ldr	r2, [r7, #16]
 8009338:	0151      	lsls	r1, r2, #5
 800933a:	697a      	ldr	r2, [r7, #20]
 800933c:	440a      	add	r2, r1
 800933e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009342:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009346:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800934a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d12f      	bne.n	80093b2 <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d003      	beq.n	8009362 <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	689a      	ldr	r2, [r3, #8]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	689a      	ldr	r2, [r3, #8]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	4413      	add	r3, r2
 8009372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009376:	691a      	ldr	r2, [r3, #16]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	6a1b      	ldr	r3, [r3, #32]
 800937c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009380:	6939      	ldr	r1, [r7, #16]
 8009382:	0148      	lsls	r0, r1, #5
 8009384:	6979      	ldr	r1, [r7, #20]
 8009386:	4401      	add	r1, r0
 8009388:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800938c:	4313      	orrs	r3, r2
 800938e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	015a      	lsls	r2, r3, #5
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	4413      	add	r3, r2
 8009398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	693a      	ldr	r2, [r7, #16]
 80093a0:	0151      	lsls	r1, r2, #5
 80093a2:	697a      	ldr	r2, [r7, #20]
 80093a4:	440a      	add	r2, r1
 80093a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80093ae:	6113      	str	r3, [r2, #16]
 80093b0:	e062      	b.n	8009478 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d126      	bne.n	8009408 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	015a      	lsls	r2, r3, #5
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	4413      	add	r3, r2
 80093c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093c6:	691a      	ldr	r2, [r3, #16]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093d0:	6939      	ldr	r1, [r7, #16]
 80093d2:	0148      	lsls	r0, r1, #5
 80093d4:	6979      	ldr	r1, [r7, #20]
 80093d6:	4401      	add	r1, r0
 80093d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80093dc:	4313      	orrs	r3, r2
 80093de:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	015a      	lsls	r2, r3, #5
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	4413      	add	r3, r2
 80093e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	693a      	ldr	r2, [r7, #16]
 80093f0:	0151      	lsls	r1, r2, #5
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	440a      	add	r2, r1
 80093f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80093fe:	6113      	str	r3, [r2, #16]
 8009400:	e03a      	b.n	8009478 <USB_EPStartXfer+0x3e8>
 8009402:	bf00      	nop
 8009404:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	691a      	ldr	r2, [r3, #16]
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	4413      	add	r3, r2
 8009412:	1e5a      	subs	r2, r3, #1
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	fbb2 f3f3 	udiv	r3, r2, r3
 800941c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	89fa      	ldrh	r2, [r7, #14]
 8009424:	fb03 f202 	mul.w	r2, r3, r2
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	015a      	lsls	r2, r3, #5
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	4413      	add	r3, r2
 8009434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009438:	691a      	ldr	r2, [r3, #16]
 800943a:	89fb      	ldrh	r3, [r7, #14]
 800943c:	04d9      	lsls	r1, r3, #19
 800943e:	4b2f      	ldr	r3, [pc, #188]	@ (80094fc <USB_EPStartXfer+0x46c>)
 8009440:	400b      	ands	r3, r1
 8009442:	6939      	ldr	r1, [r7, #16]
 8009444:	0148      	lsls	r0, r1, #5
 8009446:	6979      	ldr	r1, [r7, #20]
 8009448:	4401      	add	r1, r0
 800944a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800944e:	4313      	orrs	r3, r2
 8009450:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	015a      	lsls	r2, r3, #5
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	4413      	add	r3, r2
 800945a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800945e:	691a      	ldr	r2, [r3, #16]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	6a1b      	ldr	r3, [r3, #32]
 8009464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009468:	6939      	ldr	r1, [r7, #16]
 800946a:	0148      	lsls	r0, r1, #5
 800946c:	6979      	ldr	r1, [r7, #20]
 800946e:	4401      	add	r1, r0
 8009470:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009474:	4313      	orrs	r3, r2
 8009476:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	791b      	ldrb	r3, [r3, #4]
 800947c:	2b01      	cmp	r3, #1
 800947e:	d128      	bne.n	80094d2 <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800948c:	2b00      	cmp	r3, #0
 800948e:	d110      	bne.n	80094b2 <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	015a      	lsls	r2, r3, #5
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	4413      	add	r3, r2
 8009498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	0151      	lsls	r1, r2, #5
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	440a      	add	r2, r1
 80094a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80094ae:	6013      	str	r3, [r2, #0]
 80094b0:	e00f      	b.n	80094d2 <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	015a      	lsls	r2, r3, #5
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	4413      	add	r3, r2
 80094ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	693a      	ldr	r2, [r7, #16]
 80094c2:	0151      	lsls	r1, r2, #5
 80094c4:	697a      	ldr	r2, [r7, #20]
 80094c6:	440a      	add	r2, r1
 80094c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094d0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	015a      	lsls	r2, r3, #5
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	4413      	add	r3, r2
 80094da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	0151      	lsls	r1, r2, #5
 80094e4:	697a      	ldr	r2, [r7, #20]
 80094e6:	440a      	add	r2, r1
 80094e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094ec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80094f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3718      	adds	r7, #24
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	1ff80000 	.word	0x1ff80000

08009500 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009500:	b480      	push	{r7}
 8009502:	b087      	sub	sp, #28
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800950a:	2300      	movs	r3, #0
 800950c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800950e:	2300      	movs	r3, #0
 8009510:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	785b      	ldrb	r3, [r3, #1]
 800951a:	2b01      	cmp	r3, #1
 800951c:	d14a      	bne.n	80095b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	015a      	lsls	r2, r3, #5
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	4413      	add	r3, r2
 8009528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009532:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009536:	f040 8086 	bne.w	8009646 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	015a      	lsls	r2, r3, #5
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	4413      	add	r3, r2
 8009544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	683a      	ldr	r2, [r7, #0]
 800954c:	7812      	ldrb	r2, [r2, #0]
 800954e:	0151      	lsls	r1, r2, #5
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	440a      	add	r2, r1
 8009554:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009558:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800955c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	015a      	lsls	r2, r3, #5
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	4413      	add	r3, r2
 8009568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	7812      	ldrb	r2, [r2, #0]
 8009572:	0151      	lsls	r1, r2, #5
 8009574:	693a      	ldr	r2, [r7, #16]
 8009576:	440a      	add	r2, r1
 8009578:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800957c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009580:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3301      	adds	r3, #1
 8009586:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800958e:	4293      	cmp	r3, r2
 8009590:	d902      	bls.n	8009598 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	75fb      	strb	r3, [r7, #23]
          break;
 8009596:	e056      	b.n	8009646 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	015a      	lsls	r2, r3, #5
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	4413      	add	r3, r2
 80095a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095b0:	d0e7      	beq.n	8009582 <USB_EPStopXfer+0x82>
 80095b2:	e048      	b.n	8009646 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	015a      	lsls	r2, r3, #5
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	4413      	add	r3, r2
 80095be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095cc:	d13b      	bne.n	8009646 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	015a      	lsls	r2, r3, #5
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	4413      	add	r3, r2
 80095d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	683a      	ldr	r2, [r7, #0]
 80095e0:	7812      	ldrb	r2, [r2, #0]
 80095e2:	0151      	lsls	r1, r2, #5
 80095e4:	693a      	ldr	r2, [r7, #16]
 80095e6:	440a      	add	r2, r1
 80095e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80095f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	015a      	lsls	r2, r3, #5
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	4413      	add	r3, r2
 80095fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	7812      	ldrb	r2, [r2, #0]
 8009606:	0151      	lsls	r1, r2, #5
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	440a      	add	r2, r1
 800960c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009610:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009614:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	3301      	adds	r3, #1
 800961a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009622:	4293      	cmp	r3, r2
 8009624:	d902      	bls.n	800962c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	75fb      	strb	r3, [r7, #23]
          break;
 800962a:	e00c      	b.n	8009646 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	015a      	lsls	r2, r3, #5
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	4413      	add	r3, r2
 8009636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009640:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009644:	d0e7      	beq.n	8009616 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009646:	7dfb      	ldrb	r3, [r7, #23]
}
 8009648:	4618      	mov	r0, r3
 800964a:	371c      	adds	r7, #28
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8009654:	b480      	push	{r7}
 8009656:	b089      	sub	sp, #36	@ 0x24
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	4611      	mov	r1, r2
 8009660:	461a      	mov	r2, r3
 8009662:	460b      	mov	r3, r1
 8009664:	71fb      	strb	r3, [r7, #7]
 8009666:	4613      	mov	r3, r2
 8009668:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8009672:	88bb      	ldrh	r3, [r7, #4]
 8009674:	3303      	adds	r3, #3
 8009676:	089b      	lsrs	r3, r3, #2
 8009678:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800967a:	2300      	movs	r3, #0
 800967c:	61bb      	str	r3, [r7, #24]
 800967e:	e018      	b.n	80096b2 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009680:	79fb      	ldrb	r3, [r7, #7]
 8009682:	031a      	lsls	r2, r3, #12
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	4413      	add	r3, r2
 8009688:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800968c:	461a      	mov	r2, r3
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	6013      	str	r3, [r2, #0]
    pSrc++;
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	3301      	adds	r3, #1
 8009698:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	3301      	adds	r3, #1
 800969e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	3301      	adds	r3, #1
 80096a4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	3301      	adds	r3, #1
 80096aa:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	3301      	adds	r3, #1
 80096b0:	61bb      	str	r3, [r7, #24]
 80096b2:	69ba      	ldr	r2, [r7, #24]
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d3e2      	bcc.n	8009680 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3724      	adds	r7, #36	@ 0x24
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b08b      	sub	sp, #44	@ 0x2c
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	4613      	mov	r3, r2
 80096d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80096de:	88fb      	ldrh	r3, [r7, #6]
 80096e0:	089b      	lsrs	r3, r3, #2
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80096e6:	88fb      	ldrh	r3, [r7, #6]
 80096e8:	f003 0303 	and.w	r3, r3, #3
 80096ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80096ee:	2300      	movs	r3, #0
 80096f0:	623b      	str	r3, [r7, #32]
 80096f2:	e014      	b.n	800971e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8009700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009702:	3301      	adds	r3, #1
 8009704:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009708:	3301      	adds	r3, #1
 800970a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800970c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970e:	3301      	adds	r3, #1
 8009710:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009714:	3301      	adds	r3, #1
 8009716:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	3301      	adds	r3, #1
 800971c:	623b      	str	r3, [r7, #32]
 800971e:	6a3a      	ldr	r2, [r7, #32]
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	429a      	cmp	r2, r3
 8009724:	d3e6      	bcc.n	80096f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009726:	8bfb      	ldrh	r3, [r7, #30]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d01e      	beq.n	800976a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800972c:	2300      	movs	r3, #0
 800972e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009736:	461a      	mov	r2, r3
 8009738:	f107 0310 	add.w	r3, r7, #16
 800973c:	6812      	ldr	r2, [r2, #0]
 800973e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009740:	693a      	ldr	r2, [r7, #16]
 8009742:	6a3b      	ldr	r3, [r7, #32]
 8009744:	b2db      	uxtb	r3, r3
 8009746:	00db      	lsls	r3, r3, #3
 8009748:	fa22 f303 	lsr.w	r3, r2, r3
 800974c:	b2da      	uxtb	r2, r3
 800974e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009750:	701a      	strb	r2, [r3, #0]
      i++;
 8009752:	6a3b      	ldr	r3, [r7, #32]
 8009754:	3301      	adds	r3, #1
 8009756:	623b      	str	r3, [r7, #32]
      pDest++;
 8009758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975a:	3301      	adds	r3, #1
 800975c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800975e:	8bfb      	ldrh	r3, [r7, #30]
 8009760:	3b01      	subs	r3, #1
 8009762:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009764:	8bfb      	ldrh	r3, [r7, #30]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1ea      	bne.n	8009740 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800976a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800976c:	4618      	mov	r0, r3
 800976e:	372c      	adds	r7, #44	@ 0x2c
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	785b      	ldrb	r3, [r3, #1]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d12c      	bne.n	80097ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	015a      	lsls	r2, r3, #5
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	4413      	add	r3, r2
 800979c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	db12      	blt.n	80097cc <USB_EPSetStall+0x54>
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00f      	beq.n	80097cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	015a      	lsls	r2, r3, #5
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	4413      	add	r3, r2
 80097b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68ba      	ldr	r2, [r7, #8]
 80097bc:	0151      	lsls	r1, r2, #5
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	440a      	add	r2, r1
 80097c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80097ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	015a      	lsls	r2, r3, #5
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	4413      	add	r3, r2
 80097d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	0151      	lsls	r1, r2, #5
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	440a      	add	r2, r1
 80097e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80097ea:	6013      	str	r3, [r2, #0]
 80097ec:	e02b      	b.n	8009846 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	015a      	lsls	r2, r3, #5
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	4413      	add	r3, r2
 80097f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	db12      	blt.n	8009826 <USB_EPSetStall+0xae>
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00f      	beq.n	8009826 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	015a      	lsls	r2, r3, #5
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	4413      	add	r3, r2
 800980e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	0151      	lsls	r1, r2, #5
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	440a      	add	r2, r1
 800981c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009820:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009824:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	015a      	lsls	r2, r3, #5
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	4413      	add	r3, r2
 800982e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	68ba      	ldr	r2, [r7, #8]
 8009836:	0151      	lsls	r1, r2, #5
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	440a      	add	r2, r1
 800983c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009840:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009844:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009854:	b480      	push	{r7}
 8009856:	b085      	sub	sp, #20
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	785b      	ldrb	r3, [r3, #1]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d128      	bne.n	80098c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	015a      	lsls	r2, r3, #5
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	4413      	add	r3, r2
 8009878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68ba      	ldr	r2, [r7, #8]
 8009880:	0151      	lsls	r1, r2, #5
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	440a      	add	r2, r1
 8009886:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800988a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800988e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	791b      	ldrb	r3, [r3, #4]
 8009894:	2b03      	cmp	r3, #3
 8009896:	d003      	beq.n	80098a0 <USB_EPClearStall+0x4c>
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	791b      	ldrb	r3, [r3, #4]
 800989c:	2b02      	cmp	r3, #2
 800989e:	d138      	bne.n	8009912 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	015a      	lsls	r2, r3, #5
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	4413      	add	r3, r2
 80098a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	0151      	lsls	r1, r2, #5
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	440a      	add	r2, r1
 80098b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098be:	6013      	str	r3, [r2, #0]
 80098c0:	e027      	b.n	8009912 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	68ba      	ldr	r2, [r7, #8]
 80098d2:	0151      	lsls	r1, r2, #5
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	440a      	add	r2, r1
 80098d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80098e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	791b      	ldrb	r3, [r3, #4]
 80098e6:	2b03      	cmp	r3, #3
 80098e8:	d003      	beq.n	80098f2 <USB_EPClearStall+0x9e>
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	791b      	ldrb	r3, [r3, #4]
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d10f      	bne.n	8009912 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	015a      	lsls	r2, r3, #5
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	4413      	add	r3, r2
 80098fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	0151      	lsls	r1, r2, #5
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	440a      	add	r2, r1
 8009908:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800990c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009910:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009920:	b480      	push	{r7}
 8009922:	b085      	sub	sp, #20
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	460b      	mov	r3, r1
 800992a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800993e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009942:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	78fb      	ldrb	r3, [r7, #3]
 800994e:	011b      	lsls	r3, r3, #4
 8009950:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009954:	68f9      	ldr	r1, [r7, #12]
 8009956:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800995a:	4313      	orrs	r3, r2
 800995c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3714      	adds	r7, #20
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009986:	f023 0303 	bic.w	r3, r3, #3
 800998a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800999a:	f023 0302 	bic.w	r3, r3, #2
 800999e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3714      	adds	r7, #20
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr

080099ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80099ae:	b480      	push	{r7}
 80099b0:	b085      	sub	sp, #20
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80099c8:	f023 0303 	bic.w	r3, r3, #3
 80099cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80099dc:	f043 0302 	orr.w	r3, r3, #2
 80099e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b085      	sub	sp, #20
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	695b      	ldr	r3, [r3, #20]
 80099fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	699b      	ldr	r3, [r3, #24]
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	4013      	ands	r3, r2
 8009a06:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009a08:	68fb      	ldr	r3, [r7, #12]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3714      	adds	r7, #20
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr

08009a16 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a16:	b480      	push	{r7}
 8009a18:	b085      	sub	sp, #20
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a28:	699b      	ldr	r3, [r3, #24]
 8009a2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a32:	69db      	ldr	r3, [r3, #28]
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	4013      	ands	r3, r2
 8009a38:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	0c1b      	lsrs	r3, r3, #16
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3714      	adds	r7, #20
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a4a:	b480      	push	{r7}
 8009a4c:	b085      	sub	sp, #20
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a5c:	699b      	ldr	r3, [r3, #24]
 8009a5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a66:	69db      	ldr	r3, [r3, #28]
 8009a68:	68ba      	ldr	r2, [r7, #8]
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	b29b      	uxth	r3, r3
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr

08009a7e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a7e:	b480      	push	{r7}
 8009a80:	b085      	sub	sp, #20
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	460b      	mov	r3, r1
 8009a88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009a8e:	78fb      	ldrb	r3, [r7, #3]
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009aa4:	695b      	ldr	r3, [r3, #20]
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009aac:	68bb      	ldr	r3, [r7, #8]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3714      	adds	r7, #20
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr

08009aba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009aba:	b480      	push	{r7}
 8009abc:	b087      	sub	sp, #28
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009adc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009ade:	78fb      	ldrb	r3, [r7, #3]
 8009ae0:	f003 030f 	and.w	r3, r3, #15
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aea:	01db      	lsls	r3, r3, #7
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	693a      	ldr	r2, [r7, #16]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009af4:	78fb      	ldrb	r3, [r7, #3]
 8009af6:	015a      	lsls	r2, r3, #5
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	4413      	add	r3, r2
 8009afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	693a      	ldr	r2, [r7, #16]
 8009b04:	4013      	ands	r3, r2
 8009b06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009b08:	68bb      	ldr	r3, [r7, #8]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	371c      	adds	r7, #28
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr

08009b16 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b16:	b480      	push	{r7}
 8009b18:	b083      	sub	sp, #12
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	695b      	ldr	r3, [r3, #20]
 8009b22:	f003 0301 	and.w	r3, r3, #1
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	370c      	adds	r7, #12
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr

08009b32 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b32:	b480      	push	{r7}
 8009b34:	b085      	sub	sp, #20
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68fa      	ldr	r2, [r7, #12]
 8009b48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b4c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009b50:	f023 0307 	bic.w	r3, r3, #7
 8009b54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3714      	adds	r7, #20
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	333c      	adds	r3, #60	@ 0x3c
 8009b8a:	3304      	adds	r3, #4
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	4a1c      	ldr	r2, [pc, #112]	@ (8009c04 <USB_EP0_OutStart+0x8c>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d90a      	bls.n	8009bae <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ba8:	d101      	bne.n	8009bae <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	e024      	b.n	8009bf8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009bc8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009bcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009bdc:	f043 0318 	orr.w	r3, r3, #24
 8009be0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009bf0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009bf4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3714      	adds	r7, #20
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr
 8009c04:	4f54300a 	.word	0x4f54300a

08009c08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c10:	2300      	movs	r3, #0
 8009c12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	3301      	adds	r3, #1
 8009c18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c20:	d901      	bls.n	8009c26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009c22:	2303      	movs	r3, #3
 8009c24:	e01b      	b.n	8009c5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	daf2      	bge.n	8009c14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	f043 0201 	orr.w	r2, r3, #1
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	3301      	adds	r3, #1
 8009c42:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c4a:	d901      	bls.n	8009c50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	e006      	b.n	8009c5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	691b      	ldr	r3, [r3, #16]
 8009c54:	f003 0301 	and.w	r3, r3, #1
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d0f0      	beq.n	8009c3e <USB_CoreReset+0x36>

  return HAL_OK;
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3714      	adds	r7, #20
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
	...

08009c6c <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	460b      	mov	r3, r1
 8009c76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8009c78:	f641 6050 	movw	r0, #7760	@ 0x1e50
 8009c7c:	f002 fcb0 	bl	800c5e0 <USBD_static_malloc>
 8009c80:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d109      	bne.n	8009c9c <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	32b0      	adds	r2, #176	@ 0xb0
 8009c92:	2100      	movs	r1, #0
 8009c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009c98:	2302      	movs	r3, #2
 8009c9a:	e07e      	b.n	8009d9a <USBD_AUDIO_Init+0x12e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	32b0      	adds	r2, #176	@ 0xb0
 8009ca6:	68f9      	ldr	r1, [r7, #12]
 8009ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	32b0      	adds	r2, #176	@ 0xb0
 8009cb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	7c1b      	ldrb	r3, [r3, #16]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d10e      	bne.n	8009ce6 <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8009cc8:	4b36      	ldr	r3, [pc, #216]	@ (8009da4 <USBD_AUDIO_Init+0x138>)
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	f003 020f 	and.w	r2, r3, #15
 8009cd0:	6879      	ldr	r1, [r7, #4]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	4413      	add	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	440b      	add	r3, r1
 8009cdc:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	801a      	strh	r2, [r3, #0]
 8009ce4:	e00d      	b.n	8009d02 <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 8009ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8009da4 <USBD_AUDIO_Init+0x138>)
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	f003 020f 	and.w	r2, r3, #15
 8009cee:	6879      	ldr	r1, [r7, #4]
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4413      	add	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	440b      	add	r3, r1
 8009cfa:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8009cfe:	2201      	movs	r2, #1
 8009d00:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8009d02:	4b28      	ldr	r3, [pc, #160]	@ (8009da4 <USBD_AUDIO_Init+0x138>)
 8009d04:	7819      	ldrb	r1, [r3, #0]
 8009d06:	2360      	movs	r3, #96	@ 0x60
 8009d08:	2201      	movs	r2, #1
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f002 fa54 	bl	800c1b8 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 8009d10:	4b24      	ldr	r3, [pc, #144]	@ (8009da4 <USBD_AUDIO_Init+0x138>)
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	f003 020f 	and.w	r2, r3, #15
 8009d18:	6879      	ldr	r1, [r7, #4]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	4413      	add	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	440b      	add	r3, r1
 8009d24:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009d28:	2201      	movs	r2, #1
 8009d2a:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d38:	2203      	movs	r2, #3
 8009d3a:	f883 2e04 	strb.w	r2, [r3, #3588]	@ 0xe04
  haudio->wr_ptr = 0U;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d44:	2200      	movs	r2, #0
 8009d46:	f8a3 2e08 	strh.w	r2, [r3, #3592]	@ 0xe08
  haudio->rd_ptr = 0U;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d50:	2200      	movs	r2, #0
 8009d52:	f8a3 2e06 	strh.w	r2, [r3, #3590]	@ 0xe06
  haudio->rd_enable = 0U;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f883 2e05 	strb.w	r2, [r3, #3589]	@ 0xe05

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	33b0      	adds	r3, #176	@ 0xb0
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4413      	add	r3, r2
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2200      	movs	r2, #0
 8009d76:	2146      	movs	r1, #70	@ 0x46
 8009d78:	f645 50c0 	movw	r0, #24000	@ 0x5dc0
 8009d7c:	4798      	blx	r3
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d001      	beq.n	8009d88 <USBD_AUDIO_Init+0x11c>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 8009d84:	2303      	movs	r3, #3
 8009d86:	e008      	b.n	8009d9a <USBD_AUDIO_Init+0x12e>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 8009d88:	4b06      	ldr	r3, [pc, #24]	@ (8009da4 <USBD_AUDIO_Init+0x138>)
 8009d8a:	7819      	ldrb	r1, [r3, #0]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	1d1a      	adds	r2, r3, #4
 8009d90:	2360      	movs	r3, #96	@ 0x60
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f002 fb8a 	bl	800c4ac <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 8009d98:	2300      	movs	r3, #0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	200000c6 	.word	0x200000c6

08009da8 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	460b      	mov	r3, r1
 8009db2:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 8009db4:	4b28      	ldr	r3, [pc, #160]	@ (8009e58 <USBD_AUDIO_DeInit+0xb0>)
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	4619      	mov	r1, r3
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f002 fa3a 	bl	800c234 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 8009dc0:	4b25      	ldr	r3, [pc, #148]	@ (8009e58 <USBD_AUDIO_DeInit+0xb0>)
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	f003 020f 	and.w	r2, r3, #15
 8009dc8:	6879      	ldr	r1, [r7, #4]
 8009dca:	4613      	mov	r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	4413      	add	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	440b      	add	r3, r1
 8009dd4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009dd8:	2200      	movs	r2, #0
 8009dda:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 8009ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8009e58 <USBD_AUDIO_DeInit+0xb0>)
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	f003 020f 	and.w	r2, r3, #15
 8009de4:	6879      	ldr	r1, [r7, #4]
 8009de6:	4613      	mov	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	440b      	add	r3, r1
 8009df0:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8009df4:	2200      	movs	r2, #0
 8009df6:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	32b0      	adds	r2, #176	@ 0xb0
 8009e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d020      	beq.n	8009e4c <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	33b0      	adds	r3, #176	@ 0xb0
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4413      	add	r3, r2
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	32b0      	adds	r2, #176	@ 0xb0
 8009e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f002 fbe4 	bl	800c5fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	32b0      	adds	r2, #176	@ 0xb0
 8009e3e:	2100      	movs	r1, #0
 8009e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3708      	adds	r7, #8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	200000c6 	.word	0x200000c6

08009e5c <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b086      	sub	sp, #24
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8009e66:	2300      	movs	r3, #0
 8009e68:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	32b0      	adds	r2, #176	@ 0xb0
 8009e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e7c:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d101      	bne.n	8009e88 <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8009e84:	2303      	movs	r3, #3
 8009e86:	e0c1      	b.n	800a00c <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d01a      	beq.n	8009eca <USBD_AUDIO_Setup+0x6e>
 8009e94:	2b20      	cmp	r3, #32
 8009e96:	f040 80b1 	bne.w	8009ffc <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	785b      	ldrb	r3, [r3, #1]
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d006      	beq.n	8009eb0 <USBD_AUDIO_Setup+0x54>
 8009ea2:	2b81      	cmp	r3, #129	@ 0x81
 8009ea4:	d109      	bne.n	8009eba <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 8009ea6:	6839      	ldr	r1, [r7, #0]
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 f9f5 	bl	800a298 <AUDIO_REQ_GetCurrent>
          break;
 8009eae:	e00b      	b.n	8009ec8 <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 8009eb0:	6839      	ldr	r1, [r7, #0]
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fa1c 	bl	800a2f0 <AUDIO_REQ_SetCurrent>
          break;
 8009eb8:	e006      	b.n	8009ec8 <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 8009eba:	6839      	ldr	r1, [r7, #0]
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f001 fcae 	bl	800b81e <USBD_CtlError>
          ret = USBD_FAIL;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	75fb      	strb	r3, [r7, #23]
          break;
 8009ec6:	bf00      	nop
      }
      break;
 8009ec8:	e09f      	b.n	800a00a <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	785b      	ldrb	r3, [r3, #1]
 8009ece:	2b0b      	cmp	r3, #11
 8009ed0:	f200 8089 	bhi.w	8009fe6 <USBD_AUDIO_Setup+0x18a>
 8009ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8009edc <USBD_AUDIO_Setup+0x80>)
 8009ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eda:	bf00      	nop
 8009edc:	08009f0d 	.word	0x08009f0d
 8009ee0:	08009ff5 	.word	0x08009ff5
 8009ee4:	08009fe7 	.word	0x08009fe7
 8009ee8:	08009fe7 	.word	0x08009fe7
 8009eec:	08009fe7 	.word	0x08009fe7
 8009ef0:	08009fe7 	.word	0x08009fe7
 8009ef4:	08009f37 	.word	0x08009f37
 8009ef8:	08009fe7 	.word	0x08009fe7
 8009efc:	08009fe7 	.word	0x08009fe7
 8009f00:	08009fe7 	.word	0x08009fe7
 8009f04:	08009f7f 	.word	0x08009f7f
 8009f08:	08009fa7 	.word	0x08009fa7
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	2b03      	cmp	r3, #3
 8009f16:	d107      	bne.n	8009f28 <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009f18:	f107 0308 	add.w	r3, r7, #8
 8009f1c:	2202      	movs	r2, #2
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f001 fcf9 	bl	800b918 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f26:	e068      	b.n	8009ffa <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f28:	6839      	ldr	r1, [r7, #0]
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f001 fc77 	bl	800b81e <USBD_CtlError>
            ret = USBD_FAIL;
 8009f30:	2303      	movs	r3, #3
 8009f32:	75fb      	strb	r3, [r7, #23]
          break;
 8009f34:	e061      	b.n	8009ffa <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	885b      	ldrh	r3, [r3, #2]
 8009f3a:	0a1b      	lsrs	r3, r3, #8
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	2b21      	cmp	r3, #33	@ 0x21
 8009f40:	d15a      	bne.n	8009ff8 <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f000 fa3f 	bl	800a3cc <USBD_AUDIO_GetAudioHeaderDesc>
 8009f4e:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00c      	beq.n	8009f70 <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	88db      	ldrh	r3, [r3, #6]
 8009f5a:	2b09      	cmp	r3, #9
 8009f5c:	bf28      	it	cs
 8009f5e:	2309      	movcs	r3, #9
 8009f60:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f62:	897b      	ldrh	r3, [r7, #10]
 8009f64:	461a      	mov	r2, r3
 8009f66:	68f9      	ldr	r1, [r7, #12]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f001 fcd5 	bl	800b918 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 8009f6e:	e043      	b.n	8009ff8 <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 8009f70:	6839      	ldr	r1, [r7, #0]
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f001 fc53 	bl	800b81e <USBD_CtlError>
              ret = USBD_FAIL;
 8009f78:	2303      	movs	r3, #3
 8009f7a:	75fb      	strb	r3, [r7, #23]
          break;
 8009f7c:	e03c      	b.n	8009ff8 <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	2b03      	cmp	r3, #3
 8009f88:	d106      	bne.n	8009f98 <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	4619      	mov	r1, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f001 fcc1 	bl	800b918 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f96:	e030      	b.n	8009ffa <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f98:	6839      	ldr	r1, [r7, #0]
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f001 fc3f 	bl	800b81e <USBD_CtlError>
            ret = USBD_FAIL;
 8009fa0:	2303      	movs	r3, #3
 8009fa2:	75fb      	strb	r3, [r7, #23]
          break;
 8009fa4:	e029      	b.n	8009ffa <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	2b03      	cmp	r3, #3
 8009fb0:	d112      	bne.n	8009fd8 <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	885b      	ldrh	r3, [r3, #2]
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d806      	bhi.n	8009fca <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	885b      	ldrh	r3, [r3, #2]
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009fc8:	e017      	b.n	8009ffa <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f001 fc26 	bl	800b81e <USBD_CtlError>
              ret = USBD_FAIL;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	75fb      	strb	r3, [r7, #23]
          break;
 8009fd6:	e010      	b.n	8009ffa <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009fd8:	6839      	ldr	r1, [r7, #0]
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f001 fc1f 	bl	800b81e <USBD_CtlError>
            ret = USBD_FAIL;
 8009fe0:	2303      	movs	r3, #3
 8009fe2:	75fb      	strb	r3, [r7, #23]
          break;
 8009fe4:	e009      	b.n	8009ffa <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009fe6:	6839      	ldr	r1, [r7, #0]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f001 fc18 	bl	800b81e <USBD_CtlError>
          ret = USBD_FAIL;
 8009fee:	2303      	movs	r3, #3
 8009ff0:	75fb      	strb	r3, [r7, #23]
          break;
 8009ff2:	e002      	b.n	8009ffa <USBD_AUDIO_Setup+0x19e>
          break;
 8009ff4:	bf00      	nop
 8009ff6:	e008      	b.n	800a00a <USBD_AUDIO_Setup+0x1ae>
          break;
 8009ff8:	bf00      	nop
      }
      break;
 8009ffa:	e006      	b.n	800a00a <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 8009ffc:	6839      	ldr	r1, [r7, #0]
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f001 fc0d 	bl	800b81e <USBD_CtlError>
      ret = USBD_FAIL;
 800a004:	2303      	movs	r3, #3
 800a006:	75fb      	strb	r3, [r7, #23]
      break;
 800a008:	bf00      	nop
  }

  return (uint8_t)ret;
 800a00a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3718      	adds	r7, #24
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	226d      	movs	r2, #109	@ 0x6d
 800a020:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 800a022:	4b03      	ldr	r3, [pc, #12]	@ (800a030 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 800a024:	4618      	mov	r0, r3
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr
 800a030:	2000004c 	.word	0x2000004c

0800a034 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	460b      	mov	r3, r1
 800a03e:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	370c      	adds	r7, #12
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr

0800a04e <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b084      	sub	sp, #16
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	32b0      	adds	r2, #176	@ 0xb0
 800a060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a064:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d101      	bne.n	800a070 <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a06c:	2303      	movs	r3, #3
 800a06e:	e02a      	b.n	800a0c6 <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a076:	f893 3e0a 	ldrb.w	r3, [r3, #3594]	@ 0xe0a
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d122      	bne.n	800a0c4 <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a084:	f893 3e4c 	ldrb.w	r3, [r3, #3660]	@ 0xe4c
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d11b      	bne.n	800a0c4 <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	33b0      	adds	r3, #176	@ 0xb0
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4413      	add	r3, r2
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a0a4:	f892 2e0b 	ldrb.w	r2, [r2, #3595]	@ 0xe0b
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	4798      	blx	r3
      haudio->control.cmd = 0U;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 2e0a 	strb.w	r2, [r3, #3594]	@ 0xe0a
      haudio->control.len = 0U;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 2e4b 	strb.w	r2, [r3, #3659]	@ 0xe4b
    }
  }

  return (uint8_t)USBD_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b083      	sub	sp, #12
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 800a0d6:	2300      	movs	r3, #0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	370c      	adds	r7, #12
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a0fa:	b480      	push	{r7}
 800a0fc:	b083      	sub	sp, #12
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
 800a102:	460b      	mov	r3, r1
 800a104:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	460b      	mov	r3, r1
 800a11e:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	32b0      	adds	r2, #176	@ 0xb0
 800a12a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d101      	bne.n	800a136 <USBD_AUDIO_IsoOutIncomplete+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a132:	2303      	movs	r3, #3
 800a134:	e016      	b.n	800a164 <USBD_AUDIO_IsoOutIncomplete+0x50>
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	32b0      	adds	r2, #176	@ 0xb0
 800a140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a144:	60fb      	str	r3, [r7, #12]

  /* Prepare Out endpoint to receive next audio packet */
  (void)USBD_LL_PrepareReceive(pdev, epnum,
                               &haudio->buffer[haudio->wr_ptr],
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a14c:	f8b3 3e08 	ldrh.w	r3, [r3, #3592]	@ 0xe08
 800a150:	461a      	mov	r2, r3
  (void)USBD_LL_PrepareReceive(pdev, epnum,
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	4413      	add	r3, r2
 800a156:	1d1a      	adds	r2, r3, #4
 800a158:	78f9      	ldrb	r1, [r7, #3]
 800a15a:	2360      	movs	r3, #96	@ 0x60
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f002 f9a5 	bl	800c4ac <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	460b      	mov	r3, r1
 800a176:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	32b0      	adds	r2, #176	@ 0xb0
 800a182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a186:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d101      	bne.n	800a192 <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a18e:	2303      	movs	r3, #3
 800a190:	e07c      	b.n	800a28c <USBD_AUDIO_DataOut+0x120>
  }

  if (epnum == AUDIOOutEpAdd)
 800a192:	4b40      	ldr	r3, [pc, #256]	@ (800a294 <USBD_AUDIO_DataOut+0x128>)
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	78fa      	ldrb	r2, [r7, #3]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d176      	bne.n	800a28a <USBD_AUDIO_DataOut+0x11e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 800a19c:	78fb      	ldrb	r3, [r7, #3]
 800a19e:	4619      	mov	r1, r3
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f002 f9bb 	bl	800c51c <USBD_LL_GetRxDataSize>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	33b0      	adds	r3, #176	@ 0xb0
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	4413      	add	r3, r2
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	695b      	ldr	r3, [r3, #20]
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a1c2:	f8b2 2e08 	ldrh.w	r2, [r2, #3592]	@ 0xe08
 800a1c6:	4611      	mov	r1, r2
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	440a      	add	r2, r1
 800a1cc:	1d10      	adds	r0, r2, #4
 800a1ce:	8979      	ldrh	r1, [r7, #10]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1da:	f8b3 2e08 	ldrh.w	r2, [r3, #3592]	@ 0xe08
 800a1de:	897b      	ldrh	r3, [r7, #10]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	b29a      	uxth	r2, r3
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1ea:	f8a3 2e08 	strh.w	r2, [r3, #3592]	@ 0xe08

    if (haudio->wr_ptr >= AUDIO_TOTAL_BUF_SIZE)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1f4:	f8b3 3e08 	ldrh.w	r3, [r3, #3592]	@ 0xe08
 800a1f8:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 800a1fc:	d321      	bcc.n	800a242 <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a204:	2200      	movs	r2, #0
 800a206:	f8a3 2e08 	strh.w	r2, [r3, #3592]	@ 0xe08

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a210:	f893 3e04 	ldrb.w	r3, [r3, #3588]	@ 0xe04
 800a214:	2b03      	cmp	r3, #3
 800a216:	d114      	bne.n	800a242 <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	33b0      	adds	r3, #176	@ 0xb0
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	4413      	add	r3, r2
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	1d10      	adds	r0, r2, #4
 800a22e:	2201      	movs	r2, #1
 800a230:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 800a234:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a23c:	2200      	movs	r2, #0
 800a23e:	f883 2e04 	strb.w	r2, [r3, #3588]	@ 0xe04
      }
    }

    if (haudio->rd_enable == 0U)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a248:	f893 3e05 	ldrb.w	r3, [r3, #3589]	@ 0xe05
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d10d      	bne.n	800a26c <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a256:	f8b3 3e08 	ldrh.w	r3, [r3, #3592]	@ 0xe08
 800a25a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a25e:	d105      	bne.n	800a26c <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a266:	2201      	movs	r2, #1
 800a268:	f883 2e05 	strb.w	r2, [r3, #3589]	@ 0xe05
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 800a26c:	4b09      	ldr	r3, [pc, #36]	@ (800a294 <USBD_AUDIO_DataOut+0x128>)
 800a26e:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a276:	f8b3 3e08 	ldrh.w	r3, [r3, #3592]	@ 0xe08
 800a27a:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	4413      	add	r3, r2
 800a280:	1d1a      	adds	r2, r3, #4
 800a282:	2360      	movs	r3, #96	@ 0x60
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f002 f911 	bl	800c4ac <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	200000c6 	.word	0x200000c6

0800a298 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	32b0      	adds	r2, #176	@ 0xb0
 800a2ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b0:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d017      	beq.n	800a2e8 <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 800a2be:	330b      	adds	r3, #11
 800a2c0:	2240      	movs	r2, #64	@ 0x40
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f002 ff26 	bl	800d116 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 800a2d0:	330b      	adds	r3, #11
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	88d2      	ldrh	r2, [r2, #6]
 800a2d6:	2a40      	cmp	r2, #64	@ 0x40
 800a2d8:	bf28      	it	cs
 800a2da:	2240      	movcs	r2, #64	@ 0x40
 800a2dc:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 800a2de:	4619      	mov	r1, r3
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f001 fb19 	bl	800b918 <USBD_CtlSendData>
 800a2e6:	e000      	b.n	800a2ea <AUDIO_REQ_GetCurrent+0x52>
    return;
 800a2e8:	bf00      	nop
}
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	32b0      	adds	r2, #176	@ 0xb0
 800a304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a308:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d02f      	beq.n	800a370 <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	88db      	ldrh	r3, [r3, #6]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d02c      	beq.n	800a372 <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 2e0a 	strb.w	r2, [r3, #3594]	@ 0xe0a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	88db      	ldrh	r3, [r3, #6]
 800a328:	2b3f      	cmp	r3, #63	@ 0x3f
 800a32a:	d803      	bhi.n	800a334 <AUDIO_REQ_SetCurrent+0x44>
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	88db      	ldrh	r3, [r3, #6]
 800a330:	b2da      	uxtb	r2, r3
 800a332:	e000      	b.n	800a336 <AUDIO_REQ_SetCurrent+0x46>
 800a334:	2240      	movs	r2, #64	@ 0x40
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a33c:	f883 2e4b 	strb.w	r2, [r3, #3659]	@ 0xe4b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	889b      	ldrh	r3, [r3, #4]
 800a344:	0a1b      	lsrs	r3, r3, #8
 800a346:	b29b      	uxth	r3, r3
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a350:	f883 2e4c 	strb.w	r2, [r3, #3660]	@ 0xe4c

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 800a35a:	330b      	adds	r3, #11
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a362:	f892 2e4b 	ldrb.w	r2, [r2, #3659]	@ 0xe4b
 800a366:	4619      	mov	r1, r3
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f001 fb01 	bl	800b970 <USBD_CtlPrepareRx>
 800a36e:	e000      	b.n	800a372 <AUDIO_REQ_SetCurrent+0x82>
    return;
 800a370:	bf00      	nop
  }
}
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	220a      	movs	r2, #10
 800a384:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 800a386:	4b03      	ldr	r3, [pc, #12]	@ (800a394 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 800a388:	4618      	mov	r0, r3
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	200000bc 	.word	0x200000bc

0800a398 <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d101      	bne.n	800a3ac <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a3a8:	2303      	movs	r3, #3
 800a3aa:	e009      	b.n	800a3c0 <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	33b0      	adds	r3, #176	@ 0xb0
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	4413      	add	r3, r2
 800a3ba:	683a      	ldr	r2, [r7, #0]
 800a3bc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a3be:	2300      	movs	r3, #0
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	370c      	adds	r7, #12
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr

0800a3cc <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	885b      	ldrh	r3, [r3, #2]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	7812      	ldrb	r2, [r2, #0]
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d91b      	bls.n	800a426 <USBD_AUDIO_GetAudioHeaderDesc+0x5a>
  {
    ptr = desc->bLength;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a3f4:	e011      	b.n	800a41a <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a3f6:	f107 030a 	add.w	r3, r7, #10
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	6978      	ldr	r0, [r7, #20]
 800a3fe:	f000 fbe6 	bl	800abce <USBD_GetNextDesc>
 800a402:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	785b      	ldrb	r3, [r3, #1]
 800a408:	2b24      	cmp	r3, #36	@ 0x24
 800a40a:	d106      	bne.n	800a41a <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 800a410:	2b01      	cmp	r3, #1
 800a412:	d102      	bne.n	800a41a <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
      {
        pAudioDesc = (uint8_t *)pdesc;
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	613b      	str	r3, [r7, #16]
        break;
 800a418:	e005      	b.n	800a426 <USBD_AUDIO_GetAudioHeaderDesc+0x5a>
    while (ptr < desc->wTotalLength)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	885b      	ldrh	r3, [r3, #2]
 800a41e:	b29a      	uxth	r2, r3
 800a420:	897b      	ldrh	r3, [r7, #10]
 800a422:	429a      	cmp	r2, r3
 800a424:	d8e7      	bhi.n	800a3f6 <USBD_AUDIO_GetAudioHeaderDesc+0x2a>
      }
    }
  }
  return pAudioDesc;
 800a426:	693b      	ldr	r3, [r7, #16]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3718      	adds	r7, #24
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b086      	sub	sp, #24
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	4613      	mov	r3, r2
 800a43c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d101      	bne.n	800a448 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a444:	2303      	movs	r3, #3
 800a446:	e01f      	b.n	800a488 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2200      	movs	r2, #0
 800a454:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d003      	beq.n	800a46e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	68ba      	ldr	r2, [r7, #8]
 800a46a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2201      	movs	r2, #1
 800a472:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	79fa      	ldrb	r2, [r7, #7]
 800a47a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	f001 fe1d 	bl	800c0bc <USBD_LL_Init>
 800a482:	4603      	mov	r3, r0
 800a484:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a486:	7dfb      	ldrb	r3, [r7, #23]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3718      	adds	r7, #24
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a49a:	2300      	movs	r3, #0
 800a49c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d101      	bne.n	800a4a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	e025      	b.n	800a4f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	683a      	ldr	r2, [r7, #0]
 800a4ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	32ae      	adds	r2, #174	@ 0xae
 800a4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00f      	beq.n	800a4e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	32ae      	adds	r2, #174	@ 0xae
 800a4ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4d4:	f107 020e 	add.w	r2, r7, #14
 800a4d8:	4610      	mov	r0, r2
 800a4da:	4798      	blx	r3
 800a4dc:	4602      	mov	r2, r0
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a4ea:	1c5a      	adds	r2, r3, #1
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a4f2:	2300      	movs	r3, #0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f001 fe25 	bl	800c154 <USBD_LL_Start>
 800a50a:	4603      	mov	r3, r0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3708      	adds	r7, #8
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a51c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a51e:	4618      	mov	r0, r3
 800a520:	370c      	adds	r7, #12
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr

0800a52a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b084      	sub	sp, #16
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
 800a532:	460b      	mov	r3, r1
 800a534:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a536:	2300      	movs	r3, #0
 800a538:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a540:	2b00      	cmp	r3, #0
 800a542:	d009      	beq.n	800a558 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	78fa      	ldrb	r2, [r7, #3]
 800a54e:	4611      	mov	r1, r2
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	4798      	blx	r3
 800a554:	4603      	mov	r3, r0
 800a556:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a558:	7bfb      	ldrb	r3, [r7, #15]
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b084      	sub	sp, #16
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	460b      	mov	r3, r1
 800a56c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a56e:	2300      	movs	r3, #0
 800a570:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	78fa      	ldrb	r2, [r7, #3]
 800a57c:	4611      	mov	r1, r2
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	4798      	blx	r3
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d001      	beq.n	800a58c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a588:	2303      	movs	r3, #3
 800a58a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b084      	sub	sp, #16
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a5a6:	6839      	ldr	r1, [r7, #0]
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f001 f8fe 	bl	800b7aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a5bc:	461a      	mov	r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a5ca:	f003 031f 	and.w	r3, r3, #31
 800a5ce:	2b02      	cmp	r3, #2
 800a5d0:	d01a      	beq.n	800a608 <USBD_LL_SetupStage+0x72>
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d822      	bhi.n	800a61c <USBD_LL_SetupStage+0x86>
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d002      	beq.n	800a5e0 <USBD_LL_SetupStage+0x4a>
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d00a      	beq.n	800a5f4 <USBD_LL_SetupStage+0x5e>
 800a5de:	e01d      	b.n	800a61c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 fb2b 	bl	800ac44 <USBD_StdDevReq>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a5f2:	e020      	b.n	800a636 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 fb93 	bl	800ad28 <USBD_StdItfReq>
 800a602:	4603      	mov	r3, r0
 800a604:	73fb      	strb	r3, [r7, #15]
      break;
 800a606:	e016      	b.n	800a636 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a60e:	4619      	mov	r1, r3
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fbf5 	bl	800ae00 <USBD_StdEPReq>
 800a616:	4603      	mov	r3, r0
 800a618:	73fb      	strb	r3, [r7, #15]
      break;
 800a61a:	e00c      	b.n	800a636 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a622:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a626:	b2db      	uxtb	r3, r3
 800a628:	4619      	mov	r1, r3
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f001 fe38 	bl	800c2a0 <USBD_LL_StallEP>
 800a630:	4603      	mov	r3, r0
 800a632:	73fb      	strb	r3, [r7, #15]
      break;
 800a634:	bf00      	nop
  }

  return ret;
 800a636:	7bfb      	ldrb	r3, [r7, #15]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	460b      	mov	r3, r1
 800a64a:	607a      	str	r2, [r7, #4]
 800a64c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a64e:	2300      	movs	r3, #0
 800a650:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a652:	7afb      	ldrb	r3, [r7, #11]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d16e      	bne.n	800a736 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a65e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a666:	2b03      	cmp	r3, #3
 800a668:	f040 8098 	bne.w	800a79c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	689a      	ldr	r2, [r3, #8]
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	429a      	cmp	r2, r3
 800a676:	d913      	bls.n	800a6a0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	689a      	ldr	r2, [r3, #8]
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	1ad2      	subs	r2, r2, r3
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	68da      	ldr	r2, [r3, #12]
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	4293      	cmp	r3, r2
 800a690:	bf28      	it	cs
 800a692:	4613      	movcs	r3, r2
 800a694:	461a      	mov	r2, r3
 800a696:	6879      	ldr	r1, [r7, #4]
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f001 f986 	bl	800b9aa <USBD_CtlContinueRx>
 800a69e:	e07d      	b.n	800a79c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a6a6:	f003 031f 	and.w	r3, r3, #31
 800a6aa:	2b02      	cmp	r3, #2
 800a6ac:	d014      	beq.n	800a6d8 <USBD_LL_DataOutStage+0x98>
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d81d      	bhi.n	800a6ee <USBD_LL_DataOutStage+0xae>
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d002      	beq.n	800a6bc <USBD_LL_DataOutStage+0x7c>
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d003      	beq.n	800a6c2 <USBD_LL_DataOutStage+0x82>
 800a6ba:	e018      	b.n	800a6ee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	75bb      	strb	r3, [r7, #22]
            break;
 800a6c0:	e018      	b.n	800a6f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	f000 fa64 	bl	800ab9a <USBD_CoreFindIF>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	75bb      	strb	r3, [r7, #22]
            break;
 800a6d6:	e00d      	b.n	800a6f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f000 fa66 	bl	800abb4 <USBD_CoreFindEP>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	75bb      	strb	r3, [r7, #22]
            break;
 800a6ec:	e002      	b.n	800a6f4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	75bb      	strb	r3, [r7, #22]
            break;
 800a6f2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a6f4:	7dbb      	ldrb	r3, [r7, #22]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d119      	bne.n	800a72e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a700:	b2db      	uxtb	r3, r3
 800a702:	2b03      	cmp	r3, #3
 800a704:	d113      	bne.n	800a72e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a706:	7dba      	ldrb	r2, [r7, #22]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	32ae      	adds	r2, #174	@ 0xae
 800a70c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00b      	beq.n	800a72e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a716:	7dba      	ldrb	r2, [r7, #22]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a71e:	7dba      	ldrb	r2, [r7, #22]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	32ae      	adds	r2, #174	@ 0xae
 800a724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	f001 f94c 	bl	800b9cc <USBD_CtlSendStatus>
 800a734:	e032      	b.n	800a79c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a736:	7afb      	ldrb	r3, [r7, #11]
 800a738:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	4619      	mov	r1, r3
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f000 fa37 	bl	800abb4 <USBD_CoreFindEP>
 800a746:	4603      	mov	r3, r0
 800a748:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a74a:	7dbb      	ldrb	r3, [r7, #22]
 800a74c:	2bff      	cmp	r3, #255	@ 0xff
 800a74e:	d025      	beq.n	800a79c <USBD_LL_DataOutStage+0x15c>
 800a750:	7dbb      	ldrb	r3, [r7, #22]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d122      	bne.n	800a79c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	2b03      	cmp	r3, #3
 800a760:	d117      	bne.n	800a792 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a762:	7dba      	ldrb	r2, [r7, #22]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	32ae      	adds	r2, #174	@ 0xae
 800a768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a76c:	699b      	ldr	r3, [r3, #24]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00f      	beq.n	800a792 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a772:	7dba      	ldrb	r2, [r7, #22]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a77a:	7dba      	ldrb	r2, [r7, #22]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	32ae      	adds	r2, #174	@ 0xae
 800a780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	7afa      	ldrb	r2, [r7, #11]
 800a788:	4611      	mov	r1, r2
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	4798      	blx	r3
 800a78e:	4603      	mov	r3, r0
 800a790:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a792:	7dfb      	ldrb	r3, [r7, #23]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d001      	beq.n	800a79c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a798:	7dfb      	ldrb	r3, [r7, #23]
 800a79a:	e000      	b.n	800a79e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3718      	adds	r7, #24
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b086      	sub	sp, #24
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	60f8      	str	r0, [r7, #12]
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	607a      	str	r2, [r7, #4]
 800a7b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a7b4:	7afb      	ldrb	r3, [r7, #11]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d16f      	bne.n	800a89a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	3314      	adds	r3, #20
 800a7be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	d15a      	bne.n	800a880 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	689a      	ldr	r2, [r3, #8]
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d914      	bls.n	800a800 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	689a      	ldr	r2, [r3, #8]
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	68db      	ldr	r3, [r3, #12]
 800a7de:	1ad2      	subs	r2, r2, r3
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	6879      	ldr	r1, [r7, #4]
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f001 f8ae 	bl	800b94e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	2100      	movs	r1, #0
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f001 fe57 	bl	800c4ac <USBD_LL_PrepareReceive>
 800a7fe:	e03f      	b.n	800a880 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	68da      	ldr	r2, [r3, #12]
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d11c      	bne.n	800a846 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	685a      	ldr	r2, [r3, #4]
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a814:	429a      	cmp	r2, r3
 800a816:	d316      	bcc.n	800a846 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	685a      	ldr	r2, [r3, #4]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a822:	429a      	cmp	r2, r3
 800a824:	d20f      	bcs.n	800a846 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a826:	2200      	movs	r2, #0
 800a828:	2100      	movs	r1, #0
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f001 f88f 	bl	800b94e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2200      	movs	r2, #0
 800a834:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a838:	2300      	movs	r3, #0
 800a83a:	2200      	movs	r2, #0
 800a83c:	2100      	movs	r1, #0
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f001 fe34 	bl	800c4ac <USBD_LL_PrepareReceive>
 800a844:	e01c      	b.n	800a880 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	2b03      	cmp	r3, #3
 800a850:	d10f      	bne.n	800a872 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d009      	beq.n	800a872 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a872:	2180      	movs	r1, #128	@ 0x80
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f001 fd13 	bl	800c2a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	f001 f8b9 	bl	800b9f2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a886:	2b00      	cmp	r3, #0
 800a888:	d03a      	beq.n	800a900 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f7ff fe42 	bl	800a514 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2200      	movs	r2, #0
 800a894:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a898:	e032      	b.n	800a900 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a89a:	7afb      	ldrb	r3, [r7, #11]
 800a89c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f000 f985 	bl	800abb4 <USBD_CoreFindEP>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8ae:	7dfb      	ldrb	r3, [r7, #23]
 800a8b0:	2bff      	cmp	r3, #255	@ 0xff
 800a8b2:	d025      	beq.n	800a900 <USBD_LL_DataInStage+0x15a>
 800a8b4:	7dfb      	ldrb	r3, [r7, #23]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d122      	bne.n	800a900 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	2b03      	cmp	r3, #3
 800a8c4:	d11c      	bne.n	800a900 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a8c6:	7dfa      	ldrb	r2, [r7, #23]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	32ae      	adds	r2, #174	@ 0xae
 800a8cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8d0:	695b      	ldr	r3, [r3, #20]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d014      	beq.n	800a900 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a8d6:	7dfa      	ldrb	r2, [r7, #23]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a8de:	7dfa      	ldrb	r2, [r7, #23]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	32ae      	adds	r2, #174	@ 0xae
 800a8e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	7afa      	ldrb	r2, [r7, #11]
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	4798      	blx	r3
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a8f6:	7dbb      	ldrb	r3, [r7, #22]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d001      	beq.n	800a900 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a8fc:	7dbb      	ldrb	r3, [r7, #22]
 800a8fe:	e000      	b.n	800a902 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	3718      	adds	r7, #24
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}

0800a90a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b084      	sub	sp, #16
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2201      	movs	r2, #1
 800a91a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a942:	2b00      	cmp	r3, #0
 800a944:	d014      	beq.n	800a970 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00e      	beq.n	800a970 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	6852      	ldr	r2, [r2, #4]
 800a95e:	b2d2      	uxtb	r2, r2
 800a960:	4611      	mov	r1, r2
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	4798      	blx	r3
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d001      	beq.n	800a970 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a96c:	2303      	movs	r3, #3
 800a96e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a970:	2340      	movs	r3, #64	@ 0x40
 800a972:	2200      	movs	r2, #0
 800a974:	2100      	movs	r1, #0
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f001 fc1e 	bl	800c1b8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2240      	movs	r2, #64	@ 0x40
 800a988:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a98c:	2340      	movs	r3, #64	@ 0x40
 800a98e:	2200      	movs	r2, #0
 800a990:	2180      	movs	r1, #128	@ 0x80
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f001 fc10 	bl	800c1b8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2201      	movs	r2, #1
 800a99c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2240      	movs	r2, #64	@ 0x40
 800a9a2:	621a      	str	r2, [r3, #32]

  return ret;
 800a9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a9ae:	b480      	push	{r7}
 800a9b0:	b083      	sub	sp, #12
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	78fa      	ldrb	r2, [r7, #3]
 800a9be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	370c      	adds	r7, #12
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a9ce:	b480      	push	{r7}
 800a9d0:	b083      	sub	sp, #12
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	2b04      	cmp	r3, #4
 800a9e0:	d006      	beq.n	800a9f0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9e8:	b2da      	uxtb	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2204      	movs	r2, #4
 800a9f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a9f8:	2300      	movs	r3, #0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	370c      	adds	r7, #12
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr

0800aa06 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa06:	b480      	push	{r7}
 800aa08:	b083      	sub	sp, #12
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	2b04      	cmp	r3, #4
 800aa18:	d106      	bne.n	800aa28 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800aa20:	b2da      	uxtb	r2, r3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	370c      	adds	r7, #12
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr

0800aa36 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b082      	sub	sp, #8
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	2b03      	cmp	r3, #3
 800aa48:	d110      	bne.n	800aa6c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00b      	beq.n	800aa6c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa5a:	69db      	ldr	r3, [r3, #28]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d005      	beq.n	800aa6c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa66:	69db      	ldr	r3, [r3, #28]
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aa6c:	2300      	movs	r3, #0
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b082      	sub	sp, #8
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
 800aa7e:	460b      	mov	r3, r1
 800aa80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	32ae      	adds	r2, #174	@ 0xae
 800aa8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d101      	bne.n	800aa98 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aa94:	2303      	movs	r3, #3
 800aa96:	e01c      	b.n	800aad2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	2b03      	cmp	r3, #3
 800aaa2:	d115      	bne.n	800aad0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	32ae      	adds	r2, #174	@ 0xae
 800aaae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab2:	6a1b      	ldr	r3, [r3, #32]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d00b      	beq.n	800aad0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	32ae      	adds	r2, #174	@ 0xae
 800aac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac6:	6a1b      	ldr	r3, [r3, #32]
 800aac8:	78fa      	ldrb	r2, [r7, #3]
 800aaca:	4611      	mov	r1, r2
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aada:	b580      	push	{r7, lr}
 800aadc:	b082      	sub	sp, #8
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
 800aae2:	460b      	mov	r3, r1
 800aae4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	32ae      	adds	r2, #174	@ 0xae
 800aaf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d101      	bne.n	800aafc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	e01c      	b.n	800ab36 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	2b03      	cmp	r3, #3
 800ab06:	d115      	bne.n	800ab34 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	32ae      	adds	r2, #174	@ 0xae
 800ab12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00b      	beq.n	800ab34 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	32ae      	adds	r2, #174	@ 0xae
 800ab26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab2c:	78fa      	ldrb	r2, [r7, #3]
 800ab2e:	4611      	mov	r1, r2
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3708      	adds	r7, #8
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ab3e:	b480      	push	{r7}
 800ab40:	b083      	sub	sp, #12
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab46:	2300      	movs	r3, #0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	370c      	adds	r7, #12
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00e      	beq.n	800ab90 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	6852      	ldr	r2, [r2, #4]
 800ab7e:	b2d2      	uxtb	r2, r2
 800ab80:	4611      	mov	r1, r2
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	4798      	blx	r3
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d001      	beq.n	800ab90 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b083      	sub	sp, #12
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
 800aba2:	460b      	mov	r3, r1
 800aba4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aba6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	460b      	mov	r3, r1
 800abbe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800abc0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	370c      	adds	r7, #12
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr

0800abce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800abce:	b480      	push	{r7}
 800abd0:	b085      	sub	sp, #20
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
 800abd6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	881b      	ldrh	r3, [r3, #0]
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	7812      	ldrb	r2, [r2, #0]
 800abe4:	4413      	add	r3, r2
 800abe6:	b29a      	uxth	r2, r3
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	461a      	mov	r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4413      	add	r3, r2
 800abf6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800abf8:	68fb      	ldr	r3, [r7, #12]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3714      	adds	r7, #20
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr

0800ac06 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ac06:	b480      	push	{r7}
 800ac08:	b087      	sub	sp, #28
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ac24:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ac28:	021b      	lsls	r3, r3, #8
 800ac2a:	b21a      	sxth	r2, r3
 800ac2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac30:	4313      	orrs	r3, r2
 800ac32:	b21b      	sxth	r3, r3
 800ac34:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ac36:	89fb      	ldrh	r3, [r7, #14]
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	371c      	adds	r7, #28
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ac5a:	2b40      	cmp	r3, #64	@ 0x40
 800ac5c:	d005      	beq.n	800ac6a <USBD_StdDevReq+0x26>
 800ac5e:	2b40      	cmp	r3, #64	@ 0x40
 800ac60:	d857      	bhi.n	800ad12 <USBD_StdDevReq+0xce>
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00f      	beq.n	800ac86 <USBD_StdDevReq+0x42>
 800ac66:	2b20      	cmp	r3, #32
 800ac68:	d153      	bne.n	800ad12 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	32ae      	adds	r2, #174	@ 0xae
 800ac74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	6839      	ldr	r1, [r7, #0]
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	4798      	blx	r3
 800ac80:	4603      	mov	r3, r0
 800ac82:	73fb      	strb	r3, [r7, #15]
      break;
 800ac84:	e04a      	b.n	800ad1c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	785b      	ldrb	r3, [r3, #1]
 800ac8a:	2b09      	cmp	r3, #9
 800ac8c:	d83b      	bhi.n	800ad06 <USBD_StdDevReq+0xc2>
 800ac8e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac94 <USBD_StdDevReq+0x50>)
 800ac90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac94:	0800ace9 	.word	0x0800ace9
 800ac98:	0800acfd 	.word	0x0800acfd
 800ac9c:	0800ad07 	.word	0x0800ad07
 800aca0:	0800acf3 	.word	0x0800acf3
 800aca4:	0800ad07 	.word	0x0800ad07
 800aca8:	0800acc7 	.word	0x0800acc7
 800acac:	0800acbd 	.word	0x0800acbd
 800acb0:	0800ad07 	.word	0x0800ad07
 800acb4:	0800acdf 	.word	0x0800acdf
 800acb8:	0800acd1 	.word	0x0800acd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800acbc:	6839      	ldr	r1, [r7, #0]
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 fa3c 	bl	800b13c <USBD_GetDescriptor>
          break;
 800acc4:	e024      	b.n	800ad10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800acc6:	6839      	ldr	r1, [r7, #0]
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 fbcb 	bl	800b464 <USBD_SetAddress>
          break;
 800acce:	e01f      	b.n	800ad10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800acd0:	6839      	ldr	r1, [r7, #0]
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 fc0a 	bl	800b4ec <USBD_SetConfig>
 800acd8:	4603      	mov	r3, r0
 800acda:	73fb      	strb	r3, [r7, #15]
          break;
 800acdc:	e018      	b.n	800ad10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800acde:	6839      	ldr	r1, [r7, #0]
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fcad 	bl	800b640 <USBD_GetConfig>
          break;
 800ace6:	e013      	b.n	800ad10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ace8:	6839      	ldr	r1, [r7, #0]
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 fcde 	bl	800b6ac <USBD_GetStatus>
          break;
 800acf0:	e00e      	b.n	800ad10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800acf2:	6839      	ldr	r1, [r7, #0]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 fd0d 	bl	800b714 <USBD_SetFeature>
          break;
 800acfa:	e009      	b.n	800ad10 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800acfc:	6839      	ldr	r1, [r7, #0]
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 fd31 	bl	800b766 <USBD_ClrFeature>
          break;
 800ad04:	e004      	b.n	800ad10 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ad06:	6839      	ldr	r1, [r7, #0]
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fd88 	bl	800b81e <USBD_CtlError>
          break;
 800ad0e:	bf00      	nop
      }
      break;
 800ad10:	e004      	b.n	800ad1c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ad12:	6839      	ldr	r1, [r7, #0]
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 fd82 	bl	800b81e <USBD_CtlError>
      break;
 800ad1a:	bf00      	nop
  }

  return ret;
 800ad1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop

0800ad28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad32:	2300      	movs	r3, #0
 800ad34:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad3e:	2b40      	cmp	r3, #64	@ 0x40
 800ad40:	d005      	beq.n	800ad4e <USBD_StdItfReq+0x26>
 800ad42:	2b40      	cmp	r3, #64	@ 0x40
 800ad44:	d852      	bhi.n	800adec <USBD_StdItfReq+0xc4>
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d001      	beq.n	800ad4e <USBD_StdItfReq+0x26>
 800ad4a:	2b20      	cmp	r3, #32
 800ad4c:	d14e      	bne.n	800adec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	3b01      	subs	r3, #1
 800ad58:	2b02      	cmp	r3, #2
 800ad5a:	d840      	bhi.n	800adde <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	889b      	ldrh	r3, [r3, #4]
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d836      	bhi.n	800add4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	889b      	ldrh	r3, [r3, #4]
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f7ff ff13 	bl	800ab9a <USBD_CoreFindIF>
 800ad74:	4603      	mov	r3, r0
 800ad76:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad78:	7bbb      	ldrb	r3, [r7, #14]
 800ad7a:	2bff      	cmp	r3, #255	@ 0xff
 800ad7c:	d01d      	beq.n	800adba <USBD_StdItfReq+0x92>
 800ad7e:	7bbb      	ldrb	r3, [r7, #14]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d11a      	bne.n	800adba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ad84:	7bba      	ldrb	r2, [r7, #14]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	32ae      	adds	r2, #174	@ 0xae
 800ad8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00f      	beq.n	800adb4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ad94:	7bba      	ldrb	r2, [r7, #14]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ad9c:	7bba      	ldrb	r2, [r7, #14]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	32ae      	adds	r2, #174	@ 0xae
 800ada2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	6839      	ldr	r1, [r7, #0]
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	4798      	blx	r3
 800adae:	4603      	mov	r3, r0
 800adb0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800adb2:	e004      	b.n	800adbe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800adb4:	2303      	movs	r3, #3
 800adb6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800adb8:	e001      	b.n	800adbe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800adba:	2303      	movs	r3, #3
 800adbc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	88db      	ldrh	r3, [r3, #6]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d110      	bne.n	800ade8 <USBD_StdItfReq+0xc0>
 800adc6:	7bfb      	ldrb	r3, [r7, #15]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10d      	bne.n	800ade8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 fdfd 	bl	800b9cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800add2:	e009      	b.n	800ade8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800add4:	6839      	ldr	r1, [r7, #0]
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 fd21 	bl	800b81e <USBD_CtlError>
          break;
 800addc:	e004      	b.n	800ade8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800adde:	6839      	ldr	r1, [r7, #0]
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fd1c 	bl	800b81e <USBD_CtlError>
          break;
 800ade6:	e000      	b.n	800adea <USBD_StdItfReq+0xc2>
          break;
 800ade8:	bf00      	nop
      }
      break;
 800adea:	e004      	b.n	800adf6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800adec:	6839      	ldr	r1, [r7, #0]
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 fd15 	bl	800b81e <USBD_CtlError>
      break;
 800adf4:	bf00      	nop
  }

  return ret;
 800adf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	889b      	ldrh	r3, [r3, #4]
 800ae12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae1c:	2b40      	cmp	r3, #64	@ 0x40
 800ae1e:	d007      	beq.n	800ae30 <USBD_StdEPReq+0x30>
 800ae20:	2b40      	cmp	r3, #64	@ 0x40
 800ae22:	f200 817f 	bhi.w	800b124 <USBD_StdEPReq+0x324>
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d02a      	beq.n	800ae80 <USBD_StdEPReq+0x80>
 800ae2a:	2b20      	cmp	r3, #32
 800ae2c:	f040 817a 	bne.w	800b124 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ae30:	7bbb      	ldrb	r3, [r7, #14]
 800ae32:	4619      	mov	r1, r3
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f7ff febd 	bl	800abb4 <USBD_CoreFindEP>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae3e:	7b7b      	ldrb	r3, [r7, #13]
 800ae40:	2bff      	cmp	r3, #255	@ 0xff
 800ae42:	f000 8174 	beq.w	800b12e <USBD_StdEPReq+0x32e>
 800ae46:	7b7b      	ldrb	r3, [r7, #13]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	f040 8170 	bne.w	800b12e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ae4e:	7b7a      	ldrb	r2, [r7, #13]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ae56:	7b7a      	ldrb	r2, [r7, #13]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	32ae      	adds	r2, #174	@ 0xae
 800ae5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	f000 8163 	beq.w	800b12e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ae68:	7b7a      	ldrb	r2, [r7, #13]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	32ae      	adds	r2, #174	@ 0xae
 800ae6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	6839      	ldr	r1, [r7, #0]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	4798      	blx	r3
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ae7e:	e156      	b.n	800b12e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	785b      	ldrb	r3, [r3, #1]
 800ae84:	2b03      	cmp	r3, #3
 800ae86:	d008      	beq.n	800ae9a <USBD_StdEPReq+0x9a>
 800ae88:	2b03      	cmp	r3, #3
 800ae8a:	f300 8145 	bgt.w	800b118 <USBD_StdEPReq+0x318>
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	f000 809b 	beq.w	800afca <USBD_StdEPReq+0x1ca>
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d03c      	beq.n	800af12 <USBD_StdEPReq+0x112>
 800ae98:	e13e      	b.n	800b118 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	2b02      	cmp	r3, #2
 800aea4:	d002      	beq.n	800aeac <USBD_StdEPReq+0xac>
 800aea6:	2b03      	cmp	r3, #3
 800aea8:	d016      	beq.n	800aed8 <USBD_StdEPReq+0xd8>
 800aeaa:	e02c      	b.n	800af06 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aeac:	7bbb      	ldrb	r3, [r7, #14]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d00d      	beq.n	800aece <USBD_StdEPReq+0xce>
 800aeb2:	7bbb      	ldrb	r3, [r7, #14]
 800aeb4:	2b80      	cmp	r3, #128	@ 0x80
 800aeb6:	d00a      	beq.n	800aece <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aeb8:	7bbb      	ldrb	r3, [r7, #14]
 800aeba:	4619      	mov	r1, r3
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f001 f9ef 	bl	800c2a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aec2:	2180      	movs	r1, #128	@ 0x80
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f001 f9eb 	bl	800c2a0 <USBD_LL_StallEP>
 800aeca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aecc:	e020      	b.n	800af10 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800aece:	6839      	ldr	r1, [r7, #0]
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 fca4 	bl	800b81e <USBD_CtlError>
              break;
 800aed6:	e01b      	b.n	800af10 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	885b      	ldrh	r3, [r3, #2]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d10e      	bne.n	800aefe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aee0:	7bbb      	ldrb	r3, [r7, #14]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00b      	beq.n	800aefe <USBD_StdEPReq+0xfe>
 800aee6:	7bbb      	ldrb	r3, [r7, #14]
 800aee8:	2b80      	cmp	r3, #128	@ 0x80
 800aeea:	d008      	beq.n	800aefe <USBD_StdEPReq+0xfe>
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	88db      	ldrh	r3, [r3, #6]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d104      	bne.n	800aefe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aef4:	7bbb      	ldrb	r3, [r7, #14]
 800aef6:	4619      	mov	r1, r3
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f001 f9d1 	bl	800c2a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 fd64 	bl	800b9cc <USBD_CtlSendStatus>

              break;
 800af04:	e004      	b.n	800af10 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800af06:	6839      	ldr	r1, [r7, #0]
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 fc88 	bl	800b81e <USBD_CtlError>
              break;
 800af0e:	bf00      	nop
          }
          break;
 800af10:	e107      	b.n	800b122 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d002      	beq.n	800af24 <USBD_StdEPReq+0x124>
 800af1e:	2b03      	cmp	r3, #3
 800af20:	d016      	beq.n	800af50 <USBD_StdEPReq+0x150>
 800af22:	e04b      	b.n	800afbc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af24:	7bbb      	ldrb	r3, [r7, #14]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00d      	beq.n	800af46 <USBD_StdEPReq+0x146>
 800af2a:	7bbb      	ldrb	r3, [r7, #14]
 800af2c:	2b80      	cmp	r3, #128	@ 0x80
 800af2e:	d00a      	beq.n	800af46 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af30:	7bbb      	ldrb	r3, [r7, #14]
 800af32:	4619      	mov	r1, r3
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f001 f9b3 	bl	800c2a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af3a:	2180      	movs	r1, #128	@ 0x80
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f001 f9af 	bl	800c2a0 <USBD_LL_StallEP>
 800af42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af44:	e040      	b.n	800afc8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 fc68 	bl	800b81e <USBD_CtlError>
              break;
 800af4e:	e03b      	b.n	800afc8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	885b      	ldrh	r3, [r3, #2]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d136      	bne.n	800afc6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800af58:	7bbb      	ldrb	r3, [r7, #14]
 800af5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d004      	beq.n	800af6c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800af62:	7bbb      	ldrb	r3, [r7, #14]
 800af64:	4619      	mov	r1, r3
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f001 f9d0 	bl	800c30c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 fd2d 	bl	800b9cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800af72:	7bbb      	ldrb	r3, [r7, #14]
 800af74:	4619      	mov	r1, r3
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f7ff fe1c 	bl	800abb4 <USBD_CoreFindEP>
 800af7c:	4603      	mov	r3, r0
 800af7e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af80:	7b7b      	ldrb	r3, [r7, #13]
 800af82:	2bff      	cmp	r3, #255	@ 0xff
 800af84:	d01f      	beq.n	800afc6 <USBD_StdEPReq+0x1c6>
 800af86:	7b7b      	ldrb	r3, [r7, #13]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d11c      	bne.n	800afc6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800af8c:	7b7a      	ldrb	r2, [r7, #13]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800af94:	7b7a      	ldrb	r2, [r7, #13]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	32ae      	adds	r2, #174	@ 0xae
 800af9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af9e:	689b      	ldr	r3, [r3, #8]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d010      	beq.n	800afc6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800afa4:	7b7a      	ldrb	r2, [r7, #13]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	32ae      	adds	r2, #174	@ 0xae
 800afaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	4798      	blx	r3
 800afb6:	4603      	mov	r3, r0
 800afb8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800afba:	e004      	b.n	800afc6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800afbc:	6839      	ldr	r1, [r7, #0]
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 fc2d 	bl	800b81e <USBD_CtlError>
              break;
 800afc4:	e000      	b.n	800afc8 <USBD_StdEPReq+0x1c8>
              break;
 800afc6:	bf00      	nop
          }
          break;
 800afc8:	e0ab      	b.n	800b122 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	2b02      	cmp	r3, #2
 800afd4:	d002      	beq.n	800afdc <USBD_StdEPReq+0x1dc>
 800afd6:	2b03      	cmp	r3, #3
 800afd8:	d032      	beq.n	800b040 <USBD_StdEPReq+0x240>
 800afda:	e097      	b.n	800b10c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afdc:	7bbb      	ldrb	r3, [r7, #14]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d007      	beq.n	800aff2 <USBD_StdEPReq+0x1f2>
 800afe2:	7bbb      	ldrb	r3, [r7, #14]
 800afe4:	2b80      	cmp	r3, #128	@ 0x80
 800afe6:	d004      	beq.n	800aff2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800afe8:	6839      	ldr	r1, [r7, #0]
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 fc17 	bl	800b81e <USBD_CtlError>
                break;
 800aff0:	e091      	b.n	800b116 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aff2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	da0b      	bge.n	800b012 <USBD_StdEPReq+0x212>
 800affa:	7bbb      	ldrb	r3, [r7, #14]
 800affc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b000:	4613      	mov	r3, r2
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	4413      	add	r3, r2
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	3310      	adds	r3, #16
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	4413      	add	r3, r2
 800b00e:	3304      	adds	r3, #4
 800b010:	e00b      	b.n	800b02a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b012:	7bbb      	ldrb	r3, [r7, #14]
 800b014:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b018:	4613      	mov	r3, r2
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	4413      	add	r3, r2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	4413      	add	r3, r2
 800b028:	3304      	adds	r3, #4
 800b02a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	2200      	movs	r2, #0
 800b030:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	2202      	movs	r2, #2
 800b036:	4619      	mov	r1, r3
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 fc6d 	bl	800b918 <USBD_CtlSendData>
              break;
 800b03e:	e06a      	b.n	800b116 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b040:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b044:	2b00      	cmp	r3, #0
 800b046:	da11      	bge.n	800b06c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b048:	7bbb      	ldrb	r3, [r7, #14]
 800b04a:	f003 020f 	and.w	r2, r3, #15
 800b04e:	6879      	ldr	r1, [r7, #4]
 800b050:	4613      	mov	r3, r2
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	4413      	add	r3, r2
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	440b      	add	r3, r1
 800b05a:	3324      	adds	r3, #36	@ 0x24
 800b05c:	881b      	ldrh	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d117      	bne.n	800b092 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b062:	6839      	ldr	r1, [r7, #0]
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 fbda 	bl	800b81e <USBD_CtlError>
                  break;
 800b06a:	e054      	b.n	800b116 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b06c:	7bbb      	ldrb	r3, [r7, #14]
 800b06e:	f003 020f 	and.w	r2, r3, #15
 800b072:	6879      	ldr	r1, [r7, #4]
 800b074:	4613      	mov	r3, r2
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	4413      	add	r3, r2
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	440b      	add	r3, r1
 800b07e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b082:	881b      	ldrh	r3, [r3, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d104      	bne.n	800b092 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b088:	6839      	ldr	r1, [r7, #0]
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 fbc7 	bl	800b81e <USBD_CtlError>
                  break;
 800b090:	e041      	b.n	800b116 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b092:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b096:	2b00      	cmp	r3, #0
 800b098:	da0b      	bge.n	800b0b2 <USBD_StdEPReq+0x2b2>
 800b09a:	7bbb      	ldrb	r3, [r7, #14]
 800b09c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0a0:	4613      	mov	r3, r2
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	4413      	add	r3, r2
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	3310      	adds	r3, #16
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	3304      	adds	r3, #4
 800b0b0:	e00b      	b.n	800b0ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0b2:	7bbb      	ldrb	r3, [r7, #14]
 800b0b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4413      	add	r3, r2
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	3304      	adds	r3, #4
 800b0ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b0cc:	7bbb      	ldrb	r3, [r7, #14]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d002      	beq.n	800b0d8 <USBD_StdEPReq+0x2d8>
 800b0d2:	7bbb      	ldrb	r3, [r7, #14]
 800b0d4:	2b80      	cmp	r3, #128	@ 0x80
 800b0d6:	d103      	bne.n	800b0e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	601a      	str	r2, [r3, #0]
 800b0de:	e00e      	b.n	800b0fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b0e0:	7bbb      	ldrb	r3, [r7, #14]
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f001 f947 	bl	800c378 <USBD_LL_IsStallEP>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d003      	beq.n	800b0f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	601a      	str	r2, [r3, #0]
 800b0f6:	e002      	b.n	800b0fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	2202      	movs	r2, #2
 800b102:	4619      	mov	r1, r3
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 fc07 	bl	800b918 <USBD_CtlSendData>
              break;
 800b10a:	e004      	b.n	800b116 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b10c:	6839      	ldr	r1, [r7, #0]
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 fb85 	bl	800b81e <USBD_CtlError>
              break;
 800b114:	bf00      	nop
          }
          break;
 800b116:	e004      	b.n	800b122 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b118:	6839      	ldr	r1, [r7, #0]
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 fb7f 	bl	800b81e <USBD_CtlError>
          break;
 800b120:	bf00      	nop
      }
      break;
 800b122:	e005      	b.n	800b130 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b124:	6839      	ldr	r1, [r7, #0]
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 fb79 	bl	800b81e <USBD_CtlError>
      break;
 800b12c:	e000      	b.n	800b130 <USBD_StdEPReq+0x330>
      break;
 800b12e:	bf00      	nop
  }

  return ret;
 800b130:	7bfb      	ldrb	r3, [r7, #15]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3710      	adds	r7, #16
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
	...

0800b13c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b146:	2300      	movs	r3, #0
 800b148:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b14a:	2300      	movs	r3, #0
 800b14c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b14e:	2300      	movs	r3, #0
 800b150:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	885b      	ldrh	r3, [r3, #2]
 800b156:	0a1b      	lsrs	r3, r3, #8
 800b158:	b29b      	uxth	r3, r3
 800b15a:	3b01      	subs	r3, #1
 800b15c:	2b0e      	cmp	r3, #14
 800b15e:	f200 8152 	bhi.w	800b406 <USBD_GetDescriptor+0x2ca>
 800b162:	a201      	add	r2, pc, #4	@ (adr r2, 800b168 <USBD_GetDescriptor+0x2c>)
 800b164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b168:	0800b1d9 	.word	0x0800b1d9
 800b16c:	0800b1f1 	.word	0x0800b1f1
 800b170:	0800b231 	.word	0x0800b231
 800b174:	0800b407 	.word	0x0800b407
 800b178:	0800b407 	.word	0x0800b407
 800b17c:	0800b3a7 	.word	0x0800b3a7
 800b180:	0800b3d3 	.word	0x0800b3d3
 800b184:	0800b407 	.word	0x0800b407
 800b188:	0800b407 	.word	0x0800b407
 800b18c:	0800b407 	.word	0x0800b407
 800b190:	0800b407 	.word	0x0800b407
 800b194:	0800b407 	.word	0x0800b407
 800b198:	0800b407 	.word	0x0800b407
 800b19c:	0800b407 	.word	0x0800b407
 800b1a0:	0800b1a5 	.word	0x0800b1a5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1aa:	69db      	ldr	r3, [r3, #28]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d00b      	beq.n	800b1c8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1b6:	69db      	ldr	r3, [r3, #28]
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	7c12      	ldrb	r2, [r2, #16]
 800b1bc:	f107 0108 	add.w	r1, r7, #8
 800b1c0:	4610      	mov	r0, r2
 800b1c2:	4798      	blx	r3
 800b1c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b1c6:	e126      	b.n	800b416 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b1c8:	6839      	ldr	r1, [r7, #0]
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 fb27 	bl	800b81e <USBD_CtlError>
        err++;
 800b1d0:	7afb      	ldrb	r3, [r7, #11]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	72fb      	strb	r3, [r7, #11]
      break;
 800b1d6:	e11e      	b.n	800b416 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	7c12      	ldrb	r2, [r2, #16]
 800b1e4:	f107 0108 	add.w	r1, r7, #8
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	4798      	blx	r3
 800b1ec:	60f8      	str	r0, [r7, #12]
      break;
 800b1ee:	e112      	b.n	800b416 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	7c1b      	ldrb	r3, [r3, #16]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d10d      	bne.n	800b214 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b200:	f107 0208 	add.w	r2, r7, #8
 800b204:	4610      	mov	r0, r2
 800b206:	4798      	blx	r3
 800b208:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	3301      	adds	r3, #1
 800b20e:	2202      	movs	r2, #2
 800b210:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b212:	e100      	b.n	800b416 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b21a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b21c:	f107 0208 	add.w	r2, r7, #8
 800b220:	4610      	mov	r0, r2
 800b222:	4798      	blx	r3
 800b224:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	3301      	adds	r3, #1
 800b22a:	2202      	movs	r2, #2
 800b22c:	701a      	strb	r2, [r3, #0]
      break;
 800b22e:	e0f2      	b.n	800b416 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	885b      	ldrh	r3, [r3, #2]
 800b234:	b2db      	uxtb	r3, r3
 800b236:	2b05      	cmp	r3, #5
 800b238:	f200 80ac 	bhi.w	800b394 <USBD_GetDescriptor+0x258>
 800b23c:	a201      	add	r2, pc, #4	@ (adr r2, 800b244 <USBD_GetDescriptor+0x108>)
 800b23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b242:	bf00      	nop
 800b244:	0800b25d 	.word	0x0800b25d
 800b248:	0800b291 	.word	0x0800b291
 800b24c:	0800b2c5 	.word	0x0800b2c5
 800b250:	0800b2f9 	.word	0x0800b2f9
 800b254:	0800b32d 	.word	0x0800b32d
 800b258:	0800b361 	.word	0x0800b361
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d00b      	beq.n	800b280 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	7c12      	ldrb	r2, [r2, #16]
 800b274:	f107 0108 	add.w	r1, r7, #8
 800b278:	4610      	mov	r0, r2
 800b27a:	4798      	blx	r3
 800b27c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b27e:	e091      	b.n	800b3a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b280:	6839      	ldr	r1, [r7, #0]
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 facb 	bl	800b81e <USBD_CtlError>
            err++;
 800b288:	7afb      	ldrb	r3, [r7, #11]
 800b28a:	3301      	adds	r3, #1
 800b28c:	72fb      	strb	r3, [r7, #11]
          break;
 800b28e:	e089      	b.n	800b3a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d00b      	beq.n	800b2b4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2a2:	689b      	ldr	r3, [r3, #8]
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	7c12      	ldrb	r2, [r2, #16]
 800b2a8:	f107 0108 	add.w	r1, r7, #8
 800b2ac:	4610      	mov	r0, r2
 800b2ae:	4798      	blx	r3
 800b2b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2b2:	e077      	b.n	800b3a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2b4:	6839      	ldr	r1, [r7, #0]
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 fab1 	bl	800b81e <USBD_CtlError>
            err++;
 800b2bc:	7afb      	ldrb	r3, [r7, #11]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b2c2:	e06f      	b.n	800b3a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d00b      	beq.n	800b2e8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	7c12      	ldrb	r2, [r2, #16]
 800b2dc:	f107 0108 	add.w	r1, r7, #8
 800b2e0:	4610      	mov	r0, r2
 800b2e2:	4798      	blx	r3
 800b2e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2e6:	e05d      	b.n	800b3a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2e8:	6839      	ldr	r1, [r7, #0]
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fa97 	bl	800b81e <USBD_CtlError>
            err++;
 800b2f0:	7afb      	ldrb	r3, [r7, #11]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b2f6:	e055      	b.n	800b3a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2fe:	691b      	ldr	r3, [r3, #16]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00b      	beq.n	800b31c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	7c12      	ldrb	r2, [r2, #16]
 800b310:	f107 0108 	add.w	r1, r7, #8
 800b314:	4610      	mov	r0, r2
 800b316:	4798      	blx	r3
 800b318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b31a:	e043      	b.n	800b3a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b31c:	6839      	ldr	r1, [r7, #0]
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 fa7d 	bl	800b81e <USBD_CtlError>
            err++;
 800b324:	7afb      	ldrb	r3, [r7, #11]
 800b326:	3301      	adds	r3, #1
 800b328:	72fb      	strb	r3, [r7, #11]
          break;
 800b32a:	e03b      	b.n	800b3a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b332:	695b      	ldr	r3, [r3, #20]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d00b      	beq.n	800b350 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b33e:	695b      	ldr	r3, [r3, #20]
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	7c12      	ldrb	r2, [r2, #16]
 800b344:	f107 0108 	add.w	r1, r7, #8
 800b348:	4610      	mov	r0, r2
 800b34a:	4798      	blx	r3
 800b34c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b34e:	e029      	b.n	800b3a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b350:	6839      	ldr	r1, [r7, #0]
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 fa63 	bl	800b81e <USBD_CtlError>
            err++;
 800b358:	7afb      	ldrb	r3, [r7, #11]
 800b35a:	3301      	adds	r3, #1
 800b35c:	72fb      	strb	r3, [r7, #11]
          break;
 800b35e:	e021      	b.n	800b3a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b366:	699b      	ldr	r3, [r3, #24]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d00b      	beq.n	800b384 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b372:	699b      	ldr	r3, [r3, #24]
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	7c12      	ldrb	r2, [r2, #16]
 800b378:	f107 0108 	add.w	r1, r7, #8
 800b37c:	4610      	mov	r0, r2
 800b37e:	4798      	blx	r3
 800b380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b382:	e00f      	b.n	800b3a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b384:	6839      	ldr	r1, [r7, #0]
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 fa49 	bl	800b81e <USBD_CtlError>
            err++;
 800b38c:	7afb      	ldrb	r3, [r7, #11]
 800b38e:	3301      	adds	r3, #1
 800b390:	72fb      	strb	r3, [r7, #11]
          break;
 800b392:	e007      	b.n	800b3a4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b394:	6839      	ldr	r1, [r7, #0]
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fa41 	bl	800b81e <USBD_CtlError>
          err++;
 800b39c:	7afb      	ldrb	r3, [r7, #11]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b3a2:	bf00      	nop
      }
      break;
 800b3a4:	e037      	b.n	800b416 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	7c1b      	ldrb	r3, [r3, #16]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d109      	bne.n	800b3c2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3b6:	f107 0208 	add.w	r2, r7, #8
 800b3ba:	4610      	mov	r0, r2
 800b3bc:	4798      	blx	r3
 800b3be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3c0:	e029      	b.n	800b416 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b3c2:	6839      	ldr	r1, [r7, #0]
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 fa2a 	bl	800b81e <USBD_CtlError>
        err++;
 800b3ca:	7afb      	ldrb	r3, [r7, #11]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	72fb      	strb	r3, [r7, #11]
      break;
 800b3d0:	e021      	b.n	800b416 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	7c1b      	ldrb	r3, [r3, #16]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d10d      	bne.n	800b3f6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3e2:	f107 0208 	add.w	r2, r7, #8
 800b3e6:	4610      	mov	r0, r2
 800b3e8:	4798      	blx	r3
 800b3ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	2207      	movs	r2, #7
 800b3f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3f4:	e00f      	b.n	800b416 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b3f6:	6839      	ldr	r1, [r7, #0]
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 fa10 	bl	800b81e <USBD_CtlError>
        err++;
 800b3fe:	7afb      	ldrb	r3, [r7, #11]
 800b400:	3301      	adds	r3, #1
 800b402:	72fb      	strb	r3, [r7, #11]
      break;
 800b404:	e007      	b.n	800b416 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b406:	6839      	ldr	r1, [r7, #0]
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 fa08 	bl	800b81e <USBD_CtlError>
      err++;
 800b40e:	7afb      	ldrb	r3, [r7, #11]
 800b410:	3301      	adds	r3, #1
 800b412:	72fb      	strb	r3, [r7, #11]
      break;
 800b414:	bf00      	nop
  }

  if (err != 0U)
 800b416:	7afb      	ldrb	r3, [r7, #11]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d11e      	bne.n	800b45a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	88db      	ldrh	r3, [r3, #6]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d016      	beq.n	800b452 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b424:	893b      	ldrh	r3, [r7, #8]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00e      	beq.n	800b448 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	88da      	ldrh	r2, [r3, #6]
 800b42e:	893b      	ldrh	r3, [r7, #8]
 800b430:	4293      	cmp	r3, r2
 800b432:	bf28      	it	cs
 800b434:	4613      	movcs	r3, r2
 800b436:	b29b      	uxth	r3, r3
 800b438:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b43a:	893b      	ldrh	r3, [r7, #8]
 800b43c:	461a      	mov	r2, r3
 800b43e:	68f9      	ldr	r1, [r7, #12]
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 fa69 	bl	800b918 <USBD_CtlSendData>
 800b446:	e009      	b.n	800b45c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b448:	6839      	ldr	r1, [r7, #0]
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f9e7 	bl	800b81e <USBD_CtlError>
 800b450:	e004      	b.n	800b45c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 faba 	bl	800b9cc <USBD_CtlSendStatus>
 800b458:	e000      	b.n	800b45c <USBD_GetDescriptor+0x320>
    return;
 800b45a:	bf00      	nop
  }
}
 800b45c:	3710      	adds	r7, #16
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop

0800b464 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	889b      	ldrh	r3, [r3, #4]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d131      	bne.n	800b4da <USBD_SetAddress+0x76>
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	88db      	ldrh	r3, [r3, #6]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d12d      	bne.n	800b4da <USBD_SetAddress+0x76>
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	885b      	ldrh	r3, [r3, #2]
 800b482:	2b7f      	cmp	r3, #127	@ 0x7f
 800b484:	d829      	bhi.n	800b4da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	885b      	ldrh	r3, [r3, #2]
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b490:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b498:	b2db      	uxtb	r3, r3
 800b49a:	2b03      	cmp	r3, #3
 800b49c:	d104      	bne.n	800b4a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b49e:	6839      	ldr	r1, [r7, #0]
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 f9bc 	bl	800b81e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4a6:	e01d      	b.n	800b4e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	7bfa      	ldrb	r2, [r7, #15]
 800b4ac:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b4b0:	7bfb      	ldrb	r3, [r7, #15]
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 ff8b 	bl	800c3d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 fa86 	bl	800b9cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b4c0:	7bfb      	ldrb	r3, [r7, #15]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d004      	beq.n	800b4d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2202      	movs	r2, #2
 800b4ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4ce:	e009      	b.n	800b4e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4d8:	e004      	b.n	800b4e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b4da:	6839      	ldr	r1, [r7, #0]
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 f99e 	bl	800b81e <USBD_CtlError>
  }
}
 800b4e2:	bf00      	nop
 800b4e4:	bf00      	nop
 800b4e6:	3710      	adds	r7, #16
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	885b      	ldrh	r3, [r3, #2]
 800b4fe:	b2da      	uxtb	r2, r3
 800b500:	4b4e      	ldr	r3, [pc, #312]	@ (800b63c <USBD_SetConfig+0x150>)
 800b502:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b504:	4b4d      	ldr	r3, [pc, #308]	@ (800b63c <USBD_SetConfig+0x150>)
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d905      	bls.n	800b518 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b50c:	6839      	ldr	r1, [r7, #0]
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 f985 	bl	800b81e <USBD_CtlError>
    return USBD_FAIL;
 800b514:	2303      	movs	r3, #3
 800b516:	e08c      	b.n	800b632 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	2b02      	cmp	r3, #2
 800b522:	d002      	beq.n	800b52a <USBD_SetConfig+0x3e>
 800b524:	2b03      	cmp	r3, #3
 800b526:	d029      	beq.n	800b57c <USBD_SetConfig+0x90>
 800b528:	e075      	b.n	800b616 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b52a:	4b44      	ldr	r3, [pc, #272]	@ (800b63c <USBD_SetConfig+0x150>)
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d020      	beq.n	800b574 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b532:	4b42      	ldr	r3, [pc, #264]	@ (800b63c <USBD_SetConfig+0x150>)
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	461a      	mov	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b53c:	4b3f      	ldr	r3, [pc, #252]	@ (800b63c <USBD_SetConfig+0x150>)
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	4619      	mov	r1, r3
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f7fe fff1 	bl	800a52a <USBD_SetClassConfig>
 800b548:	4603      	mov	r3, r0
 800b54a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b54c:	7bfb      	ldrb	r3, [r7, #15]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d008      	beq.n	800b564 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b552:	6839      	ldr	r1, [r7, #0]
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 f962 	bl	800b81e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2202      	movs	r2, #2
 800b55e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b562:	e065      	b.n	800b630 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 fa31 	bl	800b9cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2203      	movs	r2, #3
 800b56e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b572:	e05d      	b.n	800b630 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 fa29 	bl	800b9cc <USBD_CtlSendStatus>
      break;
 800b57a:	e059      	b.n	800b630 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b57c:	4b2f      	ldr	r3, [pc, #188]	@ (800b63c <USBD_SetConfig+0x150>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d112      	bne.n	800b5aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2202      	movs	r2, #2
 800b588:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b58c:	4b2b      	ldr	r3, [pc, #172]	@ (800b63c <USBD_SetConfig+0x150>)
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	461a      	mov	r2, r3
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b596:	4b29      	ldr	r3, [pc, #164]	@ (800b63c <USBD_SetConfig+0x150>)
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	4619      	mov	r1, r3
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f7fe ffe0 	bl	800a562 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 fa12 	bl	800b9cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5a8:	e042      	b.n	800b630 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b5aa:	4b24      	ldr	r3, [pc, #144]	@ (800b63c <USBD_SetConfig+0x150>)
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d02a      	beq.n	800b60e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	4619      	mov	r1, r3
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f7fe ffce 	bl	800a562 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b5c6:	4b1d      	ldr	r3, [pc, #116]	@ (800b63c <USBD_SetConfig+0x150>)
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5d0:	4b1a      	ldr	r3, [pc, #104]	@ (800b63c <USBD_SetConfig+0x150>)
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f7fe ffa7 	bl	800a52a <USBD_SetClassConfig>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b5e0:	7bfb      	ldrb	r3, [r7, #15]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d00f      	beq.n	800b606 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b5e6:	6839      	ldr	r1, [r7, #0]
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 f918 	bl	800b81e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f7fe ffb3 	bl	800a562 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2202      	movs	r2, #2
 800b600:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b604:	e014      	b.n	800b630 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 f9e0 	bl	800b9cc <USBD_CtlSendStatus>
      break;
 800b60c:	e010      	b.n	800b630 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f9dc 	bl	800b9cc <USBD_CtlSendStatus>
      break;
 800b614:	e00c      	b.n	800b630 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b616:	6839      	ldr	r1, [r7, #0]
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f000 f900 	bl	800b81e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b61e:	4b07      	ldr	r3, [pc, #28]	@ (800b63c <USBD_SetConfig+0x150>)
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	4619      	mov	r1, r3
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f7fe ff9c 	bl	800a562 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b62a:	2303      	movs	r3, #3
 800b62c:	73fb      	strb	r3, [r7, #15]
      break;
 800b62e:	bf00      	nop
  }

  return ret;
 800b630:	7bfb      	ldrb	r3, [r7, #15]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3710      	adds	r7, #16
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	20000670 	.word	0x20000670

0800b640 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	88db      	ldrh	r3, [r3, #6]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d004      	beq.n	800b65c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b652:	6839      	ldr	r1, [r7, #0]
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 f8e2 	bl	800b81e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b65a:	e023      	b.n	800b6a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b662:	b2db      	uxtb	r3, r3
 800b664:	2b02      	cmp	r3, #2
 800b666:	dc02      	bgt.n	800b66e <USBD_GetConfig+0x2e>
 800b668:	2b00      	cmp	r3, #0
 800b66a:	dc03      	bgt.n	800b674 <USBD_GetConfig+0x34>
 800b66c:	e015      	b.n	800b69a <USBD_GetConfig+0x5a>
 800b66e:	2b03      	cmp	r3, #3
 800b670:	d00b      	beq.n	800b68a <USBD_GetConfig+0x4a>
 800b672:	e012      	b.n	800b69a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	3308      	adds	r3, #8
 800b67e:	2201      	movs	r2, #1
 800b680:	4619      	mov	r1, r3
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 f948 	bl	800b918 <USBD_CtlSendData>
        break;
 800b688:	e00c      	b.n	800b6a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	3304      	adds	r3, #4
 800b68e:	2201      	movs	r2, #1
 800b690:	4619      	mov	r1, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 f940 	bl	800b918 <USBD_CtlSendData>
        break;
 800b698:	e004      	b.n	800b6a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b69a:	6839      	ldr	r1, [r7, #0]
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 f8be 	bl	800b81e <USBD_CtlError>
        break;
 800b6a2:	bf00      	nop
}
 800b6a4:	bf00      	nop
 800b6a6:	3708      	adds	r7, #8
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	2b02      	cmp	r3, #2
 800b6c2:	d81e      	bhi.n	800b702 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	88db      	ldrh	r3, [r3, #6]
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d004      	beq.n	800b6d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b6cc:	6839      	ldr	r1, [r7, #0]
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 f8a5 	bl	800b81e <USBD_CtlError>
        break;
 800b6d4:	e01a      	b.n	800b70c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d005      	beq.n	800b6f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	f043 0202 	orr.w	r2, r3, #2
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	330c      	adds	r3, #12
 800b6f6:	2202      	movs	r2, #2
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 f90c 	bl	800b918 <USBD_CtlSendData>
      break;
 800b700:	e004      	b.n	800b70c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b702:	6839      	ldr	r1, [r7, #0]
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 f88a 	bl	800b81e <USBD_CtlError>
      break;
 800b70a:	bf00      	nop
  }
}
 800b70c:	bf00      	nop
 800b70e:	3708      	adds	r7, #8
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	885b      	ldrh	r3, [r3, #2]
 800b722:	2b01      	cmp	r3, #1
 800b724:	d107      	bne.n	800b736 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2201      	movs	r2, #1
 800b72a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 f94c 	bl	800b9cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b734:	e013      	b.n	800b75e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	885b      	ldrh	r3, [r3, #2]
 800b73a:	2b02      	cmp	r3, #2
 800b73c:	d10b      	bne.n	800b756 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	889b      	ldrh	r3, [r3, #4]
 800b742:	0a1b      	lsrs	r3, r3, #8
 800b744:	b29b      	uxth	r3, r3
 800b746:	b2da      	uxtb	r2, r3
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 f93c 	bl	800b9cc <USBD_CtlSendStatus>
}
 800b754:	e003      	b.n	800b75e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b756:	6839      	ldr	r1, [r7, #0]
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 f860 	bl	800b81e <USBD_CtlError>
}
 800b75e:	bf00      	nop
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b082      	sub	sp, #8
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b776:	b2db      	uxtb	r3, r3
 800b778:	3b01      	subs	r3, #1
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	d80b      	bhi.n	800b796 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	885b      	ldrh	r3, [r3, #2]
 800b782:	2b01      	cmp	r3, #1
 800b784:	d10c      	bne.n	800b7a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2200      	movs	r2, #0
 800b78a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f91c 	bl	800b9cc <USBD_CtlSendStatus>
      }
      break;
 800b794:	e004      	b.n	800b7a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 f840 	bl	800b81e <USBD_CtlError>
      break;
 800b79e:	e000      	b.n	800b7a2 <USBD_ClrFeature+0x3c>
      break;
 800b7a0:	bf00      	nop
  }
}
 800b7a2:	bf00      	nop
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b084      	sub	sp, #16
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
 800b7b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	781a      	ldrb	r2, [r3, #0]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	781a      	ldrb	r2, [r3, #0]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b7d4:	68f8      	ldr	r0, [r7, #12]
 800b7d6:	f7ff fa16 	bl	800ac06 <SWAPBYTE>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	461a      	mov	r2, r3
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f7ff fa09 	bl	800ac06 <SWAPBYTE>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	3301      	adds	r3, #1
 800b800:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	3301      	adds	r3, #1
 800b806:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f7ff f9fc 	bl	800ac06 <SWAPBYTE>
 800b80e:	4603      	mov	r3, r0
 800b810:	461a      	mov	r2, r3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	80da      	strh	r2, [r3, #6]
}
 800b816:	bf00      	nop
 800b818:	3710      	adds	r7, #16
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}

0800b81e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b81e:	b580      	push	{r7, lr}
 800b820:	b082      	sub	sp, #8
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
 800b826:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b828:	2180      	movs	r1, #128	@ 0x80
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 fd38 	bl	800c2a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b830:	2100      	movs	r1, #0
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 fd34 	bl	800c2a0 <USBD_LL_StallEP>
}
 800b838:	bf00      	nop
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b84c:	2300      	movs	r3, #0
 800b84e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d042      	beq.n	800b8dc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b85a:	6938      	ldr	r0, [r7, #16]
 800b85c:	f000 f842 	bl	800b8e4 <USBD_GetLen>
 800b860:	4603      	mov	r3, r0
 800b862:	3301      	adds	r3, #1
 800b864:	005b      	lsls	r3, r3, #1
 800b866:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b86a:	d808      	bhi.n	800b87e <USBD_GetString+0x3e>
 800b86c:	6938      	ldr	r0, [r7, #16]
 800b86e:	f000 f839 	bl	800b8e4 <USBD_GetLen>
 800b872:	4603      	mov	r3, r0
 800b874:	3301      	adds	r3, #1
 800b876:	b29b      	uxth	r3, r3
 800b878:	005b      	lsls	r3, r3, #1
 800b87a:	b29a      	uxth	r2, r3
 800b87c:	e001      	b.n	800b882 <USBD_GetString+0x42>
 800b87e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b886:	7dfb      	ldrb	r3, [r7, #23]
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	4413      	add	r3, r2
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	7812      	ldrb	r2, [r2, #0]
 800b890:	701a      	strb	r2, [r3, #0]
  idx++;
 800b892:	7dfb      	ldrb	r3, [r7, #23]
 800b894:	3301      	adds	r3, #1
 800b896:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b898:	7dfb      	ldrb	r3, [r7, #23]
 800b89a:	68ba      	ldr	r2, [r7, #8]
 800b89c:	4413      	add	r3, r2
 800b89e:	2203      	movs	r2, #3
 800b8a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8a2:	7dfb      	ldrb	r3, [r7, #23]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b8a8:	e013      	b.n	800b8d2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b8aa:	7dfb      	ldrb	r3, [r7, #23]
 800b8ac:	68ba      	ldr	r2, [r7, #8]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	693a      	ldr	r2, [r7, #16]
 800b8b2:	7812      	ldrb	r2, [r2, #0]
 800b8b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	613b      	str	r3, [r7, #16]
    idx++;
 800b8bc:	7dfb      	ldrb	r3, [r7, #23]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b8c2:	7dfb      	ldrb	r3, [r7, #23]
 800b8c4:	68ba      	ldr	r2, [r7, #8]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	701a      	strb	r2, [r3, #0]
    idx++;
 800b8cc:	7dfb      	ldrb	r3, [r7, #23]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d1e7      	bne.n	800b8aa <USBD_GetString+0x6a>
 800b8da:	e000      	b.n	800b8de <USBD_GetString+0x9e>
    return;
 800b8dc:	bf00      	nop
  }
}
 800b8de:	3718      	adds	r7, #24
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b085      	sub	sp, #20
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b8f4:	e005      	b.n	800b902 <USBD_GetLen+0x1e>
  {
    len++;
 800b8f6:	7bfb      	ldrb	r3, [r7, #15]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	3301      	adds	r3, #1
 800b900:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d1f5      	bne.n	800b8f6 <USBD_GetLen+0x12>
  }

  return len;
 800b90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3714      	adds	r7, #20
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2202      	movs	r2, #2
 800b928:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	2100      	movs	r1, #0
 800b93e:	68f8      	ldr	r0, [r7, #12]
 800b940:	f000 fd7c 	bl	800c43c <USBD_LL_Transmit>

  return USBD_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3710      	adds	r7, #16
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b084      	sub	sp, #16
 800b952:	af00      	add	r7, sp, #0
 800b954:	60f8      	str	r0, [r7, #12]
 800b956:	60b9      	str	r1, [r7, #8]
 800b958:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	68ba      	ldr	r2, [r7, #8]
 800b95e:	2100      	movs	r1, #0
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f000 fd6b 	bl	800c43c <USBD_LL_Transmit>

  return USBD_OK;
 800b966:	2300      	movs	r3, #0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3710      	adds	r7, #16
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2203      	movs	r2, #3
 800b980:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	68ba      	ldr	r2, [r7, #8]
 800b998:	2100      	movs	r1, #0
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f000 fd86 	bl	800c4ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9a0:	2300      	movs	r3, #0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b084      	sub	sp, #16
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	60f8      	str	r0, [r7, #12]
 800b9b2:	60b9      	str	r1, [r7, #8]
 800b9b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	68ba      	ldr	r2, [r7, #8]
 800b9ba:	2100      	movs	r1, #0
 800b9bc:	68f8      	ldr	r0, [r7, #12]
 800b9be:	f000 fd75 	bl	800c4ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9c2:	2300      	movs	r3, #0
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3710      	adds	r7, #16
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2204      	movs	r2, #4
 800b9d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b9dc:	2300      	movs	r3, #0
 800b9de:	2200      	movs	r2, #0
 800b9e0:	2100      	movs	r1, #0
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 fd2a 	bl	800c43c <USBD_LL_Transmit>

  return USBD_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b082      	sub	sp, #8
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2205      	movs	r2, #5
 800b9fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba02:	2300      	movs	r3, #0
 800ba04:	2200      	movs	r2, #0
 800ba06:	2100      	movs	r1, #0
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 fd4f 	bl	800c4ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba0e:	2300      	movs	r3, #0
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3708      	adds	r7, #8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	4912      	ldr	r1, [pc, #72]	@ (800ba68 <MX_USB_DEVICE_Init+0x50>)
 800ba20:	4812      	ldr	r0, [pc, #72]	@ (800ba6c <MX_USB_DEVICE_Init+0x54>)
 800ba22:	f7fe fd05 	bl	800a430 <USBD_Init>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d001      	beq.n	800ba30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ba2c:	f7f6 fa5e 	bl	8001eec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800ba30:	490f      	ldr	r1, [pc, #60]	@ (800ba70 <MX_USB_DEVICE_Init+0x58>)
 800ba32:	480e      	ldr	r0, [pc, #56]	@ (800ba6c <MX_USB_DEVICE_Init+0x54>)
 800ba34:	f7fe fd2c 	bl	800a490 <USBD_RegisterClass>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d001      	beq.n	800ba42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ba3e:	f7f6 fa55 	bl	8001eec <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800ba42:	490c      	ldr	r1, [pc, #48]	@ (800ba74 <MX_USB_DEVICE_Init+0x5c>)
 800ba44:	4809      	ldr	r0, [pc, #36]	@ (800ba6c <MX_USB_DEVICE_Init+0x54>)
 800ba46:	f7fe fca7 	bl	800a398 <USBD_AUDIO_RegisterInterface>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d001      	beq.n	800ba54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ba50:	f7f6 fa4c 	bl	8001eec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ba54:	4805      	ldr	r0, [pc, #20]	@ (800ba6c <MX_USB_DEVICE_Init+0x54>)
 800ba56:	f7fe fd51 	bl	800a4fc <USBD_Start>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d001      	beq.n	800ba64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ba60:	f7f6 fa44 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ba64:	bf00      	nop
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	200000e4 	.word	0x200000e4
 800ba6c:	20000674 	.word	0x20000674
 800ba70:	20000014 	.word	0x20000014
 800ba74:	200000c8 	.word	0x200000c8

0800ba78 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b085      	sub	sp, #20
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 800ba84:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3714      	adds	r7, #20
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr

0800ba92 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800ba92:	b480      	push	{r7}
 800ba94:	b083      	sub	sp, #12
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 800ba9a:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	4613      	mov	r3, r2
 800bab4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800bab6:	79fb      	ldrb	r3, [r7, #7]
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d001      	beq.n	800bac0 <AUDIO_AudioCmd_FS+0x18>
 800babc:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800babe:	e000      	b.n	800bac2 <AUDIO_AudioCmd_FS+0x1a>
    break;
 800bac0:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800bac2:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3714      	adds	r7, #20
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	4603      	mov	r3, r0
 800bad8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 800bada:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800badc:	4618      	mov	r0, r3
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800bae8:	b480      	push	{r7}
 800baea:	b083      	sub	sp, #12
 800baec:	af00      	add	r7, sp, #0
 800baee:	4603      	mov	r3, r0
 800baf0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 800baf2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	370c      	adds	r7, #12
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr

0800bb00 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b087      	sub	sp, #28
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	4613      	mov	r3, r2
 800bb0c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  /*audiobuf = (int16_t*) pbuf;
  available = 1;
  return (USBD_OK);*/
  int i;
  audiobuf = (int16_t*) pbuf;
 800bb0e:	4a17      	ldr	r2, [pc, #92]	@ (800bb6c <AUDIO_PeriodicTC_FS+0x6c>)
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	6013      	str	r3, [r2, #0]
  for (i = 0; i < 24; i++)
 800bb14:	2300      	movs	r3, #0
 800bb16:	617b      	str	r3, [r7, #20]
 800bb18:	e015      	b.n	800bb46 <AUDIO_PeriodicTC_FS+0x46>
  {
	  queue[queue_idx][i]=audiobuf[i];
 800bb1a:	4b14      	ldr	r3, [pc, #80]	@ (800bb6c <AUDIO_PeriodicTC_FS+0x6c>)
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	005b      	lsls	r3, r3, #1
 800bb22:	4413      	add	r3, r2
 800bb24:	4a12      	ldr	r2, [pc, #72]	@ (800bb70 <AUDIO_PeriodicTC_FS+0x70>)
 800bb26:	7812      	ldrb	r2, [r2, #0]
 800bb28:	f9b3 0000 	ldrsh.w	r0, [r3]
 800bb2c:	4911      	ldr	r1, [pc, #68]	@ (800bb74 <AUDIO_PeriodicTC_FS+0x74>)
 800bb2e:	4613      	mov	r3, r2
 800bb30:	005b      	lsls	r3, r3, #1
 800bb32:	4413      	add	r3, r2
 800bb34:	00db      	lsls	r3, r3, #3
 800bb36:	697a      	ldr	r2, [r7, #20]
 800bb38:	4413      	add	r3, r2
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (i = 0; i < 24; i++)
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	3301      	adds	r3, #1
 800bb44:	617b      	str	r3, [r7, #20]
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	2b17      	cmp	r3, #23
 800bb4a:	dde6      	ble.n	800bb1a <AUDIO_PeriodicTC_FS+0x1a>
  }
  queue_idx++;
 800bb4c:	4b08      	ldr	r3, [pc, #32]	@ (800bb70 <AUDIO_PeriodicTC_FS+0x70>)
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	3301      	adds	r3, #1
 800bb52:	b2da      	uxtb	r2, r3
 800bb54:	4b06      	ldr	r3, [pc, #24]	@ (800bb70 <AUDIO_PeriodicTC_FS+0x70>)
 800bb56:	701a      	strb	r2, [r3, #0]
  available = 1;
 800bb58:	4b07      	ldr	r3, [pc, #28]	@ (800bb78 <AUDIO_PeriodicTC_FS+0x78>)
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	701a      	strb	r2, [r3, #0]


  /* USER CODE END 5 */
}
 800bb5e:	bf00      	nop
 800bb60:	4618      	mov	r0, r3
 800bb62:	371c      	adds	r7, #28
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr
 800bb6c:	20000950 	.word	0x20000950
 800bb70:	20003954 	.word	0x20003954
 800bb74:	20000954 	.word	0x20000954
 800bb78:	20003955 	.word	0x20003955

0800bb7c <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800bb80:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr

0800bb8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b083      	sub	sp, #12
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	4603      	mov	r3, r0
 800bb94:	6039      	str	r1, [r7, #0]
 800bb96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	2212      	movs	r2, #18
 800bb9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bb9e:	4b03      	ldr	r3, [pc, #12]	@ (800bbac <USBD_FS_DeviceDescriptor+0x20>)
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr
 800bbac:	20000104 	.word	0x20000104

0800bbb0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b083      	sub	sp, #12
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	6039      	str	r1, [r7, #0]
 800bbba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	2204      	movs	r2, #4
 800bbc0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bbc2:	4b03      	ldr	r3, [pc, #12]	@ (800bbd0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr
 800bbd0:	20000124 	.word	0x20000124

0800bbd4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	4603      	mov	r3, r0
 800bbdc:	6039      	str	r1, [r7, #0]
 800bbde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bbe0:	79fb      	ldrb	r3, [r7, #7]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d105      	bne.n	800bbf2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bbe6:	683a      	ldr	r2, [r7, #0]
 800bbe8:	4907      	ldr	r1, [pc, #28]	@ (800bc08 <USBD_FS_ProductStrDescriptor+0x34>)
 800bbea:	4808      	ldr	r0, [pc, #32]	@ (800bc0c <USBD_FS_ProductStrDescriptor+0x38>)
 800bbec:	f7ff fe28 	bl	800b840 <USBD_GetString>
 800bbf0:	e004      	b.n	800bbfc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bbf2:	683a      	ldr	r2, [r7, #0]
 800bbf4:	4904      	ldr	r1, [pc, #16]	@ (800bc08 <USBD_FS_ProductStrDescriptor+0x34>)
 800bbf6:	4805      	ldr	r0, [pc, #20]	@ (800bc0c <USBD_FS_ProductStrDescriptor+0x38>)
 800bbf8:	f7ff fe22 	bl	800b840 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbfc:	4b02      	ldr	r3, [pc, #8]	@ (800bc08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3708      	adds	r7, #8
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	20003958 	.word	0x20003958
 800bc0c:	0800f2e0 	.word	0x0800f2e0

0800bc10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b082      	sub	sp, #8
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	4603      	mov	r3, r0
 800bc18:	6039      	str	r1, [r7, #0]
 800bc1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bc1c:	683a      	ldr	r2, [r7, #0]
 800bc1e:	4904      	ldr	r1, [pc, #16]	@ (800bc30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bc20:	4804      	ldr	r0, [pc, #16]	@ (800bc34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bc22:	f7ff fe0d 	bl	800b840 <USBD_GetString>
  return USBD_StrDesc;
 800bc26:	4b02      	ldr	r3, [pc, #8]	@ (800bc30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3708      	adds	r7, #8
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	20003958 	.word	0x20003958
 800bc34:	0800f2f4 	.word	0x0800f2f4

0800bc38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	4603      	mov	r3, r0
 800bc40:	6039      	str	r1, [r7, #0]
 800bc42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	221a      	movs	r2, #26
 800bc48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bc4a:	f000 f855 	bl	800bcf8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bc4e:	4b02      	ldr	r3, [pc, #8]	@ (800bc58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	20000128 	.word	0x20000128

0800bc5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	4603      	mov	r3, r0
 800bc64:	6039      	str	r1, [r7, #0]
 800bc66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bc68:	79fb      	ldrb	r3, [r7, #7]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d105      	bne.n	800bc7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bc6e:	683a      	ldr	r2, [r7, #0]
 800bc70:	4907      	ldr	r1, [pc, #28]	@ (800bc90 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bc72:	4808      	ldr	r0, [pc, #32]	@ (800bc94 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bc74:	f7ff fde4 	bl	800b840 <USBD_GetString>
 800bc78:	e004      	b.n	800bc84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bc7a:	683a      	ldr	r2, [r7, #0]
 800bc7c:	4904      	ldr	r1, [pc, #16]	@ (800bc90 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bc7e:	4805      	ldr	r0, [pc, #20]	@ (800bc94 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bc80:	f7ff fdde 	bl	800b840 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc84:	4b02      	ldr	r3, [pc, #8]	@ (800bc90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3708      	adds	r7, #8
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	20003958 	.word	0x20003958
 800bc94:	0800f308 	.word	0x0800f308

0800bc98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	4603      	mov	r3, r0
 800bca0:	6039      	str	r1, [r7, #0]
 800bca2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bca4:	79fb      	ldrb	r3, [r7, #7]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d105      	bne.n	800bcb6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bcaa:	683a      	ldr	r2, [r7, #0]
 800bcac:	4907      	ldr	r1, [pc, #28]	@ (800bccc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bcae:	4808      	ldr	r0, [pc, #32]	@ (800bcd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bcb0:	f7ff fdc6 	bl	800b840 <USBD_GetString>
 800bcb4:	e004      	b.n	800bcc0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bcb6:	683a      	ldr	r2, [r7, #0]
 800bcb8:	4904      	ldr	r1, [pc, #16]	@ (800bccc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bcba:	4805      	ldr	r0, [pc, #20]	@ (800bcd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bcbc:	f7ff fdc0 	bl	800b840 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bcc0:	4b02      	ldr	r3, [pc, #8]	@ (800bccc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3708      	adds	r7, #8
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	20003958 	.word	0x20003958
 800bcd0:	0800f318 	.word	0x0800f318

0800bcd4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	4603      	mov	r3, r0
 800bcdc:	6039      	str	r1, [r7, #0]
 800bcde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	220c      	movs	r2, #12
 800bce4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800bce6:	4b03      	ldr	r3, [pc, #12]	@ (800bcf4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	370c      	adds	r7, #12
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr
 800bcf4:	20000118 	.word	0x20000118

0800bcf8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bcfe:	4b0f      	ldr	r3, [pc, #60]	@ (800bd3c <Get_SerialNum+0x44>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bd04:	4b0e      	ldr	r3, [pc, #56]	@ (800bd40 <Get_SerialNum+0x48>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bd0a:	4b0e      	ldr	r3, [pc, #56]	@ (800bd44 <Get_SerialNum+0x4c>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bd10:	68fa      	ldr	r2, [r7, #12]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4413      	add	r3, r2
 800bd16:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d009      	beq.n	800bd32 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bd1e:	2208      	movs	r2, #8
 800bd20:	4909      	ldr	r1, [pc, #36]	@ (800bd48 <Get_SerialNum+0x50>)
 800bd22:	68f8      	ldr	r0, [r7, #12]
 800bd24:	f000 f814 	bl	800bd50 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bd28:	2204      	movs	r2, #4
 800bd2a:	4908      	ldr	r1, [pc, #32]	@ (800bd4c <Get_SerialNum+0x54>)
 800bd2c:	68b8      	ldr	r0, [r7, #8]
 800bd2e:	f000 f80f 	bl	800bd50 <IntToUnicode>
  }
}
 800bd32:	bf00      	nop
 800bd34:	3710      	adds	r7, #16
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	1fff7590 	.word	0x1fff7590
 800bd40:	1fff7594 	.word	0x1fff7594
 800bd44:	1fff7598 	.word	0x1fff7598
 800bd48:	2000012a 	.word	0x2000012a
 800bd4c:	2000013a 	.word	0x2000013a

0800bd50 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b087      	sub	sp, #28
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bd62:	2300      	movs	r3, #0
 800bd64:	75fb      	strb	r3, [r7, #23]
 800bd66:	e027      	b.n	800bdb8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	0f1b      	lsrs	r3, r3, #28
 800bd6c:	2b09      	cmp	r3, #9
 800bd6e:	d80b      	bhi.n	800bd88 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	0f1b      	lsrs	r3, r3, #28
 800bd74:	b2da      	uxtb	r2, r3
 800bd76:	7dfb      	ldrb	r3, [r7, #23]
 800bd78:	005b      	lsls	r3, r3, #1
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	440b      	add	r3, r1
 800bd80:	3230      	adds	r2, #48	@ 0x30
 800bd82:	b2d2      	uxtb	r2, r2
 800bd84:	701a      	strb	r2, [r3, #0]
 800bd86:	e00a      	b.n	800bd9e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	0f1b      	lsrs	r3, r3, #28
 800bd8c:	b2da      	uxtb	r2, r3
 800bd8e:	7dfb      	ldrb	r3, [r7, #23]
 800bd90:	005b      	lsls	r3, r3, #1
 800bd92:	4619      	mov	r1, r3
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	440b      	add	r3, r1
 800bd98:	3237      	adds	r2, #55	@ 0x37
 800bd9a:	b2d2      	uxtb	r2, r2
 800bd9c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	011b      	lsls	r3, r3, #4
 800bda2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bda4:	7dfb      	ldrb	r3, [r7, #23]
 800bda6:	005b      	lsls	r3, r3, #1
 800bda8:	3301      	adds	r3, #1
 800bdaa:	68ba      	ldr	r2, [r7, #8]
 800bdac:	4413      	add	r3, r2
 800bdae:	2200      	movs	r2, #0
 800bdb0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bdb2:	7dfb      	ldrb	r3, [r7, #23]
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	75fb      	strb	r3, [r7, #23]
 800bdb8:	7dfa      	ldrb	r2, [r7, #23]
 800bdba:	79fb      	ldrb	r3, [r7, #7]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d3d3      	bcc.n	800bd68 <IntToUnicode+0x18>
  }
}
 800bdc0:	bf00      	nop
 800bdc2:	bf00      	nop
 800bdc4:	371c      	adds	r7, #28
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr
	...

0800bdd0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b08a      	sub	sp, #40	@ 0x28
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bdd8:	f107 0314 	add.w	r3, r7, #20
 800bddc:	2200      	movs	r2, #0
 800bdde:	601a      	str	r2, [r3, #0]
 800bde0:	605a      	str	r2, [r3, #4]
 800bde2:	609a      	str	r2, [r3, #8]
 800bde4:	60da      	str	r2, [r3, #12]
 800bde6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bdf0:	d15c      	bne.n	800beac <HAL_PCD_MspInit+0xdc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bdf2:	4b30      	ldr	r3, [pc, #192]	@ (800beb4 <HAL_PCD_MspInit+0xe4>)
 800bdf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdf6:	4a2f      	ldr	r2, [pc, #188]	@ (800beb4 <HAL_PCD_MspInit+0xe4>)
 800bdf8:	f043 0301 	orr.w	r3, r3, #1
 800bdfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bdfe:	4b2d      	ldr	r3, [pc, #180]	@ (800beb4 <HAL_PCD_MspInit+0xe4>)
 800be00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be02:	f003 0301 	and.w	r3, r3, #1
 800be06:	613b      	str	r3, [r7, #16]
 800be08:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800be0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800be0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800be10:	2300      	movs	r3, #0
 800be12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be14:	2300      	movs	r3, #0
 800be16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800be18:	f107 0314 	add.w	r3, r7, #20
 800be1c:	4619      	mov	r1, r3
 800be1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800be22:	f7f8 fc47 	bl	80046b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800be26:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800be2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be2c:	2302      	movs	r3, #2
 800be2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be30:	2300      	movs	r3, #0
 800be32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be34:	2303      	movs	r3, #3
 800be36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800be38:	230a      	movs	r3, #10
 800be3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be3c:	f107 0314 	add.w	r3, r7, #20
 800be40:	4619      	mov	r1, r3
 800be42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800be46:	f7f8 fc35 	bl	80046b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800be4a:	4b1a      	ldr	r3, [pc, #104]	@ (800beb4 <HAL_PCD_MspInit+0xe4>)
 800be4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be4e:	4a19      	ldr	r2, [pc, #100]	@ (800beb4 <HAL_PCD_MspInit+0xe4>)
 800be50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800be54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800be56:	4b17      	ldr	r3, [pc, #92]	@ (800beb4 <HAL_PCD_MspInit+0xe4>)
 800be58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800be5e:	60fb      	str	r3, [r7, #12]
 800be60:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800be62:	4b14      	ldr	r3, [pc, #80]	@ (800beb4 <HAL_PCD_MspInit+0xe4>)
 800be64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d114      	bne.n	800be98 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800be6e:	4b11      	ldr	r3, [pc, #68]	@ (800beb4 <HAL_PCD_MspInit+0xe4>)
 800be70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be72:	4a10      	ldr	r2, [pc, #64]	@ (800beb4 <HAL_PCD_MspInit+0xe4>)
 800be74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800be78:	6593      	str	r3, [r2, #88]	@ 0x58
 800be7a:	4b0e      	ldr	r3, [pc, #56]	@ (800beb4 <HAL_PCD_MspInit+0xe4>)
 800be7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800be82:	60bb      	str	r3, [r7, #8]
 800be84:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800be86:	f7fa f937 	bl	80060f8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800be8a:	4b0a      	ldr	r3, [pc, #40]	@ (800beb4 <HAL_PCD_MspInit+0xe4>)
 800be8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be8e:	4a09      	ldr	r2, [pc, #36]	@ (800beb4 <HAL_PCD_MspInit+0xe4>)
 800be90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800be94:	6593      	str	r3, [r2, #88]	@ 0x58
 800be96:	e001      	b.n	800be9c <HAL_PCD_MspInit+0xcc>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800be98:	f7fa f92e 	bl	80060f8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800be9c:	2200      	movs	r2, #0
 800be9e:	2100      	movs	r1, #0
 800bea0:	2043      	movs	r0, #67	@ 0x43
 800bea2:	f7f8 f89c 	bl	8003fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bea6:	2043      	movs	r0, #67	@ 0x43
 800bea8:	f7f8 f8b5 	bl	8004016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800beac:	bf00      	nop
 800beae:	3728      	adds	r7, #40	@ 0x28
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	40021000 	.word	0x40021000

0800beb8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800becc:	4619      	mov	r1, r3
 800bece:	4610      	mov	r0, r2
 800bed0:	f7fe fb61 	bl	800a596 <USBD_LL_SetupStage>
}
 800bed4:	bf00      	nop
 800bed6:	3708      	adds	r7, #8
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	460b      	mov	r3, r1
 800bee6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800beee:	78fa      	ldrb	r2, [r7, #3]
 800bef0:	6879      	ldr	r1, [r7, #4]
 800bef2:	4613      	mov	r3, r2
 800bef4:	00db      	lsls	r3, r3, #3
 800bef6:	4413      	add	r3, r2
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	440b      	add	r3, r1
 800befc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bf00:	681a      	ldr	r2, [r3, #0]
 800bf02:	78fb      	ldrb	r3, [r7, #3]
 800bf04:	4619      	mov	r1, r3
 800bf06:	f7fe fb9b 	bl	800a640 <USBD_LL_DataOutStage>
}
 800bf0a:	bf00      	nop
 800bf0c:	3708      	adds	r7, #8
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b082      	sub	sp, #8
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bf24:	78fa      	ldrb	r2, [r7, #3]
 800bf26:	6879      	ldr	r1, [r7, #4]
 800bf28:	4613      	mov	r3, r2
 800bf2a:	00db      	lsls	r3, r3, #3
 800bf2c:	4413      	add	r3, r2
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	440b      	add	r3, r1
 800bf32:	3320      	adds	r3, #32
 800bf34:	681a      	ldr	r2, [r3, #0]
 800bf36:	78fb      	ldrb	r3, [r7, #3]
 800bf38:	4619      	mov	r1, r3
 800bf3a:	f7fe fc34 	bl	800a7a6 <USBD_LL_DataInStage>
}
 800bf3e:	bf00      	nop
 800bf40:	3708      	adds	r7, #8
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}

0800bf46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf46:	b580      	push	{r7, lr}
 800bf48:	b082      	sub	sp, #8
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7fe fd6e 	bl	800aa36 <USBD_LL_SOF>
}
 800bf5a:	bf00      	nop
 800bf5c:	3708      	adds	r7, #8
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b084      	sub	sp, #16
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	79db      	ldrb	r3, [r3, #7]
 800bf72:	2b02      	cmp	r3, #2
 800bf74:	d001      	beq.n	800bf7a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bf76:	f7f5 ffb9 	bl	8001eec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bf80:	7bfa      	ldrb	r2, [r7, #15]
 800bf82:	4611      	mov	r1, r2
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7fe fd12 	bl	800a9ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7fe fcba 	bl	800a90a <USBD_LL_Reset>
}
 800bf96:	bf00      	nop
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
	...

0800bfa0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	6812      	ldr	r2, [r2, #0]
 800bfb6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bfba:	f043 0301 	orr.w	r3, r3, #1
 800bfbe:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7fe fd01 	bl	800a9ce <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	7adb      	ldrb	r3, [r3, #11]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d005      	beq.n	800bfe0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bfd4:	4b04      	ldr	r3, [pc, #16]	@ (800bfe8 <HAL_PCD_SuspendCallback+0x48>)
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	4a03      	ldr	r2, [pc, #12]	@ (800bfe8 <HAL_PCD_SuspendCallback+0x48>)
 800bfda:	f043 0306 	orr.w	r3, r3, #6
 800bfde:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bfe0:	bf00      	nop
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	e000ed00 	.word	0xe000ed00

0800bfec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	6812      	ldr	r2, [r2, #0]
 800c002:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c006:	f023 0301 	bic.w	r3, r3, #1
 800c00a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	7adb      	ldrb	r3, [r3, #11]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d007      	beq.n	800c024 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c014:	4b08      	ldr	r3, [pc, #32]	@ (800c038 <HAL_PCD_ResumeCallback+0x4c>)
 800c016:	691b      	ldr	r3, [r3, #16]
 800c018:	4a07      	ldr	r2, [pc, #28]	@ (800c038 <HAL_PCD_ResumeCallback+0x4c>)
 800c01a:	f023 0306 	bic.w	r3, r3, #6
 800c01e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c020:	f000 faf6 	bl	800c610 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7fe fceb 	bl	800aa06 <USBD_LL_Resume>
}
 800c030:	bf00      	nop
 800c032:	3708      	adds	r7, #8
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	e000ed00 	.word	0xe000ed00

0800c03c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	460b      	mov	r3, r1
 800c046:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c04e:	78fa      	ldrb	r2, [r7, #3]
 800c050:	4611      	mov	r1, r2
 800c052:	4618      	mov	r0, r3
 800c054:	f7fe fd41 	bl	800aada <USBD_LL_IsoOUTIncomplete>
}
 800c058:	bf00      	nop
 800c05a:	3708      	adds	r7, #8
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	460b      	mov	r3, r1
 800c06a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c072:	78fa      	ldrb	r2, [r7, #3]
 800c074:	4611      	mov	r1, r2
 800c076:	4618      	mov	r0, r3
 800c078:	f7fe fcfd 	bl	800aa76 <USBD_LL_IsoINIncomplete>
}
 800c07c:	bf00      	nop
 800c07e:	3708      	adds	r7, #8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c092:	4618      	mov	r0, r3
 800c094:	f7fe fd53 	bl	800ab3e <USBD_LL_DevConnected>
}
 800c098:	bf00      	nop
 800c09a:	3708      	adds	r7, #8
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7fe fd50 	bl	800ab54 <USBD_LL_DevDisconnected>
}
 800c0b4:	bf00      	nop
 800c0b6:	3708      	adds	r7, #8
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b082      	sub	sp, #8
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d13c      	bne.n	800c146 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c0cc:	4a20      	ldr	r2, [pc, #128]	@ (800c150 <USBD_LL_Init+0x94>)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4a1e      	ldr	r2, [pc, #120]	@ (800c150 <USBD_LL_Init+0x94>)
 800c0d8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c0dc:	4b1c      	ldr	r3, [pc, #112]	@ (800c150 <USBD_LL_Init+0x94>)
 800c0de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c0e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c0e4:	4b1a      	ldr	r3, [pc, #104]	@ (800c150 <USBD_LL_Init+0x94>)
 800c0e6:	2206      	movs	r2, #6
 800c0e8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c0ea:	4b19      	ldr	r3, [pc, #100]	@ (800c150 <USBD_LL_Init+0x94>)
 800c0ec:	2202      	movs	r2, #2
 800c0ee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c0f0:	4b17      	ldr	r3, [pc, #92]	@ (800c150 <USBD_LL_Init+0x94>)
 800c0f2:	2202      	movs	r2, #2
 800c0f4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c0f6:	4b16      	ldr	r3, [pc, #88]	@ (800c150 <USBD_LL_Init+0x94>)
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c0fc:	4b14      	ldr	r3, [pc, #80]	@ (800c150 <USBD_LL_Init+0x94>)
 800c0fe:	2200      	movs	r2, #0
 800c100:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c102:	4b13      	ldr	r3, [pc, #76]	@ (800c150 <USBD_LL_Init+0x94>)
 800c104:	2200      	movs	r2, #0
 800c106:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800c108:	4b11      	ldr	r3, [pc, #68]	@ (800c150 <USBD_LL_Init+0x94>)
 800c10a:	2200      	movs	r2, #0
 800c10c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c10e:	4b10      	ldr	r3, [pc, #64]	@ (800c150 <USBD_LL_Init+0x94>)
 800c110:	2200      	movs	r2, #0
 800c112:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c114:	4b0e      	ldr	r3, [pc, #56]	@ (800c150 <USBD_LL_Init+0x94>)
 800c116:	2200      	movs	r2, #0
 800c118:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c11a:	480d      	ldr	r0, [pc, #52]	@ (800c150 <USBD_LL_Init+0x94>)
 800c11c:	f7f8 fde1 	bl	8004ce2 <HAL_PCD_Init>
 800c120:	4603      	mov	r3, r0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d001      	beq.n	800c12a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c126:	f7f5 fee1 	bl	8001eec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c12a:	2180      	movs	r1, #128	@ 0x80
 800c12c:	4808      	ldr	r0, [pc, #32]	@ (800c150 <USBD_LL_Init+0x94>)
 800c12e:	f7f9 ff3a 	bl	8005fa6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c132:	2240      	movs	r2, #64	@ 0x40
 800c134:	2100      	movs	r1, #0
 800c136:	4806      	ldr	r0, [pc, #24]	@ (800c150 <USBD_LL_Init+0x94>)
 800c138:	f7f9 feee 	bl	8005f18 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c13c:	2280      	movs	r2, #128	@ 0x80
 800c13e:	2101      	movs	r1, #1
 800c140:	4803      	ldr	r0, [pc, #12]	@ (800c150 <USBD_LL_Init+0x94>)
 800c142:	f7f9 fee9 	bl	8005f18 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c146:	2300      	movs	r3, #0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3708      	adds	r7, #8
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	20003b58 	.word	0x20003b58

0800c154 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c15c:	2300      	movs	r3, #0
 800c15e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c160:	2300      	movs	r3, #0
 800c162:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7f8 fec8 	bl	8004f00 <HAL_PCD_Start>
 800c170:	4603      	mov	r3, r0
 800c172:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c174:	7bbb      	ldrb	r3, [r7, #14]
 800c176:	2b03      	cmp	r3, #3
 800c178:	d816      	bhi.n	800c1a8 <USBD_LL_Start+0x54>
 800c17a:	a201      	add	r2, pc, #4	@ (adr r2, 800c180 <USBD_LL_Start+0x2c>)
 800c17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c180:	0800c191 	.word	0x0800c191
 800c184:	0800c197 	.word	0x0800c197
 800c188:	0800c19d 	.word	0x0800c19d
 800c18c:	0800c1a3 	.word	0x0800c1a3
    case HAL_OK :
      usb_status = USBD_OK;
 800c190:	2300      	movs	r3, #0
 800c192:	73fb      	strb	r3, [r7, #15]
    break;
 800c194:	e00b      	b.n	800c1ae <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c196:	2303      	movs	r3, #3
 800c198:	73fb      	strb	r3, [r7, #15]
    break;
 800c19a:	e008      	b.n	800c1ae <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c19c:	2301      	movs	r3, #1
 800c19e:	73fb      	strb	r3, [r7, #15]
    break;
 800c1a0:	e005      	b.n	800c1ae <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c1a2:	2303      	movs	r3, #3
 800c1a4:	73fb      	strb	r3, [r7, #15]
    break;
 800c1a6:	e002      	b.n	800c1ae <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800c1a8:	2303      	movs	r3, #3
 800c1aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c1ac:	bf00      	nop
  }
  return usb_status;
 800c1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3710      	adds	r7, #16
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	4608      	mov	r0, r1
 800c1c2:	4611      	mov	r1, r2
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	70fb      	strb	r3, [r7, #3]
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	70bb      	strb	r3, [r7, #2]
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c1e0:	78bb      	ldrb	r3, [r7, #2]
 800c1e2:	883a      	ldrh	r2, [r7, #0]
 800c1e4:	78f9      	ldrb	r1, [r7, #3]
 800c1e6:	f7f9 fb74 	bl	80058d2 <HAL_PCD_EP_Open>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c1ee:	7bbb      	ldrb	r3, [r7, #14]
 800c1f0:	2b03      	cmp	r3, #3
 800c1f2:	d817      	bhi.n	800c224 <USBD_LL_OpenEP+0x6c>
 800c1f4:	a201      	add	r2, pc, #4	@ (adr r2, 800c1fc <USBD_LL_OpenEP+0x44>)
 800c1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1fa:	bf00      	nop
 800c1fc:	0800c20d 	.word	0x0800c20d
 800c200:	0800c213 	.word	0x0800c213
 800c204:	0800c219 	.word	0x0800c219
 800c208:	0800c21f 	.word	0x0800c21f
    case HAL_OK :
      usb_status = USBD_OK;
 800c20c:	2300      	movs	r3, #0
 800c20e:	73fb      	strb	r3, [r7, #15]
    break;
 800c210:	e00b      	b.n	800c22a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c212:	2303      	movs	r3, #3
 800c214:	73fb      	strb	r3, [r7, #15]
    break;
 800c216:	e008      	b.n	800c22a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c218:	2301      	movs	r3, #1
 800c21a:	73fb      	strb	r3, [r7, #15]
    break;
 800c21c:	e005      	b.n	800c22a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c21e:	2303      	movs	r3, #3
 800c220:	73fb      	strb	r3, [r7, #15]
    break;
 800c222:	e002      	b.n	800c22a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800c224:	2303      	movs	r3, #3
 800c226:	73fb      	strb	r3, [r7, #15]
    break;
 800c228:	bf00      	nop
  }
  return usb_status;
 800c22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3710      	adds	r7, #16
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	460b      	mov	r3, r1
 800c23e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c240:	2300      	movs	r3, #0
 800c242:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c244:	2300      	movs	r3, #0
 800c246:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c24e:	78fa      	ldrb	r2, [r7, #3]
 800c250:	4611      	mov	r1, r2
 800c252:	4618      	mov	r0, r3
 800c254:	f7f9 fba7 	bl	80059a6 <HAL_PCD_EP_Close>
 800c258:	4603      	mov	r3, r0
 800c25a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c25c:	7bbb      	ldrb	r3, [r7, #14]
 800c25e:	2b03      	cmp	r3, #3
 800c260:	d816      	bhi.n	800c290 <USBD_LL_CloseEP+0x5c>
 800c262:	a201      	add	r2, pc, #4	@ (adr r2, 800c268 <USBD_LL_CloseEP+0x34>)
 800c264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c268:	0800c279 	.word	0x0800c279
 800c26c:	0800c27f 	.word	0x0800c27f
 800c270:	0800c285 	.word	0x0800c285
 800c274:	0800c28b 	.word	0x0800c28b
    case HAL_OK :
      usb_status = USBD_OK;
 800c278:	2300      	movs	r3, #0
 800c27a:	73fb      	strb	r3, [r7, #15]
    break;
 800c27c:	e00b      	b.n	800c296 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c27e:	2303      	movs	r3, #3
 800c280:	73fb      	strb	r3, [r7, #15]
    break;
 800c282:	e008      	b.n	800c296 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c284:	2301      	movs	r3, #1
 800c286:	73fb      	strb	r3, [r7, #15]
    break;
 800c288:	e005      	b.n	800c296 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c28a:	2303      	movs	r3, #3
 800c28c:	73fb      	strb	r3, [r7, #15]
    break;
 800c28e:	e002      	b.n	800c296 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c290:	2303      	movs	r3, #3
 800c292:	73fb      	strb	r3, [r7, #15]
    break;
 800c294:	bf00      	nop
  }
  return usb_status;
 800c296:	7bfb      	ldrb	r3, [r7, #15]
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3710      	adds	r7, #16
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c2ba:	78fa      	ldrb	r2, [r7, #3]
 800c2bc:	4611      	mov	r1, r2
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7f9 fc36 	bl	8005b30 <HAL_PCD_EP_SetStall>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c2c8:	7bbb      	ldrb	r3, [r7, #14]
 800c2ca:	2b03      	cmp	r3, #3
 800c2cc:	d816      	bhi.n	800c2fc <USBD_LL_StallEP+0x5c>
 800c2ce:	a201      	add	r2, pc, #4	@ (adr r2, 800c2d4 <USBD_LL_StallEP+0x34>)
 800c2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2d4:	0800c2e5 	.word	0x0800c2e5
 800c2d8:	0800c2eb 	.word	0x0800c2eb
 800c2dc:	0800c2f1 	.word	0x0800c2f1
 800c2e0:	0800c2f7 	.word	0x0800c2f7
    case HAL_OK :
      usb_status = USBD_OK;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	73fb      	strb	r3, [r7, #15]
    break;
 800c2e8:	e00b      	b.n	800c302 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c2ea:	2303      	movs	r3, #3
 800c2ec:	73fb      	strb	r3, [r7, #15]
    break;
 800c2ee:	e008      	b.n	800c302 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	73fb      	strb	r3, [r7, #15]
    break;
 800c2f4:	e005      	b.n	800c302 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c2f6:	2303      	movs	r3, #3
 800c2f8:	73fb      	strb	r3, [r7, #15]
    break;
 800c2fa:	e002      	b.n	800c302 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c2fc:	2303      	movs	r3, #3
 800c2fe:	73fb      	strb	r3, [r7, #15]
    break;
 800c300:	bf00      	nop
  }
  return usb_status;
 800c302:	7bfb      	ldrb	r3, [r7, #15]
}
 800c304:	4618      	mov	r0, r3
 800c306:	3710      	adds	r7, #16
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	460b      	mov	r3, r1
 800c316:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c318:	2300      	movs	r3, #0
 800c31a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c31c:	2300      	movs	r3, #0
 800c31e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c326:	78fa      	ldrb	r2, [r7, #3]
 800c328:	4611      	mov	r1, r2
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7f9 fc62 	bl	8005bf4 <HAL_PCD_EP_ClrStall>
 800c330:	4603      	mov	r3, r0
 800c332:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c334:	7bbb      	ldrb	r3, [r7, #14]
 800c336:	2b03      	cmp	r3, #3
 800c338:	d816      	bhi.n	800c368 <USBD_LL_ClearStallEP+0x5c>
 800c33a:	a201      	add	r2, pc, #4	@ (adr r2, 800c340 <USBD_LL_ClearStallEP+0x34>)
 800c33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c340:	0800c351 	.word	0x0800c351
 800c344:	0800c357 	.word	0x0800c357
 800c348:	0800c35d 	.word	0x0800c35d
 800c34c:	0800c363 	.word	0x0800c363
    case HAL_OK :
      usb_status = USBD_OK;
 800c350:	2300      	movs	r3, #0
 800c352:	73fb      	strb	r3, [r7, #15]
    break;
 800c354:	e00b      	b.n	800c36e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c356:	2303      	movs	r3, #3
 800c358:	73fb      	strb	r3, [r7, #15]
    break;
 800c35a:	e008      	b.n	800c36e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c35c:	2301      	movs	r3, #1
 800c35e:	73fb      	strb	r3, [r7, #15]
    break;
 800c360:	e005      	b.n	800c36e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c362:	2303      	movs	r3, #3
 800c364:	73fb      	strb	r3, [r7, #15]
    break;
 800c366:	e002      	b.n	800c36e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c368:	2303      	movs	r3, #3
 800c36a:	73fb      	strb	r3, [r7, #15]
    break;
 800c36c:	bf00      	nop
  }
  return usb_status;
 800c36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c370:	4618      	mov	r0, r3
 800c372:	3710      	adds	r7, #16
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	460b      	mov	r3, r1
 800c382:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c38a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c38c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c390:	2b00      	cmp	r3, #0
 800c392:	da0b      	bge.n	800c3ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c394:	78fb      	ldrb	r3, [r7, #3]
 800c396:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c39a:	68f9      	ldr	r1, [r7, #12]
 800c39c:	4613      	mov	r3, r2
 800c39e:	00db      	lsls	r3, r3, #3
 800c3a0:	4413      	add	r3, r2
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	440b      	add	r3, r1
 800c3a6:	3316      	adds	r3, #22
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	e00b      	b.n	800c3c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c3ac:	78fb      	ldrb	r3, [r7, #3]
 800c3ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c3b2:	68f9      	ldr	r1, [r7, #12]
 800c3b4:	4613      	mov	r3, r2
 800c3b6:	00db      	lsls	r3, r3, #3
 800c3b8:	4413      	add	r3, r2
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	440b      	add	r3, r1
 800c3be:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c3c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3714      	adds	r7, #20
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b084      	sub	sp, #16
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	460b      	mov	r3, r1
 800c3da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c3ea:	78fa      	ldrb	r2, [r7, #3]
 800c3ec:	4611      	mov	r1, r2
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7f9 fa4b 	bl	800588a <HAL_PCD_SetAddress>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c3f8:	7bbb      	ldrb	r3, [r7, #14]
 800c3fa:	2b03      	cmp	r3, #3
 800c3fc:	d816      	bhi.n	800c42c <USBD_LL_SetUSBAddress+0x5c>
 800c3fe:	a201      	add	r2, pc, #4	@ (adr r2, 800c404 <USBD_LL_SetUSBAddress+0x34>)
 800c400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c404:	0800c415 	.word	0x0800c415
 800c408:	0800c41b 	.word	0x0800c41b
 800c40c:	0800c421 	.word	0x0800c421
 800c410:	0800c427 	.word	0x0800c427
    case HAL_OK :
      usb_status = USBD_OK;
 800c414:	2300      	movs	r3, #0
 800c416:	73fb      	strb	r3, [r7, #15]
    break;
 800c418:	e00b      	b.n	800c432 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c41a:	2303      	movs	r3, #3
 800c41c:	73fb      	strb	r3, [r7, #15]
    break;
 800c41e:	e008      	b.n	800c432 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c420:	2301      	movs	r3, #1
 800c422:	73fb      	strb	r3, [r7, #15]
    break;
 800c424:	e005      	b.n	800c432 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c426:	2303      	movs	r3, #3
 800c428:	73fb      	strb	r3, [r7, #15]
    break;
 800c42a:	e002      	b.n	800c432 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800c42c:	2303      	movs	r3, #3
 800c42e:	73fb      	strb	r3, [r7, #15]
    break;
 800c430:	bf00      	nop
  }
  return usb_status;
 800c432:	7bfb      	ldrb	r3, [r7, #15]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3710      	adds	r7, #16
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b086      	sub	sp, #24
 800c440:	af00      	add	r7, sp, #0
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	607a      	str	r2, [r7, #4]
 800c446:	603b      	str	r3, [r7, #0]
 800c448:	460b      	mov	r3, r1
 800c44a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c44c:	2300      	movs	r3, #0
 800c44e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c450:	2300      	movs	r3, #0
 800c452:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c45a:	7af9      	ldrb	r1, [r7, #11]
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	f7f9 fb35 	bl	8005ace <HAL_PCD_EP_Transmit>
 800c464:	4603      	mov	r3, r0
 800c466:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c468:	7dbb      	ldrb	r3, [r7, #22]
 800c46a:	2b03      	cmp	r3, #3
 800c46c:	d816      	bhi.n	800c49c <USBD_LL_Transmit+0x60>
 800c46e:	a201      	add	r2, pc, #4	@ (adr r2, 800c474 <USBD_LL_Transmit+0x38>)
 800c470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c474:	0800c485 	.word	0x0800c485
 800c478:	0800c48b 	.word	0x0800c48b
 800c47c:	0800c491 	.word	0x0800c491
 800c480:	0800c497 	.word	0x0800c497
    case HAL_OK :
      usb_status = USBD_OK;
 800c484:	2300      	movs	r3, #0
 800c486:	75fb      	strb	r3, [r7, #23]
    break;
 800c488:	e00b      	b.n	800c4a2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c48a:	2303      	movs	r3, #3
 800c48c:	75fb      	strb	r3, [r7, #23]
    break;
 800c48e:	e008      	b.n	800c4a2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c490:	2301      	movs	r3, #1
 800c492:	75fb      	strb	r3, [r7, #23]
    break;
 800c494:	e005      	b.n	800c4a2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c496:	2303      	movs	r3, #3
 800c498:	75fb      	strb	r3, [r7, #23]
    break;
 800c49a:	e002      	b.n	800c4a2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800c49c:	2303      	movs	r3, #3
 800c49e:	75fb      	strb	r3, [r7, #23]
    break;
 800c4a0:	bf00      	nop
  }
  return usb_status;
 800c4a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3718      	adds	r7, #24
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b086      	sub	sp, #24
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	607a      	str	r2, [r7, #4]
 800c4b6:	603b      	str	r3, [r7, #0]
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c4ca:	7af9      	ldrb	r1, [r7, #11]
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	f7f9 fab3 	bl	8005a3a <HAL_PCD_EP_Receive>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c4d8:	7dbb      	ldrb	r3, [r7, #22]
 800c4da:	2b03      	cmp	r3, #3
 800c4dc:	d816      	bhi.n	800c50c <USBD_LL_PrepareReceive+0x60>
 800c4de:	a201      	add	r2, pc, #4	@ (adr r2, 800c4e4 <USBD_LL_PrepareReceive+0x38>)
 800c4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e4:	0800c4f5 	.word	0x0800c4f5
 800c4e8:	0800c4fb 	.word	0x0800c4fb
 800c4ec:	0800c501 	.word	0x0800c501
 800c4f0:	0800c507 	.word	0x0800c507
    case HAL_OK :
      usb_status = USBD_OK;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	75fb      	strb	r3, [r7, #23]
    break;
 800c4f8:	e00b      	b.n	800c512 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c4fa:	2303      	movs	r3, #3
 800c4fc:	75fb      	strb	r3, [r7, #23]
    break;
 800c4fe:	e008      	b.n	800c512 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c500:	2301      	movs	r3, #1
 800c502:	75fb      	strb	r3, [r7, #23]
    break;
 800c504:	e005      	b.n	800c512 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c506:	2303      	movs	r3, #3
 800c508:	75fb      	strb	r3, [r7, #23]
    break;
 800c50a:	e002      	b.n	800c512 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800c50c:	2303      	movs	r3, #3
 800c50e:	75fb      	strb	r3, [r7, #23]
    break;
 800c510:	bf00      	nop
  }
  return usb_status;
 800c512:	7dfb      	ldrb	r3, [r7, #23]
}
 800c514:	4618      	mov	r0, r3
 800c516:	3718      	adds	r7, #24
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	460b      	mov	r3, r1
 800c526:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c52e:	78fa      	ldrb	r2, [r7, #3]
 800c530:	4611      	mov	r1, r2
 800c532:	4618      	mov	r0, r3
 800c534:	f7f9 fab3 	bl	8005a9e <HAL_PCD_EP_GetRxCount>
 800c538:	4603      	mov	r3, r0
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3708      	adds	r7, #8
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
	...

0800c544 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	460b      	mov	r3, r1
 800c54e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c550:	78fb      	ldrb	r3, [r7, #3]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d002      	beq.n	800c55c <HAL_PCDEx_LPM_Callback+0x18>
 800c556:	2b01      	cmp	r3, #1
 800c558:	d01f      	beq.n	800c59a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c55a:	e03b      	b.n	800c5d4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	7adb      	ldrb	r3, [r3, #11]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d007      	beq.n	800c574 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c564:	f000 f854 	bl	800c610 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c568:	4b1c      	ldr	r3, [pc, #112]	@ (800c5dc <HAL_PCDEx_LPM_Callback+0x98>)
 800c56a:	691b      	ldr	r3, [r3, #16]
 800c56c:	4a1b      	ldr	r2, [pc, #108]	@ (800c5dc <HAL_PCDEx_LPM_Callback+0x98>)
 800c56e:	f023 0306 	bic.w	r3, r3, #6
 800c572:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	6812      	ldr	r2, [r2, #0]
 800c582:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c586:	f023 0301 	bic.w	r3, r3, #1
 800c58a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c592:	4618      	mov	r0, r3
 800c594:	f7fe fa37 	bl	800aa06 <USBD_LL_Resume>
    break;
 800c598:	e01c      	b.n	800c5d4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	6812      	ldr	r2, [r2, #0]
 800c5a8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c5ac:	f043 0301 	orr.w	r3, r3, #1
 800c5b0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7fe fa08 	bl	800a9ce <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	7adb      	ldrb	r3, [r3, #11]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d005      	beq.n	800c5d2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c5c6:	4b05      	ldr	r3, [pc, #20]	@ (800c5dc <HAL_PCDEx_LPM_Callback+0x98>)
 800c5c8:	691b      	ldr	r3, [r3, #16]
 800c5ca:	4a04      	ldr	r2, [pc, #16]	@ (800c5dc <HAL_PCDEx_LPM_Callback+0x98>)
 800c5cc:	f043 0306 	orr.w	r3, r3, #6
 800c5d0:	6113      	str	r3, [r2, #16]
    break;
 800c5d2:	bf00      	nop
}
 800c5d4:	bf00      	nop
 800c5d6:	3708      	adds	r7, #8
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	e000ed00 	.word	0xe000ed00

0800c5e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
	Number of sub-packets in the audio transfer buffer. You can modify this value but always make sure
    that it is an even number and higher than 3
	AUDIO_OUT_PACKET_NUM = 80
  */
  /* USER CODE END 4 */
  return mem;
 800c5e8:	4b03      	ldr	r3, [pc, #12]	@ (800c5f8 <USBD_static_malloc+0x18>)
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	370c      	adds	r7, #12
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr
 800c5f6:	bf00      	nop
 800c5f8:	2000403c 	.word	0x2000403c

0800c5fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b083      	sub	sp, #12
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]

}
 800c604:	bf00      	nop
 800c606:	370c      	adds	r7, #12
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c614:	f7f4 ffac 	bl	8001570 <SystemClock_Config>
}
 800c618:	bf00      	nop
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <__cvt>:
 800c61c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c620:	ec57 6b10 	vmov	r6, r7, d0
 800c624:	2f00      	cmp	r7, #0
 800c626:	460c      	mov	r4, r1
 800c628:	4619      	mov	r1, r3
 800c62a:	463b      	mov	r3, r7
 800c62c:	bfbb      	ittet	lt
 800c62e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c632:	461f      	movlt	r7, r3
 800c634:	2300      	movge	r3, #0
 800c636:	232d      	movlt	r3, #45	@ 0x2d
 800c638:	700b      	strb	r3, [r1, #0]
 800c63a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c63c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c640:	4691      	mov	r9, r2
 800c642:	f023 0820 	bic.w	r8, r3, #32
 800c646:	bfbc      	itt	lt
 800c648:	4632      	movlt	r2, r6
 800c64a:	4616      	movlt	r6, r2
 800c64c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c650:	d005      	beq.n	800c65e <__cvt+0x42>
 800c652:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c656:	d100      	bne.n	800c65a <__cvt+0x3e>
 800c658:	3401      	adds	r4, #1
 800c65a:	2102      	movs	r1, #2
 800c65c:	e000      	b.n	800c660 <__cvt+0x44>
 800c65e:	2103      	movs	r1, #3
 800c660:	ab03      	add	r3, sp, #12
 800c662:	9301      	str	r3, [sp, #4]
 800c664:	ab02      	add	r3, sp, #8
 800c666:	9300      	str	r3, [sp, #0]
 800c668:	ec47 6b10 	vmov	d0, r6, r7
 800c66c:	4653      	mov	r3, sl
 800c66e:	4622      	mov	r2, r4
 800c670:	f000 fe5a 	bl	800d328 <_dtoa_r>
 800c674:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c678:	4605      	mov	r5, r0
 800c67a:	d119      	bne.n	800c6b0 <__cvt+0x94>
 800c67c:	f019 0f01 	tst.w	r9, #1
 800c680:	d00e      	beq.n	800c6a0 <__cvt+0x84>
 800c682:	eb00 0904 	add.w	r9, r0, r4
 800c686:	2200      	movs	r2, #0
 800c688:	2300      	movs	r3, #0
 800c68a:	4630      	mov	r0, r6
 800c68c:	4639      	mov	r1, r7
 800c68e:	f7f4 fa1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c692:	b108      	cbz	r0, 800c698 <__cvt+0x7c>
 800c694:	f8cd 900c 	str.w	r9, [sp, #12]
 800c698:	2230      	movs	r2, #48	@ 0x30
 800c69a:	9b03      	ldr	r3, [sp, #12]
 800c69c:	454b      	cmp	r3, r9
 800c69e:	d31e      	bcc.n	800c6de <__cvt+0xc2>
 800c6a0:	9b03      	ldr	r3, [sp, #12]
 800c6a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c6a4:	1b5b      	subs	r3, r3, r5
 800c6a6:	4628      	mov	r0, r5
 800c6a8:	6013      	str	r3, [r2, #0]
 800c6aa:	b004      	add	sp, #16
 800c6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c6b4:	eb00 0904 	add.w	r9, r0, r4
 800c6b8:	d1e5      	bne.n	800c686 <__cvt+0x6a>
 800c6ba:	7803      	ldrb	r3, [r0, #0]
 800c6bc:	2b30      	cmp	r3, #48	@ 0x30
 800c6be:	d10a      	bne.n	800c6d6 <__cvt+0xba>
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	4639      	mov	r1, r7
 800c6c8:	f7f4 f9fe 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6cc:	b918      	cbnz	r0, 800c6d6 <__cvt+0xba>
 800c6ce:	f1c4 0401 	rsb	r4, r4, #1
 800c6d2:	f8ca 4000 	str.w	r4, [sl]
 800c6d6:	f8da 3000 	ldr.w	r3, [sl]
 800c6da:	4499      	add	r9, r3
 800c6dc:	e7d3      	b.n	800c686 <__cvt+0x6a>
 800c6de:	1c59      	adds	r1, r3, #1
 800c6e0:	9103      	str	r1, [sp, #12]
 800c6e2:	701a      	strb	r2, [r3, #0]
 800c6e4:	e7d9      	b.n	800c69a <__cvt+0x7e>

0800c6e6 <__exponent>:
 800c6e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6e8:	2900      	cmp	r1, #0
 800c6ea:	bfba      	itte	lt
 800c6ec:	4249      	neglt	r1, r1
 800c6ee:	232d      	movlt	r3, #45	@ 0x2d
 800c6f0:	232b      	movge	r3, #43	@ 0x2b
 800c6f2:	2909      	cmp	r1, #9
 800c6f4:	7002      	strb	r2, [r0, #0]
 800c6f6:	7043      	strb	r3, [r0, #1]
 800c6f8:	dd29      	ble.n	800c74e <__exponent+0x68>
 800c6fa:	f10d 0307 	add.w	r3, sp, #7
 800c6fe:	461d      	mov	r5, r3
 800c700:	270a      	movs	r7, #10
 800c702:	461a      	mov	r2, r3
 800c704:	fbb1 f6f7 	udiv	r6, r1, r7
 800c708:	fb07 1416 	mls	r4, r7, r6, r1
 800c70c:	3430      	adds	r4, #48	@ 0x30
 800c70e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c712:	460c      	mov	r4, r1
 800c714:	2c63      	cmp	r4, #99	@ 0x63
 800c716:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c71a:	4631      	mov	r1, r6
 800c71c:	dcf1      	bgt.n	800c702 <__exponent+0x1c>
 800c71e:	3130      	adds	r1, #48	@ 0x30
 800c720:	1e94      	subs	r4, r2, #2
 800c722:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c726:	1c41      	adds	r1, r0, #1
 800c728:	4623      	mov	r3, r4
 800c72a:	42ab      	cmp	r3, r5
 800c72c:	d30a      	bcc.n	800c744 <__exponent+0x5e>
 800c72e:	f10d 0309 	add.w	r3, sp, #9
 800c732:	1a9b      	subs	r3, r3, r2
 800c734:	42ac      	cmp	r4, r5
 800c736:	bf88      	it	hi
 800c738:	2300      	movhi	r3, #0
 800c73a:	3302      	adds	r3, #2
 800c73c:	4403      	add	r3, r0
 800c73e:	1a18      	subs	r0, r3, r0
 800c740:	b003      	add	sp, #12
 800c742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c744:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c748:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c74c:	e7ed      	b.n	800c72a <__exponent+0x44>
 800c74e:	2330      	movs	r3, #48	@ 0x30
 800c750:	3130      	adds	r1, #48	@ 0x30
 800c752:	7083      	strb	r3, [r0, #2]
 800c754:	70c1      	strb	r1, [r0, #3]
 800c756:	1d03      	adds	r3, r0, #4
 800c758:	e7f1      	b.n	800c73e <__exponent+0x58>
	...

0800c75c <_printf_float>:
 800c75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c760:	b08d      	sub	sp, #52	@ 0x34
 800c762:	460c      	mov	r4, r1
 800c764:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c768:	4616      	mov	r6, r2
 800c76a:	461f      	mov	r7, r3
 800c76c:	4605      	mov	r5, r0
 800c76e:	f000 fcdb 	bl	800d128 <_localeconv_r>
 800c772:	6803      	ldr	r3, [r0, #0]
 800c774:	9304      	str	r3, [sp, #16]
 800c776:	4618      	mov	r0, r3
 800c778:	f7f3 fd7a 	bl	8000270 <strlen>
 800c77c:	2300      	movs	r3, #0
 800c77e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c780:	f8d8 3000 	ldr.w	r3, [r8]
 800c784:	9005      	str	r0, [sp, #20]
 800c786:	3307      	adds	r3, #7
 800c788:	f023 0307 	bic.w	r3, r3, #7
 800c78c:	f103 0208 	add.w	r2, r3, #8
 800c790:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c794:	f8d4 b000 	ldr.w	fp, [r4]
 800c798:	f8c8 2000 	str.w	r2, [r8]
 800c79c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c7a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c7a4:	9307      	str	r3, [sp, #28]
 800c7a6:	f8cd 8018 	str.w	r8, [sp, #24]
 800c7aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c7ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7b2:	4b9c      	ldr	r3, [pc, #624]	@ (800ca24 <_printf_float+0x2c8>)
 800c7b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c7b8:	f7f4 f9b8 	bl	8000b2c <__aeabi_dcmpun>
 800c7bc:	bb70      	cbnz	r0, 800c81c <_printf_float+0xc0>
 800c7be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7c2:	4b98      	ldr	r3, [pc, #608]	@ (800ca24 <_printf_float+0x2c8>)
 800c7c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c7c8:	f7f4 f992 	bl	8000af0 <__aeabi_dcmple>
 800c7cc:	bb30      	cbnz	r0, 800c81c <_printf_float+0xc0>
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	4640      	mov	r0, r8
 800c7d4:	4649      	mov	r1, r9
 800c7d6:	f7f4 f981 	bl	8000adc <__aeabi_dcmplt>
 800c7da:	b110      	cbz	r0, 800c7e2 <_printf_float+0x86>
 800c7dc:	232d      	movs	r3, #45	@ 0x2d
 800c7de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7e2:	4a91      	ldr	r2, [pc, #580]	@ (800ca28 <_printf_float+0x2cc>)
 800c7e4:	4b91      	ldr	r3, [pc, #580]	@ (800ca2c <_printf_float+0x2d0>)
 800c7e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c7ea:	bf8c      	ite	hi
 800c7ec:	4690      	movhi	r8, r2
 800c7ee:	4698      	movls	r8, r3
 800c7f0:	2303      	movs	r3, #3
 800c7f2:	6123      	str	r3, [r4, #16]
 800c7f4:	f02b 0304 	bic.w	r3, fp, #4
 800c7f8:	6023      	str	r3, [r4, #0]
 800c7fa:	f04f 0900 	mov.w	r9, #0
 800c7fe:	9700      	str	r7, [sp, #0]
 800c800:	4633      	mov	r3, r6
 800c802:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c804:	4621      	mov	r1, r4
 800c806:	4628      	mov	r0, r5
 800c808:	f000 f9d2 	bl	800cbb0 <_printf_common>
 800c80c:	3001      	adds	r0, #1
 800c80e:	f040 808d 	bne.w	800c92c <_printf_float+0x1d0>
 800c812:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c816:	b00d      	add	sp, #52	@ 0x34
 800c818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c81c:	4642      	mov	r2, r8
 800c81e:	464b      	mov	r3, r9
 800c820:	4640      	mov	r0, r8
 800c822:	4649      	mov	r1, r9
 800c824:	f7f4 f982 	bl	8000b2c <__aeabi_dcmpun>
 800c828:	b140      	cbz	r0, 800c83c <_printf_float+0xe0>
 800c82a:	464b      	mov	r3, r9
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	bfbc      	itt	lt
 800c830:	232d      	movlt	r3, #45	@ 0x2d
 800c832:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c836:	4a7e      	ldr	r2, [pc, #504]	@ (800ca30 <_printf_float+0x2d4>)
 800c838:	4b7e      	ldr	r3, [pc, #504]	@ (800ca34 <_printf_float+0x2d8>)
 800c83a:	e7d4      	b.n	800c7e6 <_printf_float+0x8a>
 800c83c:	6863      	ldr	r3, [r4, #4]
 800c83e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c842:	9206      	str	r2, [sp, #24]
 800c844:	1c5a      	adds	r2, r3, #1
 800c846:	d13b      	bne.n	800c8c0 <_printf_float+0x164>
 800c848:	2306      	movs	r3, #6
 800c84a:	6063      	str	r3, [r4, #4]
 800c84c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c850:	2300      	movs	r3, #0
 800c852:	6022      	str	r2, [r4, #0]
 800c854:	9303      	str	r3, [sp, #12]
 800c856:	ab0a      	add	r3, sp, #40	@ 0x28
 800c858:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c85c:	ab09      	add	r3, sp, #36	@ 0x24
 800c85e:	9300      	str	r3, [sp, #0]
 800c860:	6861      	ldr	r1, [r4, #4]
 800c862:	ec49 8b10 	vmov	d0, r8, r9
 800c866:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c86a:	4628      	mov	r0, r5
 800c86c:	f7ff fed6 	bl	800c61c <__cvt>
 800c870:	9b06      	ldr	r3, [sp, #24]
 800c872:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c874:	2b47      	cmp	r3, #71	@ 0x47
 800c876:	4680      	mov	r8, r0
 800c878:	d129      	bne.n	800c8ce <_printf_float+0x172>
 800c87a:	1cc8      	adds	r0, r1, #3
 800c87c:	db02      	blt.n	800c884 <_printf_float+0x128>
 800c87e:	6863      	ldr	r3, [r4, #4]
 800c880:	4299      	cmp	r1, r3
 800c882:	dd41      	ble.n	800c908 <_printf_float+0x1ac>
 800c884:	f1aa 0a02 	sub.w	sl, sl, #2
 800c888:	fa5f fa8a 	uxtb.w	sl, sl
 800c88c:	3901      	subs	r1, #1
 800c88e:	4652      	mov	r2, sl
 800c890:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c894:	9109      	str	r1, [sp, #36]	@ 0x24
 800c896:	f7ff ff26 	bl	800c6e6 <__exponent>
 800c89a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c89c:	1813      	adds	r3, r2, r0
 800c89e:	2a01      	cmp	r2, #1
 800c8a0:	4681      	mov	r9, r0
 800c8a2:	6123      	str	r3, [r4, #16]
 800c8a4:	dc02      	bgt.n	800c8ac <_printf_float+0x150>
 800c8a6:	6822      	ldr	r2, [r4, #0]
 800c8a8:	07d2      	lsls	r2, r2, #31
 800c8aa:	d501      	bpl.n	800c8b0 <_printf_float+0x154>
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	6123      	str	r3, [r4, #16]
 800c8b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d0a2      	beq.n	800c7fe <_printf_float+0xa2>
 800c8b8:	232d      	movs	r3, #45	@ 0x2d
 800c8ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c8be:	e79e      	b.n	800c7fe <_printf_float+0xa2>
 800c8c0:	9a06      	ldr	r2, [sp, #24]
 800c8c2:	2a47      	cmp	r2, #71	@ 0x47
 800c8c4:	d1c2      	bne.n	800c84c <_printf_float+0xf0>
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d1c0      	bne.n	800c84c <_printf_float+0xf0>
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	e7bd      	b.n	800c84a <_printf_float+0xee>
 800c8ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c8d2:	d9db      	bls.n	800c88c <_printf_float+0x130>
 800c8d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c8d8:	d118      	bne.n	800c90c <_printf_float+0x1b0>
 800c8da:	2900      	cmp	r1, #0
 800c8dc:	6863      	ldr	r3, [r4, #4]
 800c8de:	dd0b      	ble.n	800c8f8 <_printf_float+0x19c>
 800c8e0:	6121      	str	r1, [r4, #16]
 800c8e2:	b913      	cbnz	r3, 800c8ea <_printf_float+0x18e>
 800c8e4:	6822      	ldr	r2, [r4, #0]
 800c8e6:	07d0      	lsls	r0, r2, #31
 800c8e8:	d502      	bpl.n	800c8f0 <_printf_float+0x194>
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	440b      	add	r3, r1
 800c8ee:	6123      	str	r3, [r4, #16]
 800c8f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c8f2:	f04f 0900 	mov.w	r9, #0
 800c8f6:	e7db      	b.n	800c8b0 <_printf_float+0x154>
 800c8f8:	b913      	cbnz	r3, 800c900 <_printf_float+0x1a4>
 800c8fa:	6822      	ldr	r2, [r4, #0]
 800c8fc:	07d2      	lsls	r2, r2, #31
 800c8fe:	d501      	bpl.n	800c904 <_printf_float+0x1a8>
 800c900:	3302      	adds	r3, #2
 800c902:	e7f4      	b.n	800c8ee <_printf_float+0x192>
 800c904:	2301      	movs	r3, #1
 800c906:	e7f2      	b.n	800c8ee <_printf_float+0x192>
 800c908:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c90c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c90e:	4299      	cmp	r1, r3
 800c910:	db05      	blt.n	800c91e <_printf_float+0x1c2>
 800c912:	6823      	ldr	r3, [r4, #0]
 800c914:	6121      	str	r1, [r4, #16]
 800c916:	07d8      	lsls	r0, r3, #31
 800c918:	d5ea      	bpl.n	800c8f0 <_printf_float+0x194>
 800c91a:	1c4b      	adds	r3, r1, #1
 800c91c:	e7e7      	b.n	800c8ee <_printf_float+0x192>
 800c91e:	2900      	cmp	r1, #0
 800c920:	bfd4      	ite	le
 800c922:	f1c1 0202 	rsble	r2, r1, #2
 800c926:	2201      	movgt	r2, #1
 800c928:	4413      	add	r3, r2
 800c92a:	e7e0      	b.n	800c8ee <_printf_float+0x192>
 800c92c:	6823      	ldr	r3, [r4, #0]
 800c92e:	055a      	lsls	r2, r3, #21
 800c930:	d407      	bmi.n	800c942 <_printf_float+0x1e6>
 800c932:	6923      	ldr	r3, [r4, #16]
 800c934:	4642      	mov	r2, r8
 800c936:	4631      	mov	r1, r6
 800c938:	4628      	mov	r0, r5
 800c93a:	47b8      	blx	r7
 800c93c:	3001      	adds	r0, #1
 800c93e:	d12b      	bne.n	800c998 <_printf_float+0x23c>
 800c940:	e767      	b.n	800c812 <_printf_float+0xb6>
 800c942:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c946:	f240 80dd 	bls.w	800cb04 <_printf_float+0x3a8>
 800c94a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c94e:	2200      	movs	r2, #0
 800c950:	2300      	movs	r3, #0
 800c952:	f7f4 f8b9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c956:	2800      	cmp	r0, #0
 800c958:	d033      	beq.n	800c9c2 <_printf_float+0x266>
 800c95a:	4a37      	ldr	r2, [pc, #220]	@ (800ca38 <_printf_float+0x2dc>)
 800c95c:	2301      	movs	r3, #1
 800c95e:	4631      	mov	r1, r6
 800c960:	4628      	mov	r0, r5
 800c962:	47b8      	blx	r7
 800c964:	3001      	adds	r0, #1
 800c966:	f43f af54 	beq.w	800c812 <_printf_float+0xb6>
 800c96a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c96e:	4543      	cmp	r3, r8
 800c970:	db02      	blt.n	800c978 <_printf_float+0x21c>
 800c972:	6823      	ldr	r3, [r4, #0]
 800c974:	07d8      	lsls	r0, r3, #31
 800c976:	d50f      	bpl.n	800c998 <_printf_float+0x23c>
 800c978:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c97c:	4631      	mov	r1, r6
 800c97e:	4628      	mov	r0, r5
 800c980:	47b8      	blx	r7
 800c982:	3001      	adds	r0, #1
 800c984:	f43f af45 	beq.w	800c812 <_printf_float+0xb6>
 800c988:	f04f 0900 	mov.w	r9, #0
 800c98c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c990:	f104 0a1a 	add.w	sl, r4, #26
 800c994:	45c8      	cmp	r8, r9
 800c996:	dc09      	bgt.n	800c9ac <_printf_float+0x250>
 800c998:	6823      	ldr	r3, [r4, #0]
 800c99a:	079b      	lsls	r3, r3, #30
 800c99c:	f100 8103 	bmi.w	800cba6 <_printf_float+0x44a>
 800c9a0:	68e0      	ldr	r0, [r4, #12]
 800c9a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9a4:	4298      	cmp	r0, r3
 800c9a6:	bfb8      	it	lt
 800c9a8:	4618      	movlt	r0, r3
 800c9aa:	e734      	b.n	800c816 <_printf_float+0xba>
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	4652      	mov	r2, sl
 800c9b0:	4631      	mov	r1, r6
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	47b8      	blx	r7
 800c9b6:	3001      	adds	r0, #1
 800c9b8:	f43f af2b 	beq.w	800c812 <_printf_float+0xb6>
 800c9bc:	f109 0901 	add.w	r9, r9, #1
 800c9c0:	e7e8      	b.n	800c994 <_printf_float+0x238>
 800c9c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	dc39      	bgt.n	800ca3c <_printf_float+0x2e0>
 800c9c8:	4a1b      	ldr	r2, [pc, #108]	@ (800ca38 <_printf_float+0x2dc>)
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	4631      	mov	r1, r6
 800c9ce:	4628      	mov	r0, r5
 800c9d0:	47b8      	blx	r7
 800c9d2:	3001      	adds	r0, #1
 800c9d4:	f43f af1d 	beq.w	800c812 <_printf_float+0xb6>
 800c9d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c9dc:	ea59 0303 	orrs.w	r3, r9, r3
 800c9e0:	d102      	bne.n	800c9e8 <_printf_float+0x28c>
 800c9e2:	6823      	ldr	r3, [r4, #0]
 800c9e4:	07d9      	lsls	r1, r3, #31
 800c9e6:	d5d7      	bpl.n	800c998 <_printf_float+0x23c>
 800c9e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9ec:	4631      	mov	r1, r6
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	47b8      	blx	r7
 800c9f2:	3001      	adds	r0, #1
 800c9f4:	f43f af0d 	beq.w	800c812 <_printf_float+0xb6>
 800c9f8:	f04f 0a00 	mov.w	sl, #0
 800c9fc:	f104 0b1a 	add.w	fp, r4, #26
 800ca00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca02:	425b      	negs	r3, r3
 800ca04:	4553      	cmp	r3, sl
 800ca06:	dc01      	bgt.n	800ca0c <_printf_float+0x2b0>
 800ca08:	464b      	mov	r3, r9
 800ca0a:	e793      	b.n	800c934 <_printf_float+0x1d8>
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	465a      	mov	r2, fp
 800ca10:	4631      	mov	r1, r6
 800ca12:	4628      	mov	r0, r5
 800ca14:	47b8      	blx	r7
 800ca16:	3001      	adds	r0, #1
 800ca18:	f43f aefb 	beq.w	800c812 <_printf_float+0xb6>
 800ca1c:	f10a 0a01 	add.w	sl, sl, #1
 800ca20:	e7ee      	b.n	800ca00 <_printf_float+0x2a4>
 800ca22:	bf00      	nop
 800ca24:	7fefffff 	.word	0x7fefffff
 800ca28:	0800f374 	.word	0x0800f374
 800ca2c:	0800f370 	.word	0x0800f370
 800ca30:	0800f37c 	.word	0x0800f37c
 800ca34:	0800f378 	.word	0x0800f378
 800ca38:	0800f380 	.word	0x0800f380
 800ca3c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ca3e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ca42:	4553      	cmp	r3, sl
 800ca44:	bfa8      	it	ge
 800ca46:	4653      	movge	r3, sl
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	4699      	mov	r9, r3
 800ca4c:	dc36      	bgt.n	800cabc <_printf_float+0x360>
 800ca4e:	f04f 0b00 	mov.w	fp, #0
 800ca52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca56:	f104 021a 	add.w	r2, r4, #26
 800ca5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ca5c:	9306      	str	r3, [sp, #24]
 800ca5e:	eba3 0309 	sub.w	r3, r3, r9
 800ca62:	455b      	cmp	r3, fp
 800ca64:	dc31      	bgt.n	800caca <_printf_float+0x36e>
 800ca66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca68:	459a      	cmp	sl, r3
 800ca6a:	dc3a      	bgt.n	800cae2 <_printf_float+0x386>
 800ca6c:	6823      	ldr	r3, [r4, #0]
 800ca6e:	07da      	lsls	r2, r3, #31
 800ca70:	d437      	bmi.n	800cae2 <_printf_float+0x386>
 800ca72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca74:	ebaa 0903 	sub.w	r9, sl, r3
 800ca78:	9b06      	ldr	r3, [sp, #24]
 800ca7a:	ebaa 0303 	sub.w	r3, sl, r3
 800ca7e:	4599      	cmp	r9, r3
 800ca80:	bfa8      	it	ge
 800ca82:	4699      	movge	r9, r3
 800ca84:	f1b9 0f00 	cmp.w	r9, #0
 800ca88:	dc33      	bgt.n	800caf2 <_printf_float+0x396>
 800ca8a:	f04f 0800 	mov.w	r8, #0
 800ca8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca92:	f104 0b1a 	add.w	fp, r4, #26
 800ca96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca98:	ebaa 0303 	sub.w	r3, sl, r3
 800ca9c:	eba3 0309 	sub.w	r3, r3, r9
 800caa0:	4543      	cmp	r3, r8
 800caa2:	f77f af79 	ble.w	800c998 <_printf_float+0x23c>
 800caa6:	2301      	movs	r3, #1
 800caa8:	465a      	mov	r2, fp
 800caaa:	4631      	mov	r1, r6
 800caac:	4628      	mov	r0, r5
 800caae:	47b8      	blx	r7
 800cab0:	3001      	adds	r0, #1
 800cab2:	f43f aeae 	beq.w	800c812 <_printf_float+0xb6>
 800cab6:	f108 0801 	add.w	r8, r8, #1
 800caba:	e7ec      	b.n	800ca96 <_printf_float+0x33a>
 800cabc:	4642      	mov	r2, r8
 800cabe:	4631      	mov	r1, r6
 800cac0:	4628      	mov	r0, r5
 800cac2:	47b8      	blx	r7
 800cac4:	3001      	adds	r0, #1
 800cac6:	d1c2      	bne.n	800ca4e <_printf_float+0x2f2>
 800cac8:	e6a3      	b.n	800c812 <_printf_float+0xb6>
 800caca:	2301      	movs	r3, #1
 800cacc:	4631      	mov	r1, r6
 800cace:	4628      	mov	r0, r5
 800cad0:	9206      	str	r2, [sp, #24]
 800cad2:	47b8      	blx	r7
 800cad4:	3001      	adds	r0, #1
 800cad6:	f43f ae9c 	beq.w	800c812 <_printf_float+0xb6>
 800cada:	9a06      	ldr	r2, [sp, #24]
 800cadc:	f10b 0b01 	add.w	fp, fp, #1
 800cae0:	e7bb      	b.n	800ca5a <_printf_float+0x2fe>
 800cae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cae6:	4631      	mov	r1, r6
 800cae8:	4628      	mov	r0, r5
 800caea:	47b8      	blx	r7
 800caec:	3001      	adds	r0, #1
 800caee:	d1c0      	bne.n	800ca72 <_printf_float+0x316>
 800caf0:	e68f      	b.n	800c812 <_printf_float+0xb6>
 800caf2:	9a06      	ldr	r2, [sp, #24]
 800caf4:	464b      	mov	r3, r9
 800caf6:	4442      	add	r2, r8
 800caf8:	4631      	mov	r1, r6
 800cafa:	4628      	mov	r0, r5
 800cafc:	47b8      	blx	r7
 800cafe:	3001      	adds	r0, #1
 800cb00:	d1c3      	bne.n	800ca8a <_printf_float+0x32e>
 800cb02:	e686      	b.n	800c812 <_printf_float+0xb6>
 800cb04:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cb08:	f1ba 0f01 	cmp.w	sl, #1
 800cb0c:	dc01      	bgt.n	800cb12 <_printf_float+0x3b6>
 800cb0e:	07db      	lsls	r3, r3, #31
 800cb10:	d536      	bpl.n	800cb80 <_printf_float+0x424>
 800cb12:	2301      	movs	r3, #1
 800cb14:	4642      	mov	r2, r8
 800cb16:	4631      	mov	r1, r6
 800cb18:	4628      	mov	r0, r5
 800cb1a:	47b8      	blx	r7
 800cb1c:	3001      	adds	r0, #1
 800cb1e:	f43f ae78 	beq.w	800c812 <_printf_float+0xb6>
 800cb22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb26:	4631      	mov	r1, r6
 800cb28:	4628      	mov	r0, r5
 800cb2a:	47b8      	blx	r7
 800cb2c:	3001      	adds	r0, #1
 800cb2e:	f43f ae70 	beq.w	800c812 <_printf_float+0xb6>
 800cb32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cb36:	2200      	movs	r2, #0
 800cb38:	2300      	movs	r3, #0
 800cb3a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cb3e:	f7f3 ffc3 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb42:	b9c0      	cbnz	r0, 800cb76 <_printf_float+0x41a>
 800cb44:	4653      	mov	r3, sl
 800cb46:	f108 0201 	add.w	r2, r8, #1
 800cb4a:	4631      	mov	r1, r6
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	47b8      	blx	r7
 800cb50:	3001      	adds	r0, #1
 800cb52:	d10c      	bne.n	800cb6e <_printf_float+0x412>
 800cb54:	e65d      	b.n	800c812 <_printf_float+0xb6>
 800cb56:	2301      	movs	r3, #1
 800cb58:	465a      	mov	r2, fp
 800cb5a:	4631      	mov	r1, r6
 800cb5c:	4628      	mov	r0, r5
 800cb5e:	47b8      	blx	r7
 800cb60:	3001      	adds	r0, #1
 800cb62:	f43f ae56 	beq.w	800c812 <_printf_float+0xb6>
 800cb66:	f108 0801 	add.w	r8, r8, #1
 800cb6a:	45d0      	cmp	r8, sl
 800cb6c:	dbf3      	blt.n	800cb56 <_printf_float+0x3fa>
 800cb6e:	464b      	mov	r3, r9
 800cb70:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cb74:	e6df      	b.n	800c936 <_printf_float+0x1da>
 800cb76:	f04f 0800 	mov.w	r8, #0
 800cb7a:	f104 0b1a 	add.w	fp, r4, #26
 800cb7e:	e7f4      	b.n	800cb6a <_printf_float+0x40e>
 800cb80:	2301      	movs	r3, #1
 800cb82:	4642      	mov	r2, r8
 800cb84:	e7e1      	b.n	800cb4a <_printf_float+0x3ee>
 800cb86:	2301      	movs	r3, #1
 800cb88:	464a      	mov	r2, r9
 800cb8a:	4631      	mov	r1, r6
 800cb8c:	4628      	mov	r0, r5
 800cb8e:	47b8      	blx	r7
 800cb90:	3001      	adds	r0, #1
 800cb92:	f43f ae3e 	beq.w	800c812 <_printf_float+0xb6>
 800cb96:	f108 0801 	add.w	r8, r8, #1
 800cb9a:	68e3      	ldr	r3, [r4, #12]
 800cb9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cb9e:	1a5b      	subs	r3, r3, r1
 800cba0:	4543      	cmp	r3, r8
 800cba2:	dcf0      	bgt.n	800cb86 <_printf_float+0x42a>
 800cba4:	e6fc      	b.n	800c9a0 <_printf_float+0x244>
 800cba6:	f04f 0800 	mov.w	r8, #0
 800cbaa:	f104 0919 	add.w	r9, r4, #25
 800cbae:	e7f4      	b.n	800cb9a <_printf_float+0x43e>

0800cbb0 <_printf_common>:
 800cbb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbb4:	4616      	mov	r6, r2
 800cbb6:	4698      	mov	r8, r3
 800cbb8:	688a      	ldr	r2, [r1, #8]
 800cbba:	690b      	ldr	r3, [r1, #16]
 800cbbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	bfb8      	it	lt
 800cbc4:	4613      	movlt	r3, r2
 800cbc6:	6033      	str	r3, [r6, #0]
 800cbc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cbcc:	4607      	mov	r7, r0
 800cbce:	460c      	mov	r4, r1
 800cbd0:	b10a      	cbz	r2, 800cbd6 <_printf_common+0x26>
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	6033      	str	r3, [r6, #0]
 800cbd6:	6823      	ldr	r3, [r4, #0]
 800cbd8:	0699      	lsls	r1, r3, #26
 800cbda:	bf42      	ittt	mi
 800cbdc:	6833      	ldrmi	r3, [r6, #0]
 800cbde:	3302      	addmi	r3, #2
 800cbe0:	6033      	strmi	r3, [r6, #0]
 800cbe2:	6825      	ldr	r5, [r4, #0]
 800cbe4:	f015 0506 	ands.w	r5, r5, #6
 800cbe8:	d106      	bne.n	800cbf8 <_printf_common+0x48>
 800cbea:	f104 0a19 	add.w	sl, r4, #25
 800cbee:	68e3      	ldr	r3, [r4, #12]
 800cbf0:	6832      	ldr	r2, [r6, #0]
 800cbf2:	1a9b      	subs	r3, r3, r2
 800cbf4:	42ab      	cmp	r3, r5
 800cbf6:	dc26      	bgt.n	800cc46 <_printf_common+0x96>
 800cbf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cbfc:	6822      	ldr	r2, [r4, #0]
 800cbfe:	3b00      	subs	r3, #0
 800cc00:	bf18      	it	ne
 800cc02:	2301      	movne	r3, #1
 800cc04:	0692      	lsls	r2, r2, #26
 800cc06:	d42b      	bmi.n	800cc60 <_printf_common+0xb0>
 800cc08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cc0c:	4641      	mov	r1, r8
 800cc0e:	4638      	mov	r0, r7
 800cc10:	47c8      	blx	r9
 800cc12:	3001      	adds	r0, #1
 800cc14:	d01e      	beq.n	800cc54 <_printf_common+0xa4>
 800cc16:	6823      	ldr	r3, [r4, #0]
 800cc18:	6922      	ldr	r2, [r4, #16]
 800cc1a:	f003 0306 	and.w	r3, r3, #6
 800cc1e:	2b04      	cmp	r3, #4
 800cc20:	bf02      	ittt	eq
 800cc22:	68e5      	ldreq	r5, [r4, #12]
 800cc24:	6833      	ldreq	r3, [r6, #0]
 800cc26:	1aed      	subeq	r5, r5, r3
 800cc28:	68a3      	ldr	r3, [r4, #8]
 800cc2a:	bf0c      	ite	eq
 800cc2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc30:	2500      	movne	r5, #0
 800cc32:	4293      	cmp	r3, r2
 800cc34:	bfc4      	itt	gt
 800cc36:	1a9b      	subgt	r3, r3, r2
 800cc38:	18ed      	addgt	r5, r5, r3
 800cc3a:	2600      	movs	r6, #0
 800cc3c:	341a      	adds	r4, #26
 800cc3e:	42b5      	cmp	r5, r6
 800cc40:	d11a      	bne.n	800cc78 <_printf_common+0xc8>
 800cc42:	2000      	movs	r0, #0
 800cc44:	e008      	b.n	800cc58 <_printf_common+0xa8>
 800cc46:	2301      	movs	r3, #1
 800cc48:	4652      	mov	r2, sl
 800cc4a:	4641      	mov	r1, r8
 800cc4c:	4638      	mov	r0, r7
 800cc4e:	47c8      	blx	r9
 800cc50:	3001      	adds	r0, #1
 800cc52:	d103      	bne.n	800cc5c <_printf_common+0xac>
 800cc54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc5c:	3501      	adds	r5, #1
 800cc5e:	e7c6      	b.n	800cbee <_printf_common+0x3e>
 800cc60:	18e1      	adds	r1, r4, r3
 800cc62:	1c5a      	adds	r2, r3, #1
 800cc64:	2030      	movs	r0, #48	@ 0x30
 800cc66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cc6a:	4422      	add	r2, r4
 800cc6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cc70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cc74:	3302      	adds	r3, #2
 800cc76:	e7c7      	b.n	800cc08 <_printf_common+0x58>
 800cc78:	2301      	movs	r3, #1
 800cc7a:	4622      	mov	r2, r4
 800cc7c:	4641      	mov	r1, r8
 800cc7e:	4638      	mov	r0, r7
 800cc80:	47c8      	blx	r9
 800cc82:	3001      	adds	r0, #1
 800cc84:	d0e6      	beq.n	800cc54 <_printf_common+0xa4>
 800cc86:	3601      	adds	r6, #1
 800cc88:	e7d9      	b.n	800cc3e <_printf_common+0x8e>
	...

0800cc8c <_printf_i>:
 800cc8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc90:	7e0f      	ldrb	r7, [r1, #24]
 800cc92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cc94:	2f78      	cmp	r7, #120	@ 0x78
 800cc96:	4691      	mov	r9, r2
 800cc98:	4680      	mov	r8, r0
 800cc9a:	460c      	mov	r4, r1
 800cc9c:	469a      	mov	sl, r3
 800cc9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cca2:	d807      	bhi.n	800ccb4 <_printf_i+0x28>
 800cca4:	2f62      	cmp	r7, #98	@ 0x62
 800cca6:	d80a      	bhi.n	800ccbe <_printf_i+0x32>
 800cca8:	2f00      	cmp	r7, #0
 800ccaa:	f000 80d1 	beq.w	800ce50 <_printf_i+0x1c4>
 800ccae:	2f58      	cmp	r7, #88	@ 0x58
 800ccb0:	f000 80b8 	beq.w	800ce24 <_printf_i+0x198>
 800ccb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ccb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ccbc:	e03a      	b.n	800cd34 <_printf_i+0xa8>
 800ccbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ccc2:	2b15      	cmp	r3, #21
 800ccc4:	d8f6      	bhi.n	800ccb4 <_printf_i+0x28>
 800ccc6:	a101      	add	r1, pc, #4	@ (adr r1, 800cccc <_printf_i+0x40>)
 800ccc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cccc:	0800cd25 	.word	0x0800cd25
 800ccd0:	0800cd39 	.word	0x0800cd39
 800ccd4:	0800ccb5 	.word	0x0800ccb5
 800ccd8:	0800ccb5 	.word	0x0800ccb5
 800ccdc:	0800ccb5 	.word	0x0800ccb5
 800cce0:	0800ccb5 	.word	0x0800ccb5
 800cce4:	0800cd39 	.word	0x0800cd39
 800cce8:	0800ccb5 	.word	0x0800ccb5
 800ccec:	0800ccb5 	.word	0x0800ccb5
 800ccf0:	0800ccb5 	.word	0x0800ccb5
 800ccf4:	0800ccb5 	.word	0x0800ccb5
 800ccf8:	0800ce37 	.word	0x0800ce37
 800ccfc:	0800cd63 	.word	0x0800cd63
 800cd00:	0800cdf1 	.word	0x0800cdf1
 800cd04:	0800ccb5 	.word	0x0800ccb5
 800cd08:	0800ccb5 	.word	0x0800ccb5
 800cd0c:	0800ce59 	.word	0x0800ce59
 800cd10:	0800ccb5 	.word	0x0800ccb5
 800cd14:	0800cd63 	.word	0x0800cd63
 800cd18:	0800ccb5 	.word	0x0800ccb5
 800cd1c:	0800ccb5 	.word	0x0800ccb5
 800cd20:	0800cdf9 	.word	0x0800cdf9
 800cd24:	6833      	ldr	r3, [r6, #0]
 800cd26:	1d1a      	adds	r2, r3, #4
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	6032      	str	r2, [r6, #0]
 800cd2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cd30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cd34:	2301      	movs	r3, #1
 800cd36:	e09c      	b.n	800ce72 <_printf_i+0x1e6>
 800cd38:	6833      	ldr	r3, [r6, #0]
 800cd3a:	6820      	ldr	r0, [r4, #0]
 800cd3c:	1d19      	adds	r1, r3, #4
 800cd3e:	6031      	str	r1, [r6, #0]
 800cd40:	0606      	lsls	r6, r0, #24
 800cd42:	d501      	bpl.n	800cd48 <_printf_i+0xbc>
 800cd44:	681d      	ldr	r5, [r3, #0]
 800cd46:	e003      	b.n	800cd50 <_printf_i+0xc4>
 800cd48:	0645      	lsls	r5, r0, #25
 800cd4a:	d5fb      	bpl.n	800cd44 <_printf_i+0xb8>
 800cd4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cd50:	2d00      	cmp	r5, #0
 800cd52:	da03      	bge.n	800cd5c <_printf_i+0xd0>
 800cd54:	232d      	movs	r3, #45	@ 0x2d
 800cd56:	426d      	negs	r5, r5
 800cd58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd5c:	4858      	ldr	r0, [pc, #352]	@ (800cec0 <_printf_i+0x234>)
 800cd5e:	230a      	movs	r3, #10
 800cd60:	e011      	b.n	800cd86 <_printf_i+0xfa>
 800cd62:	6821      	ldr	r1, [r4, #0]
 800cd64:	6833      	ldr	r3, [r6, #0]
 800cd66:	0608      	lsls	r0, r1, #24
 800cd68:	f853 5b04 	ldr.w	r5, [r3], #4
 800cd6c:	d402      	bmi.n	800cd74 <_printf_i+0xe8>
 800cd6e:	0649      	lsls	r1, r1, #25
 800cd70:	bf48      	it	mi
 800cd72:	b2ad      	uxthmi	r5, r5
 800cd74:	2f6f      	cmp	r7, #111	@ 0x6f
 800cd76:	4852      	ldr	r0, [pc, #328]	@ (800cec0 <_printf_i+0x234>)
 800cd78:	6033      	str	r3, [r6, #0]
 800cd7a:	bf14      	ite	ne
 800cd7c:	230a      	movne	r3, #10
 800cd7e:	2308      	moveq	r3, #8
 800cd80:	2100      	movs	r1, #0
 800cd82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cd86:	6866      	ldr	r6, [r4, #4]
 800cd88:	60a6      	str	r6, [r4, #8]
 800cd8a:	2e00      	cmp	r6, #0
 800cd8c:	db05      	blt.n	800cd9a <_printf_i+0x10e>
 800cd8e:	6821      	ldr	r1, [r4, #0]
 800cd90:	432e      	orrs	r6, r5
 800cd92:	f021 0104 	bic.w	r1, r1, #4
 800cd96:	6021      	str	r1, [r4, #0]
 800cd98:	d04b      	beq.n	800ce32 <_printf_i+0x1a6>
 800cd9a:	4616      	mov	r6, r2
 800cd9c:	fbb5 f1f3 	udiv	r1, r5, r3
 800cda0:	fb03 5711 	mls	r7, r3, r1, r5
 800cda4:	5dc7      	ldrb	r7, [r0, r7]
 800cda6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cdaa:	462f      	mov	r7, r5
 800cdac:	42bb      	cmp	r3, r7
 800cdae:	460d      	mov	r5, r1
 800cdb0:	d9f4      	bls.n	800cd9c <_printf_i+0x110>
 800cdb2:	2b08      	cmp	r3, #8
 800cdb4:	d10b      	bne.n	800cdce <_printf_i+0x142>
 800cdb6:	6823      	ldr	r3, [r4, #0]
 800cdb8:	07df      	lsls	r7, r3, #31
 800cdba:	d508      	bpl.n	800cdce <_printf_i+0x142>
 800cdbc:	6923      	ldr	r3, [r4, #16]
 800cdbe:	6861      	ldr	r1, [r4, #4]
 800cdc0:	4299      	cmp	r1, r3
 800cdc2:	bfde      	ittt	le
 800cdc4:	2330      	movle	r3, #48	@ 0x30
 800cdc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cdca:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800cdce:	1b92      	subs	r2, r2, r6
 800cdd0:	6122      	str	r2, [r4, #16]
 800cdd2:	f8cd a000 	str.w	sl, [sp]
 800cdd6:	464b      	mov	r3, r9
 800cdd8:	aa03      	add	r2, sp, #12
 800cdda:	4621      	mov	r1, r4
 800cddc:	4640      	mov	r0, r8
 800cdde:	f7ff fee7 	bl	800cbb0 <_printf_common>
 800cde2:	3001      	adds	r0, #1
 800cde4:	d14a      	bne.n	800ce7c <_printf_i+0x1f0>
 800cde6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cdea:	b004      	add	sp, #16
 800cdec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdf0:	6823      	ldr	r3, [r4, #0]
 800cdf2:	f043 0320 	orr.w	r3, r3, #32
 800cdf6:	6023      	str	r3, [r4, #0]
 800cdf8:	4832      	ldr	r0, [pc, #200]	@ (800cec4 <_printf_i+0x238>)
 800cdfa:	2778      	movs	r7, #120	@ 0x78
 800cdfc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ce00:	6823      	ldr	r3, [r4, #0]
 800ce02:	6831      	ldr	r1, [r6, #0]
 800ce04:	061f      	lsls	r7, r3, #24
 800ce06:	f851 5b04 	ldr.w	r5, [r1], #4
 800ce0a:	d402      	bmi.n	800ce12 <_printf_i+0x186>
 800ce0c:	065f      	lsls	r7, r3, #25
 800ce0e:	bf48      	it	mi
 800ce10:	b2ad      	uxthmi	r5, r5
 800ce12:	6031      	str	r1, [r6, #0]
 800ce14:	07d9      	lsls	r1, r3, #31
 800ce16:	bf44      	itt	mi
 800ce18:	f043 0320 	orrmi.w	r3, r3, #32
 800ce1c:	6023      	strmi	r3, [r4, #0]
 800ce1e:	b11d      	cbz	r5, 800ce28 <_printf_i+0x19c>
 800ce20:	2310      	movs	r3, #16
 800ce22:	e7ad      	b.n	800cd80 <_printf_i+0xf4>
 800ce24:	4826      	ldr	r0, [pc, #152]	@ (800cec0 <_printf_i+0x234>)
 800ce26:	e7e9      	b.n	800cdfc <_printf_i+0x170>
 800ce28:	6823      	ldr	r3, [r4, #0]
 800ce2a:	f023 0320 	bic.w	r3, r3, #32
 800ce2e:	6023      	str	r3, [r4, #0]
 800ce30:	e7f6      	b.n	800ce20 <_printf_i+0x194>
 800ce32:	4616      	mov	r6, r2
 800ce34:	e7bd      	b.n	800cdb2 <_printf_i+0x126>
 800ce36:	6833      	ldr	r3, [r6, #0]
 800ce38:	6825      	ldr	r5, [r4, #0]
 800ce3a:	6961      	ldr	r1, [r4, #20]
 800ce3c:	1d18      	adds	r0, r3, #4
 800ce3e:	6030      	str	r0, [r6, #0]
 800ce40:	062e      	lsls	r6, r5, #24
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	d501      	bpl.n	800ce4a <_printf_i+0x1be>
 800ce46:	6019      	str	r1, [r3, #0]
 800ce48:	e002      	b.n	800ce50 <_printf_i+0x1c4>
 800ce4a:	0668      	lsls	r0, r5, #25
 800ce4c:	d5fb      	bpl.n	800ce46 <_printf_i+0x1ba>
 800ce4e:	8019      	strh	r1, [r3, #0]
 800ce50:	2300      	movs	r3, #0
 800ce52:	6123      	str	r3, [r4, #16]
 800ce54:	4616      	mov	r6, r2
 800ce56:	e7bc      	b.n	800cdd2 <_printf_i+0x146>
 800ce58:	6833      	ldr	r3, [r6, #0]
 800ce5a:	1d1a      	adds	r2, r3, #4
 800ce5c:	6032      	str	r2, [r6, #0]
 800ce5e:	681e      	ldr	r6, [r3, #0]
 800ce60:	6862      	ldr	r2, [r4, #4]
 800ce62:	2100      	movs	r1, #0
 800ce64:	4630      	mov	r0, r6
 800ce66:	f7f3 f9b3 	bl	80001d0 <memchr>
 800ce6a:	b108      	cbz	r0, 800ce70 <_printf_i+0x1e4>
 800ce6c:	1b80      	subs	r0, r0, r6
 800ce6e:	6060      	str	r0, [r4, #4]
 800ce70:	6863      	ldr	r3, [r4, #4]
 800ce72:	6123      	str	r3, [r4, #16]
 800ce74:	2300      	movs	r3, #0
 800ce76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce7a:	e7aa      	b.n	800cdd2 <_printf_i+0x146>
 800ce7c:	6923      	ldr	r3, [r4, #16]
 800ce7e:	4632      	mov	r2, r6
 800ce80:	4649      	mov	r1, r9
 800ce82:	4640      	mov	r0, r8
 800ce84:	47d0      	blx	sl
 800ce86:	3001      	adds	r0, #1
 800ce88:	d0ad      	beq.n	800cde6 <_printf_i+0x15a>
 800ce8a:	6823      	ldr	r3, [r4, #0]
 800ce8c:	079b      	lsls	r3, r3, #30
 800ce8e:	d413      	bmi.n	800ceb8 <_printf_i+0x22c>
 800ce90:	68e0      	ldr	r0, [r4, #12]
 800ce92:	9b03      	ldr	r3, [sp, #12]
 800ce94:	4298      	cmp	r0, r3
 800ce96:	bfb8      	it	lt
 800ce98:	4618      	movlt	r0, r3
 800ce9a:	e7a6      	b.n	800cdea <_printf_i+0x15e>
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	4632      	mov	r2, r6
 800cea0:	4649      	mov	r1, r9
 800cea2:	4640      	mov	r0, r8
 800cea4:	47d0      	blx	sl
 800cea6:	3001      	adds	r0, #1
 800cea8:	d09d      	beq.n	800cde6 <_printf_i+0x15a>
 800ceaa:	3501      	adds	r5, #1
 800ceac:	68e3      	ldr	r3, [r4, #12]
 800ceae:	9903      	ldr	r1, [sp, #12]
 800ceb0:	1a5b      	subs	r3, r3, r1
 800ceb2:	42ab      	cmp	r3, r5
 800ceb4:	dcf2      	bgt.n	800ce9c <_printf_i+0x210>
 800ceb6:	e7eb      	b.n	800ce90 <_printf_i+0x204>
 800ceb8:	2500      	movs	r5, #0
 800ceba:	f104 0619 	add.w	r6, r4, #25
 800cebe:	e7f5      	b.n	800ceac <_printf_i+0x220>
 800cec0:	0800f382 	.word	0x0800f382
 800cec4:	0800f393 	.word	0x0800f393

0800cec8 <std>:
 800cec8:	2300      	movs	r3, #0
 800ceca:	b510      	push	{r4, lr}
 800cecc:	4604      	mov	r4, r0
 800cece:	e9c0 3300 	strd	r3, r3, [r0]
 800ced2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ced6:	6083      	str	r3, [r0, #8]
 800ced8:	8181      	strh	r1, [r0, #12]
 800ceda:	6643      	str	r3, [r0, #100]	@ 0x64
 800cedc:	81c2      	strh	r2, [r0, #14]
 800cede:	6183      	str	r3, [r0, #24]
 800cee0:	4619      	mov	r1, r3
 800cee2:	2208      	movs	r2, #8
 800cee4:	305c      	adds	r0, #92	@ 0x5c
 800cee6:	f000 f916 	bl	800d116 <memset>
 800ceea:	4b0d      	ldr	r3, [pc, #52]	@ (800cf20 <std+0x58>)
 800ceec:	6263      	str	r3, [r4, #36]	@ 0x24
 800ceee:	4b0d      	ldr	r3, [pc, #52]	@ (800cf24 <std+0x5c>)
 800cef0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cef2:	4b0d      	ldr	r3, [pc, #52]	@ (800cf28 <std+0x60>)
 800cef4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cef6:	4b0d      	ldr	r3, [pc, #52]	@ (800cf2c <std+0x64>)
 800cef8:	6323      	str	r3, [r4, #48]	@ 0x30
 800cefa:	4b0d      	ldr	r3, [pc, #52]	@ (800cf30 <std+0x68>)
 800cefc:	6224      	str	r4, [r4, #32]
 800cefe:	429c      	cmp	r4, r3
 800cf00:	d006      	beq.n	800cf10 <std+0x48>
 800cf02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cf06:	4294      	cmp	r4, r2
 800cf08:	d002      	beq.n	800cf10 <std+0x48>
 800cf0a:	33d0      	adds	r3, #208	@ 0xd0
 800cf0c:	429c      	cmp	r4, r3
 800cf0e:	d105      	bne.n	800cf1c <std+0x54>
 800cf10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cf14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf18:	f000 b97a 	b.w	800d210 <__retarget_lock_init_recursive>
 800cf1c:	bd10      	pop	{r4, pc}
 800cf1e:	bf00      	nop
 800cf20:	0800d091 	.word	0x0800d091
 800cf24:	0800d0b3 	.word	0x0800d0b3
 800cf28:	0800d0eb 	.word	0x0800d0eb
 800cf2c:	0800d10f 	.word	0x0800d10f
 800cf30:	20005e8c 	.word	0x20005e8c

0800cf34 <stdio_exit_handler>:
 800cf34:	4a02      	ldr	r2, [pc, #8]	@ (800cf40 <stdio_exit_handler+0xc>)
 800cf36:	4903      	ldr	r1, [pc, #12]	@ (800cf44 <stdio_exit_handler+0x10>)
 800cf38:	4803      	ldr	r0, [pc, #12]	@ (800cf48 <stdio_exit_handler+0x14>)
 800cf3a:	f000 b869 	b.w	800d010 <_fwalk_sglue>
 800cf3e:	bf00      	nop
 800cf40:	20000144 	.word	0x20000144
 800cf44:	0800eb75 	.word	0x0800eb75
 800cf48:	20000154 	.word	0x20000154

0800cf4c <cleanup_stdio>:
 800cf4c:	6841      	ldr	r1, [r0, #4]
 800cf4e:	4b0c      	ldr	r3, [pc, #48]	@ (800cf80 <cleanup_stdio+0x34>)
 800cf50:	4299      	cmp	r1, r3
 800cf52:	b510      	push	{r4, lr}
 800cf54:	4604      	mov	r4, r0
 800cf56:	d001      	beq.n	800cf5c <cleanup_stdio+0x10>
 800cf58:	f001 fe0c 	bl	800eb74 <_fflush_r>
 800cf5c:	68a1      	ldr	r1, [r4, #8]
 800cf5e:	4b09      	ldr	r3, [pc, #36]	@ (800cf84 <cleanup_stdio+0x38>)
 800cf60:	4299      	cmp	r1, r3
 800cf62:	d002      	beq.n	800cf6a <cleanup_stdio+0x1e>
 800cf64:	4620      	mov	r0, r4
 800cf66:	f001 fe05 	bl	800eb74 <_fflush_r>
 800cf6a:	68e1      	ldr	r1, [r4, #12]
 800cf6c:	4b06      	ldr	r3, [pc, #24]	@ (800cf88 <cleanup_stdio+0x3c>)
 800cf6e:	4299      	cmp	r1, r3
 800cf70:	d004      	beq.n	800cf7c <cleanup_stdio+0x30>
 800cf72:	4620      	mov	r0, r4
 800cf74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf78:	f001 bdfc 	b.w	800eb74 <_fflush_r>
 800cf7c:	bd10      	pop	{r4, pc}
 800cf7e:	bf00      	nop
 800cf80:	20005e8c 	.word	0x20005e8c
 800cf84:	20005ef4 	.word	0x20005ef4
 800cf88:	20005f5c 	.word	0x20005f5c

0800cf8c <global_stdio_init.part.0>:
 800cf8c:	b510      	push	{r4, lr}
 800cf8e:	4b0b      	ldr	r3, [pc, #44]	@ (800cfbc <global_stdio_init.part.0+0x30>)
 800cf90:	4c0b      	ldr	r4, [pc, #44]	@ (800cfc0 <global_stdio_init.part.0+0x34>)
 800cf92:	4a0c      	ldr	r2, [pc, #48]	@ (800cfc4 <global_stdio_init.part.0+0x38>)
 800cf94:	601a      	str	r2, [r3, #0]
 800cf96:	4620      	mov	r0, r4
 800cf98:	2200      	movs	r2, #0
 800cf9a:	2104      	movs	r1, #4
 800cf9c:	f7ff ff94 	bl	800cec8 <std>
 800cfa0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	2109      	movs	r1, #9
 800cfa8:	f7ff ff8e 	bl	800cec8 <std>
 800cfac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cfb0:	2202      	movs	r2, #2
 800cfb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfb6:	2112      	movs	r1, #18
 800cfb8:	f7ff bf86 	b.w	800cec8 <std>
 800cfbc:	20005fc4 	.word	0x20005fc4
 800cfc0:	20005e8c 	.word	0x20005e8c
 800cfc4:	0800cf35 	.word	0x0800cf35

0800cfc8 <__sfp_lock_acquire>:
 800cfc8:	4801      	ldr	r0, [pc, #4]	@ (800cfd0 <__sfp_lock_acquire+0x8>)
 800cfca:	f000 b922 	b.w	800d212 <__retarget_lock_acquire_recursive>
 800cfce:	bf00      	nop
 800cfd0:	20005fcd 	.word	0x20005fcd

0800cfd4 <__sfp_lock_release>:
 800cfd4:	4801      	ldr	r0, [pc, #4]	@ (800cfdc <__sfp_lock_release+0x8>)
 800cfd6:	f000 b91d 	b.w	800d214 <__retarget_lock_release_recursive>
 800cfda:	bf00      	nop
 800cfdc:	20005fcd 	.word	0x20005fcd

0800cfe0 <__sinit>:
 800cfe0:	b510      	push	{r4, lr}
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	f7ff fff0 	bl	800cfc8 <__sfp_lock_acquire>
 800cfe8:	6a23      	ldr	r3, [r4, #32]
 800cfea:	b11b      	cbz	r3, 800cff4 <__sinit+0x14>
 800cfec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cff0:	f7ff bff0 	b.w	800cfd4 <__sfp_lock_release>
 800cff4:	4b04      	ldr	r3, [pc, #16]	@ (800d008 <__sinit+0x28>)
 800cff6:	6223      	str	r3, [r4, #32]
 800cff8:	4b04      	ldr	r3, [pc, #16]	@ (800d00c <__sinit+0x2c>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d1f5      	bne.n	800cfec <__sinit+0xc>
 800d000:	f7ff ffc4 	bl	800cf8c <global_stdio_init.part.0>
 800d004:	e7f2      	b.n	800cfec <__sinit+0xc>
 800d006:	bf00      	nop
 800d008:	0800cf4d 	.word	0x0800cf4d
 800d00c:	20005fc4 	.word	0x20005fc4

0800d010 <_fwalk_sglue>:
 800d010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d014:	4607      	mov	r7, r0
 800d016:	4688      	mov	r8, r1
 800d018:	4614      	mov	r4, r2
 800d01a:	2600      	movs	r6, #0
 800d01c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d020:	f1b9 0901 	subs.w	r9, r9, #1
 800d024:	d505      	bpl.n	800d032 <_fwalk_sglue+0x22>
 800d026:	6824      	ldr	r4, [r4, #0]
 800d028:	2c00      	cmp	r4, #0
 800d02a:	d1f7      	bne.n	800d01c <_fwalk_sglue+0xc>
 800d02c:	4630      	mov	r0, r6
 800d02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d032:	89ab      	ldrh	r3, [r5, #12]
 800d034:	2b01      	cmp	r3, #1
 800d036:	d907      	bls.n	800d048 <_fwalk_sglue+0x38>
 800d038:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d03c:	3301      	adds	r3, #1
 800d03e:	d003      	beq.n	800d048 <_fwalk_sglue+0x38>
 800d040:	4629      	mov	r1, r5
 800d042:	4638      	mov	r0, r7
 800d044:	47c0      	blx	r8
 800d046:	4306      	orrs	r6, r0
 800d048:	3568      	adds	r5, #104	@ 0x68
 800d04a:	e7e9      	b.n	800d020 <_fwalk_sglue+0x10>

0800d04c <siprintf>:
 800d04c:	b40e      	push	{r1, r2, r3}
 800d04e:	b510      	push	{r4, lr}
 800d050:	b09d      	sub	sp, #116	@ 0x74
 800d052:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d054:	9002      	str	r0, [sp, #8]
 800d056:	9006      	str	r0, [sp, #24]
 800d058:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d05c:	480a      	ldr	r0, [pc, #40]	@ (800d088 <siprintf+0x3c>)
 800d05e:	9107      	str	r1, [sp, #28]
 800d060:	9104      	str	r1, [sp, #16]
 800d062:	490a      	ldr	r1, [pc, #40]	@ (800d08c <siprintf+0x40>)
 800d064:	f853 2b04 	ldr.w	r2, [r3], #4
 800d068:	9105      	str	r1, [sp, #20]
 800d06a:	2400      	movs	r4, #0
 800d06c:	a902      	add	r1, sp, #8
 800d06e:	6800      	ldr	r0, [r0, #0]
 800d070:	9301      	str	r3, [sp, #4]
 800d072:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d074:	f001 fbfe 	bl	800e874 <_svfiprintf_r>
 800d078:	9b02      	ldr	r3, [sp, #8]
 800d07a:	701c      	strb	r4, [r3, #0]
 800d07c:	b01d      	add	sp, #116	@ 0x74
 800d07e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d082:	b003      	add	sp, #12
 800d084:	4770      	bx	lr
 800d086:	bf00      	nop
 800d088:	20000150 	.word	0x20000150
 800d08c:	ffff0208 	.word	0xffff0208

0800d090 <__sread>:
 800d090:	b510      	push	{r4, lr}
 800d092:	460c      	mov	r4, r1
 800d094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d098:	f000 f86c 	bl	800d174 <_read_r>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	bfab      	itete	ge
 800d0a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d0a2:	89a3      	ldrhlt	r3, [r4, #12]
 800d0a4:	181b      	addge	r3, r3, r0
 800d0a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d0aa:	bfac      	ite	ge
 800d0ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d0ae:	81a3      	strhlt	r3, [r4, #12]
 800d0b0:	bd10      	pop	{r4, pc}

0800d0b2 <__swrite>:
 800d0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0b6:	461f      	mov	r7, r3
 800d0b8:	898b      	ldrh	r3, [r1, #12]
 800d0ba:	05db      	lsls	r3, r3, #23
 800d0bc:	4605      	mov	r5, r0
 800d0be:	460c      	mov	r4, r1
 800d0c0:	4616      	mov	r6, r2
 800d0c2:	d505      	bpl.n	800d0d0 <__swrite+0x1e>
 800d0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0c8:	2302      	movs	r3, #2
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f000 f840 	bl	800d150 <_lseek_r>
 800d0d0:	89a3      	ldrh	r3, [r4, #12]
 800d0d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d0da:	81a3      	strh	r3, [r4, #12]
 800d0dc:	4632      	mov	r2, r6
 800d0de:	463b      	mov	r3, r7
 800d0e0:	4628      	mov	r0, r5
 800d0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e6:	f000 b857 	b.w	800d198 <_write_r>

0800d0ea <__sseek>:
 800d0ea:	b510      	push	{r4, lr}
 800d0ec:	460c      	mov	r4, r1
 800d0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0f2:	f000 f82d 	bl	800d150 <_lseek_r>
 800d0f6:	1c43      	adds	r3, r0, #1
 800d0f8:	89a3      	ldrh	r3, [r4, #12]
 800d0fa:	bf15      	itete	ne
 800d0fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d0fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d102:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d106:	81a3      	strheq	r3, [r4, #12]
 800d108:	bf18      	it	ne
 800d10a:	81a3      	strhne	r3, [r4, #12]
 800d10c:	bd10      	pop	{r4, pc}

0800d10e <__sclose>:
 800d10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d112:	f000 b80d 	b.w	800d130 <_close_r>

0800d116 <memset>:
 800d116:	4402      	add	r2, r0
 800d118:	4603      	mov	r3, r0
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d100      	bne.n	800d120 <memset+0xa>
 800d11e:	4770      	bx	lr
 800d120:	f803 1b01 	strb.w	r1, [r3], #1
 800d124:	e7f9      	b.n	800d11a <memset+0x4>
	...

0800d128 <_localeconv_r>:
 800d128:	4800      	ldr	r0, [pc, #0]	@ (800d12c <_localeconv_r+0x4>)
 800d12a:	4770      	bx	lr
 800d12c:	20000290 	.word	0x20000290

0800d130 <_close_r>:
 800d130:	b538      	push	{r3, r4, r5, lr}
 800d132:	4d06      	ldr	r5, [pc, #24]	@ (800d14c <_close_r+0x1c>)
 800d134:	2300      	movs	r3, #0
 800d136:	4604      	mov	r4, r0
 800d138:	4608      	mov	r0, r1
 800d13a:	602b      	str	r3, [r5, #0]
 800d13c:	f7f5 fb14 	bl	8002768 <_close>
 800d140:	1c43      	adds	r3, r0, #1
 800d142:	d102      	bne.n	800d14a <_close_r+0x1a>
 800d144:	682b      	ldr	r3, [r5, #0]
 800d146:	b103      	cbz	r3, 800d14a <_close_r+0x1a>
 800d148:	6023      	str	r3, [r4, #0]
 800d14a:	bd38      	pop	{r3, r4, r5, pc}
 800d14c:	20005fc8 	.word	0x20005fc8

0800d150 <_lseek_r>:
 800d150:	b538      	push	{r3, r4, r5, lr}
 800d152:	4d07      	ldr	r5, [pc, #28]	@ (800d170 <_lseek_r+0x20>)
 800d154:	4604      	mov	r4, r0
 800d156:	4608      	mov	r0, r1
 800d158:	4611      	mov	r1, r2
 800d15a:	2200      	movs	r2, #0
 800d15c:	602a      	str	r2, [r5, #0]
 800d15e:	461a      	mov	r2, r3
 800d160:	f7f5 fb29 	bl	80027b6 <_lseek>
 800d164:	1c43      	adds	r3, r0, #1
 800d166:	d102      	bne.n	800d16e <_lseek_r+0x1e>
 800d168:	682b      	ldr	r3, [r5, #0]
 800d16a:	b103      	cbz	r3, 800d16e <_lseek_r+0x1e>
 800d16c:	6023      	str	r3, [r4, #0]
 800d16e:	bd38      	pop	{r3, r4, r5, pc}
 800d170:	20005fc8 	.word	0x20005fc8

0800d174 <_read_r>:
 800d174:	b538      	push	{r3, r4, r5, lr}
 800d176:	4d07      	ldr	r5, [pc, #28]	@ (800d194 <_read_r+0x20>)
 800d178:	4604      	mov	r4, r0
 800d17a:	4608      	mov	r0, r1
 800d17c:	4611      	mov	r1, r2
 800d17e:	2200      	movs	r2, #0
 800d180:	602a      	str	r2, [r5, #0]
 800d182:	461a      	mov	r2, r3
 800d184:	f7f5 fab7 	bl	80026f6 <_read>
 800d188:	1c43      	adds	r3, r0, #1
 800d18a:	d102      	bne.n	800d192 <_read_r+0x1e>
 800d18c:	682b      	ldr	r3, [r5, #0]
 800d18e:	b103      	cbz	r3, 800d192 <_read_r+0x1e>
 800d190:	6023      	str	r3, [r4, #0]
 800d192:	bd38      	pop	{r3, r4, r5, pc}
 800d194:	20005fc8 	.word	0x20005fc8

0800d198 <_write_r>:
 800d198:	b538      	push	{r3, r4, r5, lr}
 800d19a:	4d07      	ldr	r5, [pc, #28]	@ (800d1b8 <_write_r+0x20>)
 800d19c:	4604      	mov	r4, r0
 800d19e:	4608      	mov	r0, r1
 800d1a0:	4611      	mov	r1, r2
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	602a      	str	r2, [r5, #0]
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	f7f5 fac2 	bl	8002730 <_write>
 800d1ac:	1c43      	adds	r3, r0, #1
 800d1ae:	d102      	bne.n	800d1b6 <_write_r+0x1e>
 800d1b0:	682b      	ldr	r3, [r5, #0]
 800d1b2:	b103      	cbz	r3, 800d1b6 <_write_r+0x1e>
 800d1b4:	6023      	str	r3, [r4, #0]
 800d1b6:	bd38      	pop	{r3, r4, r5, pc}
 800d1b8:	20005fc8 	.word	0x20005fc8

0800d1bc <__errno>:
 800d1bc:	4b01      	ldr	r3, [pc, #4]	@ (800d1c4 <__errno+0x8>)
 800d1be:	6818      	ldr	r0, [r3, #0]
 800d1c0:	4770      	bx	lr
 800d1c2:	bf00      	nop
 800d1c4:	20000150 	.word	0x20000150

0800d1c8 <__libc_init_array>:
 800d1c8:	b570      	push	{r4, r5, r6, lr}
 800d1ca:	4d0d      	ldr	r5, [pc, #52]	@ (800d200 <__libc_init_array+0x38>)
 800d1cc:	4c0d      	ldr	r4, [pc, #52]	@ (800d204 <__libc_init_array+0x3c>)
 800d1ce:	1b64      	subs	r4, r4, r5
 800d1d0:	10a4      	asrs	r4, r4, #2
 800d1d2:	2600      	movs	r6, #0
 800d1d4:	42a6      	cmp	r6, r4
 800d1d6:	d109      	bne.n	800d1ec <__libc_init_array+0x24>
 800d1d8:	4d0b      	ldr	r5, [pc, #44]	@ (800d208 <__libc_init_array+0x40>)
 800d1da:	4c0c      	ldr	r4, [pc, #48]	@ (800d20c <__libc_init_array+0x44>)
 800d1dc:	f002 f868 	bl	800f2b0 <_init>
 800d1e0:	1b64      	subs	r4, r4, r5
 800d1e2:	10a4      	asrs	r4, r4, #2
 800d1e4:	2600      	movs	r6, #0
 800d1e6:	42a6      	cmp	r6, r4
 800d1e8:	d105      	bne.n	800d1f6 <__libc_init_array+0x2e>
 800d1ea:	bd70      	pop	{r4, r5, r6, pc}
 800d1ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1f0:	4798      	blx	r3
 800d1f2:	3601      	adds	r6, #1
 800d1f4:	e7ee      	b.n	800d1d4 <__libc_init_array+0xc>
 800d1f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1fa:	4798      	blx	r3
 800d1fc:	3601      	adds	r6, #1
 800d1fe:	e7f2      	b.n	800d1e6 <__libc_init_array+0x1e>
 800d200:	0800f6ec 	.word	0x0800f6ec
 800d204:	0800f6ec 	.word	0x0800f6ec
 800d208:	0800f6ec 	.word	0x0800f6ec
 800d20c:	0800f6f0 	.word	0x0800f6f0

0800d210 <__retarget_lock_init_recursive>:
 800d210:	4770      	bx	lr

0800d212 <__retarget_lock_acquire_recursive>:
 800d212:	4770      	bx	lr

0800d214 <__retarget_lock_release_recursive>:
 800d214:	4770      	bx	lr

0800d216 <quorem>:
 800d216:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d21a:	6903      	ldr	r3, [r0, #16]
 800d21c:	690c      	ldr	r4, [r1, #16]
 800d21e:	42a3      	cmp	r3, r4
 800d220:	4607      	mov	r7, r0
 800d222:	db7e      	blt.n	800d322 <quorem+0x10c>
 800d224:	3c01      	subs	r4, #1
 800d226:	f101 0814 	add.w	r8, r1, #20
 800d22a:	00a3      	lsls	r3, r4, #2
 800d22c:	f100 0514 	add.w	r5, r0, #20
 800d230:	9300      	str	r3, [sp, #0]
 800d232:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d236:	9301      	str	r3, [sp, #4]
 800d238:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d23c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d240:	3301      	adds	r3, #1
 800d242:	429a      	cmp	r2, r3
 800d244:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d248:	fbb2 f6f3 	udiv	r6, r2, r3
 800d24c:	d32e      	bcc.n	800d2ac <quorem+0x96>
 800d24e:	f04f 0a00 	mov.w	sl, #0
 800d252:	46c4      	mov	ip, r8
 800d254:	46ae      	mov	lr, r5
 800d256:	46d3      	mov	fp, sl
 800d258:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d25c:	b298      	uxth	r0, r3
 800d25e:	fb06 a000 	mla	r0, r6, r0, sl
 800d262:	0c02      	lsrs	r2, r0, #16
 800d264:	0c1b      	lsrs	r3, r3, #16
 800d266:	fb06 2303 	mla	r3, r6, r3, r2
 800d26a:	f8de 2000 	ldr.w	r2, [lr]
 800d26e:	b280      	uxth	r0, r0
 800d270:	b292      	uxth	r2, r2
 800d272:	1a12      	subs	r2, r2, r0
 800d274:	445a      	add	r2, fp
 800d276:	f8de 0000 	ldr.w	r0, [lr]
 800d27a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d27e:	b29b      	uxth	r3, r3
 800d280:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d284:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d288:	b292      	uxth	r2, r2
 800d28a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d28e:	45e1      	cmp	r9, ip
 800d290:	f84e 2b04 	str.w	r2, [lr], #4
 800d294:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d298:	d2de      	bcs.n	800d258 <quorem+0x42>
 800d29a:	9b00      	ldr	r3, [sp, #0]
 800d29c:	58eb      	ldr	r3, [r5, r3]
 800d29e:	b92b      	cbnz	r3, 800d2ac <quorem+0x96>
 800d2a0:	9b01      	ldr	r3, [sp, #4]
 800d2a2:	3b04      	subs	r3, #4
 800d2a4:	429d      	cmp	r5, r3
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	d32f      	bcc.n	800d30a <quorem+0xf4>
 800d2aa:	613c      	str	r4, [r7, #16]
 800d2ac:	4638      	mov	r0, r7
 800d2ae:	f001 f97d 	bl	800e5ac <__mcmp>
 800d2b2:	2800      	cmp	r0, #0
 800d2b4:	db25      	blt.n	800d302 <quorem+0xec>
 800d2b6:	4629      	mov	r1, r5
 800d2b8:	2000      	movs	r0, #0
 800d2ba:	f858 2b04 	ldr.w	r2, [r8], #4
 800d2be:	f8d1 c000 	ldr.w	ip, [r1]
 800d2c2:	fa1f fe82 	uxth.w	lr, r2
 800d2c6:	fa1f f38c 	uxth.w	r3, ip
 800d2ca:	eba3 030e 	sub.w	r3, r3, lr
 800d2ce:	4403      	add	r3, r0
 800d2d0:	0c12      	lsrs	r2, r2, #16
 800d2d2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d2d6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2e0:	45c1      	cmp	r9, r8
 800d2e2:	f841 3b04 	str.w	r3, [r1], #4
 800d2e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d2ea:	d2e6      	bcs.n	800d2ba <quorem+0xa4>
 800d2ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d2f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d2f4:	b922      	cbnz	r2, 800d300 <quorem+0xea>
 800d2f6:	3b04      	subs	r3, #4
 800d2f8:	429d      	cmp	r5, r3
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	d30b      	bcc.n	800d316 <quorem+0x100>
 800d2fe:	613c      	str	r4, [r7, #16]
 800d300:	3601      	adds	r6, #1
 800d302:	4630      	mov	r0, r6
 800d304:	b003      	add	sp, #12
 800d306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d30a:	6812      	ldr	r2, [r2, #0]
 800d30c:	3b04      	subs	r3, #4
 800d30e:	2a00      	cmp	r2, #0
 800d310:	d1cb      	bne.n	800d2aa <quorem+0x94>
 800d312:	3c01      	subs	r4, #1
 800d314:	e7c6      	b.n	800d2a4 <quorem+0x8e>
 800d316:	6812      	ldr	r2, [r2, #0]
 800d318:	3b04      	subs	r3, #4
 800d31a:	2a00      	cmp	r2, #0
 800d31c:	d1ef      	bne.n	800d2fe <quorem+0xe8>
 800d31e:	3c01      	subs	r4, #1
 800d320:	e7ea      	b.n	800d2f8 <quorem+0xe2>
 800d322:	2000      	movs	r0, #0
 800d324:	e7ee      	b.n	800d304 <quorem+0xee>
	...

0800d328 <_dtoa_r>:
 800d328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d32c:	69c7      	ldr	r7, [r0, #28]
 800d32e:	b097      	sub	sp, #92	@ 0x5c
 800d330:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d334:	ec55 4b10 	vmov	r4, r5, d0
 800d338:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d33a:	9107      	str	r1, [sp, #28]
 800d33c:	4681      	mov	r9, r0
 800d33e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d340:	9311      	str	r3, [sp, #68]	@ 0x44
 800d342:	b97f      	cbnz	r7, 800d364 <_dtoa_r+0x3c>
 800d344:	2010      	movs	r0, #16
 800d346:	f000 fe09 	bl	800df5c <malloc>
 800d34a:	4602      	mov	r2, r0
 800d34c:	f8c9 001c 	str.w	r0, [r9, #28]
 800d350:	b920      	cbnz	r0, 800d35c <_dtoa_r+0x34>
 800d352:	4ba9      	ldr	r3, [pc, #676]	@ (800d5f8 <_dtoa_r+0x2d0>)
 800d354:	21ef      	movs	r1, #239	@ 0xef
 800d356:	48a9      	ldr	r0, [pc, #676]	@ (800d5fc <_dtoa_r+0x2d4>)
 800d358:	f001 fc6c 	bl	800ec34 <__assert_func>
 800d35c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d360:	6007      	str	r7, [r0, #0]
 800d362:	60c7      	str	r7, [r0, #12]
 800d364:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d368:	6819      	ldr	r1, [r3, #0]
 800d36a:	b159      	cbz	r1, 800d384 <_dtoa_r+0x5c>
 800d36c:	685a      	ldr	r2, [r3, #4]
 800d36e:	604a      	str	r2, [r1, #4]
 800d370:	2301      	movs	r3, #1
 800d372:	4093      	lsls	r3, r2
 800d374:	608b      	str	r3, [r1, #8]
 800d376:	4648      	mov	r0, r9
 800d378:	f000 fee6 	bl	800e148 <_Bfree>
 800d37c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d380:	2200      	movs	r2, #0
 800d382:	601a      	str	r2, [r3, #0]
 800d384:	1e2b      	subs	r3, r5, #0
 800d386:	bfb9      	ittee	lt
 800d388:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d38c:	9305      	strlt	r3, [sp, #20]
 800d38e:	2300      	movge	r3, #0
 800d390:	6033      	strge	r3, [r6, #0]
 800d392:	9f05      	ldr	r7, [sp, #20]
 800d394:	4b9a      	ldr	r3, [pc, #616]	@ (800d600 <_dtoa_r+0x2d8>)
 800d396:	bfbc      	itt	lt
 800d398:	2201      	movlt	r2, #1
 800d39a:	6032      	strlt	r2, [r6, #0]
 800d39c:	43bb      	bics	r3, r7
 800d39e:	d112      	bne.n	800d3c6 <_dtoa_r+0x9e>
 800d3a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d3a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d3a6:	6013      	str	r3, [r2, #0]
 800d3a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d3ac:	4323      	orrs	r3, r4
 800d3ae:	f000 855a 	beq.w	800de66 <_dtoa_r+0xb3e>
 800d3b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d3b4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d614 <_dtoa_r+0x2ec>
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f000 855c 	beq.w	800de76 <_dtoa_r+0xb4e>
 800d3be:	f10a 0303 	add.w	r3, sl, #3
 800d3c2:	f000 bd56 	b.w	800de72 <_dtoa_r+0xb4a>
 800d3c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	ec51 0b17 	vmov	r0, r1, d7
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d3d6:	f7f3 fb77 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3da:	4680      	mov	r8, r0
 800d3dc:	b158      	cbz	r0, 800d3f6 <_dtoa_r+0xce>
 800d3de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	6013      	str	r3, [r2, #0]
 800d3e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d3e6:	b113      	cbz	r3, 800d3ee <_dtoa_r+0xc6>
 800d3e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d3ea:	4b86      	ldr	r3, [pc, #536]	@ (800d604 <_dtoa_r+0x2dc>)
 800d3ec:	6013      	str	r3, [r2, #0]
 800d3ee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d618 <_dtoa_r+0x2f0>
 800d3f2:	f000 bd40 	b.w	800de76 <_dtoa_r+0xb4e>
 800d3f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d3fa:	aa14      	add	r2, sp, #80	@ 0x50
 800d3fc:	a915      	add	r1, sp, #84	@ 0x54
 800d3fe:	4648      	mov	r0, r9
 800d400:	f001 f984 	bl	800e70c <__d2b>
 800d404:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d408:	9002      	str	r0, [sp, #8]
 800d40a:	2e00      	cmp	r6, #0
 800d40c:	d078      	beq.n	800d500 <_dtoa_r+0x1d8>
 800d40e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d410:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d418:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d41c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d420:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d424:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d428:	4619      	mov	r1, r3
 800d42a:	2200      	movs	r2, #0
 800d42c:	4b76      	ldr	r3, [pc, #472]	@ (800d608 <_dtoa_r+0x2e0>)
 800d42e:	f7f2 ff2b 	bl	8000288 <__aeabi_dsub>
 800d432:	a36b      	add	r3, pc, #428	@ (adr r3, 800d5e0 <_dtoa_r+0x2b8>)
 800d434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d438:	f7f3 f8de 	bl	80005f8 <__aeabi_dmul>
 800d43c:	a36a      	add	r3, pc, #424	@ (adr r3, 800d5e8 <_dtoa_r+0x2c0>)
 800d43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d442:	f7f2 ff23 	bl	800028c <__adddf3>
 800d446:	4604      	mov	r4, r0
 800d448:	4630      	mov	r0, r6
 800d44a:	460d      	mov	r5, r1
 800d44c:	f7f3 f86a 	bl	8000524 <__aeabi_i2d>
 800d450:	a367      	add	r3, pc, #412	@ (adr r3, 800d5f0 <_dtoa_r+0x2c8>)
 800d452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d456:	f7f3 f8cf 	bl	80005f8 <__aeabi_dmul>
 800d45a:	4602      	mov	r2, r0
 800d45c:	460b      	mov	r3, r1
 800d45e:	4620      	mov	r0, r4
 800d460:	4629      	mov	r1, r5
 800d462:	f7f2 ff13 	bl	800028c <__adddf3>
 800d466:	4604      	mov	r4, r0
 800d468:	460d      	mov	r5, r1
 800d46a:	f7f3 fb75 	bl	8000b58 <__aeabi_d2iz>
 800d46e:	2200      	movs	r2, #0
 800d470:	4607      	mov	r7, r0
 800d472:	2300      	movs	r3, #0
 800d474:	4620      	mov	r0, r4
 800d476:	4629      	mov	r1, r5
 800d478:	f7f3 fb30 	bl	8000adc <__aeabi_dcmplt>
 800d47c:	b140      	cbz	r0, 800d490 <_dtoa_r+0x168>
 800d47e:	4638      	mov	r0, r7
 800d480:	f7f3 f850 	bl	8000524 <__aeabi_i2d>
 800d484:	4622      	mov	r2, r4
 800d486:	462b      	mov	r3, r5
 800d488:	f7f3 fb1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d48c:	b900      	cbnz	r0, 800d490 <_dtoa_r+0x168>
 800d48e:	3f01      	subs	r7, #1
 800d490:	2f16      	cmp	r7, #22
 800d492:	d852      	bhi.n	800d53a <_dtoa_r+0x212>
 800d494:	4b5d      	ldr	r3, [pc, #372]	@ (800d60c <_dtoa_r+0x2e4>)
 800d496:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d4a2:	f7f3 fb1b 	bl	8000adc <__aeabi_dcmplt>
 800d4a6:	2800      	cmp	r0, #0
 800d4a8:	d049      	beq.n	800d53e <_dtoa_r+0x216>
 800d4aa:	3f01      	subs	r7, #1
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800d4b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d4b2:	1b9b      	subs	r3, r3, r6
 800d4b4:	1e5a      	subs	r2, r3, #1
 800d4b6:	bf45      	ittet	mi
 800d4b8:	f1c3 0301 	rsbmi	r3, r3, #1
 800d4bc:	9300      	strmi	r3, [sp, #0]
 800d4be:	2300      	movpl	r3, #0
 800d4c0:	2300      	movmi	r3, #0
 800d4c2:	9206      	str	r2, [sp, #24]
 800d4c4:	bf54      	ite	pl
 800d4c6:	9300      	strpl	r3, [sp, #0]
 800d4c8:	9306      	strmi	r3, [sp, #24]
 800d4ca:	2f00      	cmp	r7, #0
 800d4cc:	db39      	blt.n	800d542 <_dtoa_r+0x21a>
 800d4ce:	9b06      	ldr	r3, [sp, #24]
 800d4d0:	970d      	str	r7, [sp, #52]	@ 0x34
 800d4d2:	443b      	add	r3, r7
 800d4d4:	9306      	str	r3, [sp, #24]
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	9308      	str	r3, [sp, #32]
 800d4da:	9b07      	ldr	r3, [sp, #28]
 800d4dc:	2b09      	cmp	r3, #9
 800d4de:	d863      	bhi.n	800d5a8 <_dtoa_r+0x280>
 800d4e0:	2b05      	cmp	r3, #5
 800d4e2:	bfc4      	itt	gt
 800d4e4:	3b04      	subgt	r3, #4
 800d4e6:	9307      	strgt	r3, [sp, #28]
 800d4e8:	9b07      	ldr	r3, [sp, #28]
 800d4ea:	f1a3 0302 	sub.w	r3, r3, #2
 800d4ee:	bfcc      	ite	gt
 800d4f0:	2400      	movgt	r4, #0
 800d4f2:	2401      	movle	r4, #1
 800d4f4:	2b03      	cmp	r3, #3
 800d4f6:	d863      	bhi.n	800d5c0 <_dtoa_r+0x298>
 800d4f8:	e8df f003 	tbb	[pc, r3]
 800d4fc:	2b375452 	.word	0x2b375452
 800d500:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d504:	441e      	add	r6, r3
 800d506:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d50a:	2b20      	cmp	r3, #32
 800d50c:	bfc1      	itttt	gt
 800d50e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d512:	409f      	lslgt	r7, r3
 800d514:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d518:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d51c:	bfd6      	itet	le
 800d51e:	f1c3 0320 	rsble	r3, r3, #32
 800d522:	ea47 0003 	orrgt.w	r0, r7, r3
 800d526:	fa04 f003 	lslle.w	r0, r4, r3
 800d52a:	f7f2 ffeb 	bl	8000504 <__aeabi_ui2d>
 800d52e:	2201      	movs	r2, #1
 800d530:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d534:	3e01      	subs	r6, #1
 800d536:	9212      	str	r2, [sp, #72]	@ 0x48
 800d538:	e776      	b.n	800d428 <_dtoa_r+0x100>
 800d53a:	2301      	movs	r3, #1
 800d53c:	e7b7      	b.n	800d4ae <_dtoa_r+0x186>
 800d53e:	9010      	str	r0, [sp, #64]	@ 0x40
 800d540:	e7b6      	b.n	800d4b0 <_dtoa_r+0x188>
 800d542:	9b00      	ldr	r3, [sp, #0]
 800d544:	1bdb      	subs	r3, r3, r7
 800d546:	9300      	str	r3, [sp, #0]
 800d548:	427b      	negs	r3, r7
 800d54a:	9308      	str	r3, [sp, #32]
 800d54c:	2300      	movs	r3, #0
 800d54e:	930d      	str	r3, [sp, #52]	@ 0x34
 800d550:	e7c3      	b.n	800d4da <_dtoa_r+0x1b2>
 800d552:	2301      	movs	r3, #1
 800d554:	9309      	str	r3, [sp, #36]	@ 0x24
 800d556:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d558:	eb07 0b03 	add.w	fp, r7, r3
 800d55c:	f10b 0301 	add.w	r3, fp, #1
 800d560:	2b01      	cmp	r3, #1
 800d562:	9303      	str	r3, [sp, #12]
 800d564:	bfb8      	it	lt
 800d566:	2301      	movlt	r3, #1
 800d568:	e006      	b.n	800d578 <_dtoa_r+0x250>
 800d56a:	2301      	movs	r3, #1
 800d56c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d56e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d570:	2b00      	cmp	r3, #0
 800d572:	dd28      	ble.n	800d5c6 <_dtoa_r+0x29e>
 800d574:	469b      	mov	fp, r3
 800d576:	9303      	str	r3, [sp, #12]
 800d578:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d57c:	2100      	movs	r1, #0
 800d57e:	2204      	movs	r2, #4
 800d580:	f102 0514 	add.w	r5, r2, #20
 800d584:	429d      	cmp	r5, r3
 800d586:	d926      	bls.n	800d5d6 <_dtoa_r+0x2ae>
 800d588:	6041      	str	r1, [r0, #4]
 800d58a:	4648      	mov	r0, r9
 800d58c:	f000 fd9c 	bl	800e0c8 <_Balloc>
 800d590:	4682      	mov	sl, r0
 800d592:	2800      	cmp	r0, #0
 800d594:	d142      	bne.n	800d61c <_dtoa_r+0x2f4>
 800d596:	4b1e      	ldr	r3, [pc, #120]	@ (800d610 <_dtoa_r+0x2e8>)
 800d598:	4602      	mov	r2, r0
 800d59a:	f240 11af 	movw	r1, #431	@ 0x1af
 800d59e:	e6da      	b.n	800d356 <_dtoa_r+0x2e>
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	e7e3      	b.n	800d56c <_dtoa_r+0x244>
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	e7d5      	b.n	800d554 <_dtoa_r+0x22c>
 800d5a8:	2401      	movs	r4, #1
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	9307      	str	r3, [sp, #28]
 800d5ae:	9409      	str	r4, [sp, #36]	@ 0x24
 800d5b0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	f8cd b00c 	str.w	fp, [sp, #12]
 800d5ba:	2312      	movs	r3, #18
 800d5bc:	920c      	str	r2, [sp, #48]	@ 0x30
 800d5be:	e7db      	b.n	800d578 <_dtoa_r+0x250>
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5c4:	e7f4      	b.n	800d5b0 <_dtoa_r+0x288>
 800d5c6:	f04f 0b01 	mov.w	fp, #1
 800d5ca:	f8cd b00c 	str.w	fp, [sp, #12]
 800d5ce:	465b      	mov	r3, fp
 800d5d0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d5d4:	e7d0      	b.n	800d578 <_dtoa_r+0x250>
 800d5d6:	3101      	adds	r1, #1
 800d5d8:	0052      	lsls	r2, r2, #1
 800d5da:	e7d1      	b.n	800d580 <_dtoa_r+0x258>
 800d5dc:	f3af 8000 	nop.w
 800d5e0:	636f4361 	.word	0x636f4361
 800d5e4:	3fd287a7 	.word	0x3fd287a7
 800d5e8:	8b60c8b3 	.word	0x8b60c8b3
 800d5ec:	3fc68a28 	.word	0x3fc68a28
 800d5f0:	509f79fb 	.word	0x509f79fb
 800d5f4:	3fd34413 	.word	0x3fd34413
 800d5f8:	0800f3b1 	.word	0x0800f3b1
 800d5fc:	0800f3c8 	.word	0x0800f3c8
 800d600:	7ff00000 	.word	0x7ff00000
 800d604:	0800f381 	.word	0x0800f381
 800d608:	3ff80000 	.word	0x3ff80000
 800d60c:	0800f518 	.word	0x0800f518
 800d610:	0800f420 	.word	0x0800f420
 800d614:	0800f3ad 	.word	0x0800f3ad
 800d618:	0800f380 	.word	0x0800f380
 800d61c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d620:	6018      	str	r0, [r3, #0]
 800d622:	9b03      	ldr	r3, [sp, #12]
 800d624:	2b0e      	cmp	r3, #14
 800d626:	f200 80a1 	bhi.w	800d76c <_dtoa_r+0x444>
 800d62a:	2c00      	cmp	r4, #0
 800d62c:	f000 809e 	beq.w	800d76c <_dtoa_r+0x444>
 800d630:	2f00      	cmp	r7, #0
 800d632:	dd33      	ble.n	800d69c <_dtoa_r+0x374>
 800d634:	4b9c      	ldr	r3, [pc, #624]	@ (800d8a8 <_dtoa_r+0x580>)
 800d636:	f007 020f 	and.w	r2, r7, #15
 800d63a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d63e:	ed93 7b00 	vldr	d7, [r3]
 800d642:	05f8      	lsls	r0, r7, #23
 800d644:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d648:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d64c:	d516      	bpl.n	800d67c <_dtoa_r+0x354>
 800d64e:	4b97      	ldr	r3, [pc, #604]	@ (800d8ac <_dtoa_r+0x584>)
 800d650:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d654:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d658:	f7f3 f8f8 	bl	800084c <__aeabi_ddiv>
 800d65c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d660:	f004 040f 	and.w	r4, r4, #15
 800d664:	2603      	movs	r6, #3
 800d666:	4d91      	ldr	r5, [pc, #580]	@ (800d8ac <_dtoa_r+0x584>)
 800d668:	b954      	cbnz	r4, 800d680 <_dtoa_r+0x358>
 800d66a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d66e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d672:	f7f3 f8eb 	bl	800084c <__aeabi_ddiv>
 800d676:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d67a:	e028      	b.n	800d6ce <_dtoa_r+0x3a6>
 800d67c:	2602      	movs	r6, #2
 800d67e:	e7f2      	b.n	800d666 <_dtoa_r+0x33e>
 800d680:	07e1      	lsls	r1, r4, #31
 800d682:	d508      	bpl.n	800d696 <_dtoa_r+0x36e>
 800d684:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d688:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d68c:	f7f2 ffb4 	bl	80005f8 <__aeabi_dmul>
 800d690:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d694:	3601      	adds	r6, #1
 800d696:	1064      	asrs	r4, r4, #1
 800d698:	3508      	adds	r5, #8
 800d69a:	e7e5      	b.n	800d668 <_dtoa_r+0x340>
 800d69c:	f000 80af 	beq.w	800d7fe <_dtoa_r+0x4d6>
 800d6a0:	427c      	negs	r4, r7
 800d6a2:	4b81      	ldr	r3, [pc, #516]	@ (800d8a8 <_dtoa_r+0x580>)
 800d6a4:	4d81      	ldr	r5, [pc, #516]	@ (800d8ac <_dtoa_r+0x584>)
 800d6a6:	f004 020f 	and.w	r2, r4, #15
 800d6aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d6b6:	f7f2 ff9f 	bl	80005f8 <__aeabi_dmul>
 800d6ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d6be:	1124      	asrs	r4, r4, #4
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	2602      	movs	r6, #2
 800d6c4:	2c00      	cmp	r4, #0
 800d6c6:	f040 808f 	bne.w	800d7e8 <_dtoa_r+0x4c0>
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d1d3      	bne.n	800d676 <_dtoa_r+0x34e>
 800d6ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d6d0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f000 8094 	beq.w	800d802 <_dtoa_r+0x4da>
 800d6da:	4b75      	ldr	r3, [pc, #468]	@ (800d8b0 <_dtoa_r+0x588>)
 800d6dc:	2200      	movs	r2, #0
 800d6de:	4620      	mov	r0, r4
 800d6e0:	4629      	mov	r1, r5
 800d6e2:	f7f3 f9fb 	bl	8000adc <__aeabi_dcmplt>
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	f000 808b 	beq.w	800d802 <_dtoa_r+0x4da>
 800d6ec:	9b03      	ldr	r3, [sp, #12]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	f000 8087 	beq.w	800d802 <_dtoa_r+0x4da>
 800d6f4:	f1bb 0f00 	cmp.w	fp, #0
 800d6f8:	dd34      	ble.n	800d764 <_dtoa_r+0x43c>
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	4b6d      	ldr	r3, [pc, #436]	@ (800d8b4 <_dtoa_r+0x58c>)
 800d6fe:	2200      	movs	r2, #0
 800d700:	4629      	mov	r1, r5
 800d702:	f7f2 ff79 	bl	80005f8 <__aeabi_dmul>
 800d706:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d70a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800d70e:	3601      	adds	r6, #1
 800d710:	465c      	mov	r4, fp
 800d712:	4630      	mov	r0, r6
 800d714:	f7f2 ff06 	bl	8000524 <__aeabi_i2d>
 800d718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d71c:	f7f2 ff6c 	bl	80005f8 <__aeabi_dmul>
 800d720:	4b65      	ldr	r3, [pc, #404]	@ (800d8b8 <_dtoa_r+0x590>)
 800d722:	2200      	movs	r2, #0
 800d724:	f7f2 fdb2 	bl	800028c <__adddf3>
 800d728:	4605      	mov	r5, r0
 800d72a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d72e:	2c00      	cmp	r4, #0
 800d730:	d16a      	bne.n	800d808 <_dtoa_r+0x4e0>
 800d732:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d736:	4b61      	ldr	r3, [pc, #388]	@ (800d8bc <_dtoa_r+0x594>)
 800d738:	2200      	movs	r2, #0
 800d73a:	f7f2 fda5 	bl	8000288 <__aeabi_dsub>
 800d73e:	4602      	mov	r2, r0
 800d740:	460b      	mov	r3, r1
 800d742:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d746:	462a      	mov	r2, r5
 800d748:	4633      	mov	r3, r6
 800d74a:	f7f3 f9e5 	bl	8000b18 <__aeabi_dcmpgt>
 800d74e:	2800      	cmp	r0, #0
 800d750:	f040 8298 	bne.w	800dc84 <_dtoa_r+0x95c>
 800d754:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d758:	462a      	mov	r2, r5
 800d75a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d75e:	f7f3 f9bd 	bl	8000adc <__aeabi_dcmplt>
 800d762:	bb38      	cbnz	r0, 800d7b4 <_dtoa_r+0x48c>
 800d764:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d768:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d76c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f2c0 8157 	blt.w	800da22 <_dtoa_r+0x6fa>
 800d774:	2f0e      	cmp	r7, #14
 800d776:	f300 8154 	bgt.w	800da22 <_dtoa_r+0x6fa>
 800d77a:	4b4b      	ldr	r3, [pc, #300]	@ (800d8a8 <_dtoa_r+0x580>)
 800d77c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d780:	ed93 7b00 	vldr	d7, [r3]
 800d784:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d786:	2b00      	cmp	r3, #0
 800d788:	ed8d 7b00 	vstr	d7, [sp]
 800d78c:	f280 80e5 	bge.w	800d95a <_dtoa_r+0x632>
 800d790:	9b03      	ldr	r3, [sp, #12]
 800d792:	2b00      	cmp	r3, #0
 800d794:	f300 80e1 	bgt.w	800d95a <_dtoa_r+0x632>
 800d798:	d10c      	bne.n	800d7b4 <_dtoa_r+0x48c>
 800d79a:	4b48      	ldr	r3, [pc, #288]	@ (800d8bc <_dtoa_r+0x594>)
 800d79c:	2200      	movs	r2, #0
 800d79e:	ec51 0b17 	vmov	r0, r1, d7
 800d7a2:	f7f2 ff29 	bl	80005f8 <__aeabi_dmul>
 800d7a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7aa:	f7f3 f9ab 	bl	8000b04 <__aeabi_dcmpge>
 800d7ae:	2800      	cmp	r0, #0
 800d7b0:	f000 8266 	beq.w	800dc80 <_dtoa_r+0x958>
 800d7b4:	2400      	movs	r4, #0
 800d7b6:	4625      	mov	r5, r4
 800d7b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d7ba:	4656      	mov	r6, sl
 800d7bc:	ea6f 0803 	mvn.w	r8, r3
 800d7c0:	2700      	movs	r7, #0
 800d7c2:	4621      	mov	r1, r4
 800d7c4:	4648      	mov	r0, r9
 800d7c6:	f000 fcbf 	bl	800e148 <_Bfree>
 800d7ca:	2d00      	cmp	r5, #0
 800d7cc:	f000 80bd 	beq.w	800d94a <_dtoa_r+0x622>
 800d7d0:	b12f      	cbz	r7, 800d7de <_dtoa_r+0x4b6>
 800d7d2:	42af      	cmp	r7, r5
 800d7d4:	d003      	beq.n	800d7de <_dtoa_r+0x4b6>
 800d7d6:	4639      	mov	r1, r7
 800d7d8:	4648      	mov	r0, r9
 800d7da:	f000 fcb5 	bl	800e148 <_Bfree>
 800d7de:	4629      	mov	r1, r5
 800d7e0:	4648      	mov	r0, r9
 800d7e2:	f000 fcb1 	bl	800e148 <_Bfree>
 800d7e6:	e0b0      	b.n	800d94a <_dtoa_r+0x622>
 800d7e8:	07e2      	lsls	r2, r4, #31
 800d7ea:	d505      	bpl.n	800d7f8 <_dtoa_r+0x4d0>
 800d7ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d7f0:	f7f2 ff02 	bl	80005f8 <__aeabi_dmul>
 800d7f4:	3601      	adds	r6, #1
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	1064      	asrs	r4, r4, #1
 800d7fa:	3508      	adds	r5, #8
 800d7fc:	e762      	b.n	800d6c4 <_dtoa_r+0x39c>
 800d7fe:	2602      	movs	r6, #2
 800d800:	e765      	b.n	800d6ce <_dtoa_r+0x3a6>
 800d802:	9c03      	ldr	r4, [sp, #12]
 800d804:	46b8      	mov	r8, r7
 800d806:	e784      	b.n	800d712 <_dtoa_r+0x3ea>
 800d808:	4b27      	ldr	r3, [pc, #156]	@ (800d8a8 <_dtoa_r+0x580>)
 800d80a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d80c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d810:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d814:	4454      	add	r4, sl
 800d816:	2900      	cmp	r1, #0
 800d818:	d054      	beq.n	800d8c4 <_dtoa_r+0x59c>
 800d81a:	4929      	ldr	r1, [pc, #164]	@ (800d8c0 <_dtoa_r+0x598>)
 800d81c:	2000      	movs	r0, #0
 800d81e:	f7f3 f815 	bl	800084c <__aeabi_ddiv>
 800d822:	4633      	mov	r3, r6
 800d824:	462a      	mov	r2, r5
 800d826:	f7f2 fd2f 	bl	8000288 <__aeabi_dsub>
 800d82a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d82e:	4656      	mov	r6, sl
 800d830:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d834:	f7f3 f990 	bl	8000b58 <__aeabi_d2iz>
 800d838:	4605      	mov	r5, r0
 800d83a:	f7f2 fe73 	bl	8000524 <__aeabi_i2d>
 800d83e:	4602      	mov	r2, r0
 800d840:	460b      	mov	r3, r1
 800d842:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d846:	f7f2 fd1f 	bl	8000288 <__aeabi_dsub>
 800d84a:	3530      	adds	r5, #48	@ 0x30
 800d84c:	4602      	mov	r2, r0
 800d84e:	460b      	mov	r3, r1
 800d850:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d854:	f806 5b01 	strb.w	r5, [r6], #1
 800d858:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d85c:	f7f3 f93e 	bl	8000adc <__aeabi_dcmplt>
 800d860:	2800      	cmp	r0, #0
 800d862:	d172      	bne.n	800d94a <_dtoa_r+0x622>
 800d864:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d868:	4911      	ldr	r1, [pc, #68]	@ (800d8b0 <_dtoa_r+0x588>)
 800d86a:	2000      	movs	r0, #0
 800d86c:	f7f2 fd0c 	bl	8000288 <__aeabi_dsub>
 800d870:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d874:	f7f3 f932 	bl	8000adc <__aeabi_dcmplt>
 800d878:	2800      	cmp	r0, #0
 800d87a:	f040 80b4 	bne.w	800d9e6 <_dtoa_r+0x6be>
 800d87e:	42a6      	cmp	r6, r4
 800d880:	f43f af70 	beq.w	800d764 <_dtoa_r+0x43c>
 800d884:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d888:	4b0a      	ldr	r3, [pc, #40]	@ (800d8b4 <_dtoa_r+0x58c>)
 800d88a:	2200      	movs	r2, #0
 800d88c:	f7f2 feb4 	bl	80005f8 <__aeabi_dmul>
 800d890:	4b08      	ldr	r3, [pc, #32]	@ (800d8b4 <_dtoa_r+0x58c>)
 800d892:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d896:	2200      	movs	r2, #0
 800d898:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d89c:	f7f2 feac 	bl	80005f8 <__aeabi_dmul>
 800d8a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8a4:	e7c4      	b.n	800d830 <_dtoa_r+0x508>
 800d8a6:	bf00      	nop
 800d8a8:	0800f518 	.word	0x0800f518
 800d8ac:	0800f4f0 	.word	0x0800f4f0
 800d8b0:	3ff00000 	.word	0x3ff00000
 800d8b4:	40240000 	.word	0x40240000
 800d8b8:	401c0000 	.word	0x401c0000
 800d8bc:	40140000 	.word	0x40140000
 800d8c0:	3fe00000 	.word	0x3fe00000
 800d8c4:	4631      	mov	r1, r6
 800d8c6:	4628      	mov	r0, r5
 800d8c8:	f7f2 fe96 	bl	80005f8 <__aeabi_dmul>
 800d8cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d8d0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d8d2:	4656      	mov	r6, sl
 800d8d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8d8:	f7f3 f93e 	bl	8000b58 <__aeabi_d2iz>
 800d8dc:	4605      	mov	r5, r0
 800d8de:	f7f2 fe21 	bl	8000524 <__aeabi_i2d>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8ea:	f7f2 fccd 	bl	8000288 <__aeabi_dsub>
 800d8ee:	3530      	adds	r5, #48	@ 0x30
 800d8f0:	f806 5b01 	strb.w	r5, [r6], #1
 800d8f4:	4602      	mov	r2, r0
 800d8f6:	460b      	mov	r3, r1
 800d8f8:	42a6      	cmp	r6, r4
 800d8fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d8fe:	f04f 0200 	mov.w	r2, #0
 800d902:	d124      	bne.n	800d94e <_dtoa_r+0x626>
 800d904:	4baf      	ldr	r3, [pc, #700]	@ (800dbc4 <_dtoa_r+0x89c>)
 800d906:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d90a:	f7f2 fcbf 	bl	800028c <__adddf3>
 800d90e:	4602      	mov	r2, r0
 800d910:	460b      	mov	r3, r1
 800d912:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d916:	f7f3 f8ff 	bl	8000b18 <__aeabi_dcmpgt>
 800d91a:	2800      	cmp	r0, #0
 800d91c:	d163      	bne.n	800d9e6 <_dtoa_r+0x6be>
 800d91e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d922:	49a8      	ldr	r1, [pc, #672]	@ (800dbc4 <_dtoa_r+0x89c>)
 800d924:	2000      	movs	r0, #0
 800d926:	f7f2 fcaf 	bl	8000288 <__aeabi_dsub>
 800d92a:	4602      	mov	r2, r0
 800d92c:	460b      	mov	r3, r1
 800d92e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d932:	f7f3 f8d3 	bl	8000adc <__aeabi_dcmplt>
 800d936:	2800      	cmp	r0, #0
 800d938:	f43f af14 	beq.w	800d764 <_dtoa_r+0x43c>
 800d93c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d93e:	1e73      	subs	r3, r6, #1
 800d940:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d942:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d946:	2b30      	cmp	r3, #48	@ 0x30
 800d948:	d0f8      	beq.n	800d93c <_dtoa_r+0x614>
 800d94a:	4647      	mov	r7, r8
 800d94c:	e03b      	b.n	800d9c6 <_dtoa_r+0x69e>
 800d94e:	4b9e      	ldr	r3, [pc, #632]	@ (800dbc8 <_dtoa_r+0x8a0>)
 800d950:	f7f2 fe52 	bl	80005f8 <__aeabi_dmul>
 800d954:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d958:	e7bc      	b.n	800d8d4 <_dtoa_r+0x5ac>
 800d95a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d95e:	4656      	mov	r6, sl
 800d960:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d964:	4620      	mov	r0, r4
 800d966:	4629      	mov	r1, r5
 800d968:	f7f2 ff70 	bl	800084c <__aeabi_ddiv>
 800d96c:	f7f3 f8f4 	bl	8000b58 <__aeabi_d2iz>
 800d970:	4680      	mov	r8, r0
 800d972:	f7f2 fdd7 	bl	8000524 <__aeabi_i2d>
 800d976:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d97a:	f7f2 fe3d 	bl	80005f8 <__aeabi_dmul>
 800d97e:	4602      	mov	r2, r0
 800d980:	460b      	mov	r3, r1
 800d982:	4620      	mov	r0, r4
 800d984:	4629      	mov	r1, r5
 800d986:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d98a:	f7f2 fc7d 	bl	8000288 <__aeabi_dsub>
 800d98e:	f806 4b01 	strb.w	r4, [r6], #1
 800d992:	9d03      	ldr	r5, [sp, #12]
 800d994:	eba6 040a 	sub.w	r4, r6, sl
 800d998:	42a5      	cmp	r5, r4
 800d99a:	4602      	mov	r2, r0
 800d99c:	460b      	mov	r3, r1
 800d99e:	d133      	bne.n	800da08 <_dtoa_r+0x6e0>
 800d9a0:	f7f2 fc74 	bl	800028c <__adddf3>
 800d9a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9a8:	4604      	mov	r4, r0
 800d9aa:	460d      	mov	r5, r1
 800d9ac:	f7f3 f8b4 	bl	8000b18 <__aeabi_dcmpgt>
 800d9b0:	b9c0      	cbnz	r0, 800d9e4 <_dtoa_r+0x6bc>
 800d9b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	4629      	mov	r1, r5
 800d9ba:	f7f3 f885 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9be:	b110      	cbz	r0, 800d9c6 <_dtoa_r+0x69e>
 800d9c0:	f018 0f01 	tst.w	r8, #1
 800d9c4:	d10e      	bne.n	800d9e4 <_dtoa_r+0x6bc>
 800d9c6:	9902      	ldr	r1, [sp, #8]
 800d9c8:	4648      	mov	r0, r9
 800d9ca:	f000 fbbd 	bl	800e148 <_Bfree>
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	7033      	strb	r3, [r6, #0]
 800d9d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d9d4:	3701      	adds	r7, #1
 800d9d6:	601f      	str	r7, [r3, #0]
 800d9d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	f000 824b 	beq.w	800de76 <_dtoa_r+0xb4e>
 800d9e0:	601e      	str	r6, [r3, #0]
 800d9e2:	e248      	b.n	800de76 <_dtoa_r+0xb4e>
 800d9e4:	46b8      	mov	r8, r7
 800d9e6:	4633      	mov	r3, r6
 800d9e8:	461e      	mov	r6, r3
 800d9ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d9ee:	2a39      	cmp	r2, #57	@ 0x39
 800d9f0:	d106      	bne.n	800da00 <_dtoa_r+0x6d8>
 800d9f2:	459a      	cmp	sl, r3
 800d9f4:	d1f8      	bne.n	800d9e8 <_dtoa_r+0x6c0>
 800d9f6:	2230      	movs	r2, #48	@ 0x30
 800d9f8:	f108 0801 	add.w	r8, r8, #1
 800d9fc:	f88a 2000 	strb.w	r2, [sl]
 800da00:	781a      	ldrb	r2, [r3, #0]
 800da02:	3201      	adds	r2, #1
 800da04:	701a      	strb	r2, [r3, #0]
 800da06:	e7a0      	b.n	800d94a <_dtoa_r+0x622>
 800da08:	4b6f      	ldr	r3, [pc, #444]	@ (800dbc8 <_dtoa_r+0x8a0>)
 800da0a:	2200      	movs	r2, #0
 800da0c:	f7f2 fdf4 	bl	80005f8 <__aeabi_dmul>
 800da10:	2200      	movs	r2, #0
 800da12:	2300      	movs	r3, #0
 800da14:	4604      	mov	r4, r0
 800da16:	460d      	mov	r5, r1
 800da18:	f7f3 f856 	bl	8000ac8 <__aeabi_dcmpeq>
 800da1c:	2800      	cmp	r0, #0
 800da1e:	d09f      	beq.n	800d960 <_dtoa_r+0x638>
 800da20:	e7d1      	b.n	800d9c6 <_dtoa_r+0x69e>
 800da22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da24:	2a00      	cmp	r2, #0
 800da26:	f000 80ea 	beq.w	800dbfe <_dtoa_r+0x8d6>
 800da2a:	9a07      	ldr	r2, [sp, #28]
 800da2c:	2a01      	cmp	r2, #1
 800da2e:	f300 80cd 	bgt.w	800dbcc <_dtoa_r+0x8a4>
 800da32:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800da34:	2a00      	cmp	r2, #0
 800da36:	f000 80c1 	beq.w	800dbbc <_dtoa_r+0x894>
 800da3a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800da3e:	9c08      	ldr	r4, [sp, #32]
 800da40:	9e00      	ldr	r6, [sp, #0]
 800da42:	9a00      	ldr	r2, [sp, #0]
 800da44:	441a      	add	r2, r3
 800da46:	9200      	str	r2, [sp, #0]
 800da48:	9a06      	ldr	r2, [sp, #24]
 800da4a:	2101      	movs	r1, #1
 800da4c:	441a      	add	r2, r3
 800da4e:	4648      	mov	r0, r9
 800da50:	9206      	str	r2, [sp, #24]
 800da52:	f000 fc2d 	bl	800e2b0 <__i2b>
 800da56:	4605      	mov	r5, r0
 800da58:	b166      	cbz	r6, 800da74 <_dtoa_r+0x74c>
 800da5a:	9b06      	ldr	r3, [sp, #24]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	dd09      	ble.n	800da74 <_dtoa_r+0x74c>
 800da60:	42b3      	cmp	r3, r6
 800da62:	9a00      	ldr	r2, [sp, #0]
 800da64:	bfa8      	it	ge
 800da66:	4633      	movge	r3, r6
 800da68:	1ad2      	subs	r2, r2, r3
 800da6a:	9200      	str	r2, [sp, #0]
 800da6c:	9a06      	ldr	r2, [sp, #24]
 800da6e:	1af6      	subs	r6, r6, r3
 800da70:	1ad3      	subs	r3, r2, r3
 800da72:	9306      	str	r3, [sp, #24]
 800da74:	9b08      	ldr	r3, [sp, #32]
 800da76:	b30b      	cbz	r3, 800dabc <_dtoa_r+0x794>
 800da78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	f000 80c6 	beq.w	800dc0c <_dtoa_r+0x8e4>
 800da80:	2c00      	cmp	r4, #0
 800da82:	f000 80c0 	beq.w	800dc06 <_dtoa_r+0x8de>
 800da86:	4629      	mov	r1, r5
 800da88:	4622      	mov	r2, r4
 800da8a:	4648      	mov	r0, r9
 800da8c:	f000 fcc8 	bl	800e420 <__pow5mult>
 800da90:	9a02      	ldr	r2, [sp, #8]
 800da92:	4601      	mov	r1, r0
 800da94:	4605      	mov	r5, r0
 800da96:	4648      	mov	r0, r9
 800da98:	f000 fc20 	bl	800e2dc <__multiply>
 800da9c:	9902      	ldr	r1, [sp, #8]
 800da9e:	4680      	mov	r8, r0
 800daa0:	4648      	mov	r0, r9
 800daa2:	f000 fb51 	bl	800e148 <_Bfree>
 800daa6:	9b08      	ldr	r3, [sp, #32]
 800daa8:	1b1b      	subs	r3, r3, r4
 800daaa:	9308      	str	r3, [sp, #32]
 800daac:	f000 80b1 	beq.w	800dc12 <_dtoa_r+0x8ea>
 800dab0:	9a08      	ldr	r2, [sp, #32]
 800dab2:	4641      	mov	r1, r8
 800dab4:	4648      	mov	r0, r9
 800dab6:	f000 fcb3 	bl	800e420 <__pow5mult>
 800daba:	9002      	str	r0, [sp, #8]
 800dabc:	2101      	movs	r1, #1
 800dabe:	4648      	mov	r0, r9
 800dac0:	f000 fbf6 	bl	800e2b0 <__i2b>
 800dac4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dac6:	4604      	mov	r4, r0
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f000 81d8 	beq.w	800de7e <_dtoa_r+0xb56>
 800dace:	461a      	mov	r2, r3
 800dad0:	4601      	mov	r1, r0
 800dad2:	4648      	mov	r0, r9
 800dad4:	f000 fca4 	bl	800e420 <__pow5mult>
 800dad8:	9b07      	ldr	r3, [sp, #28]
 800dada:	2b01      	cmp	r3, #1
 800dadc:	4604      	mov	r4, r0
 800dade:	f300 809f 	bgt.w	800dc20 <_dtoa_r+0x8f8>
 800dae2:	9b04      	ldr	r3, [sp, #16]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	f040 8097 	bne.w	800dc18 <_dtoa_r+0x8f0>
 800daea:	9b05      	ldr	r3, [sp, #20]
 800daec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	f040 8093 	bne.w	800dc1c <_dtoa_r+0x8f4>
 800daf6:	9b05      	ldr	r3, [sp, #20]
 800daf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dafc:	0d1b      	lsrs	r3, r3, #20
 800dafe:	051b      	lsls	r3, r3, #20
 800db00:	b133      	cbz	r3, 800db10 <_dtoa_r+0x7e8>
 800db02:	9b00      	ldr	r3, [sp, #0]
 800db04:	3301      	adds	r3, #1
 800db06:	9300      	str	r3, [sp, #0]
 800db08:	9b06      	ldr	r3, [sp, #24]
 800db0a:	3301      	adds	r3, #1
 800db0c:	9306      	str	r3, [sp, #24]
 800db0e:	2301      	movs	r3, #1
 800db10:	9308      	str	r3, [sp, #32]
 800db12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800db14:	2b00      	cmp	r3, #0
 800db16:	f000 81b8 	beq.w	800de8a <_dtoa_r+0xb62>
 800db1a:	6923      	ldr	r3, [r4, #16]
 800db1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800db20:	6918      	ldr	r0, [r3, #16]
 800db22:	f000 fb79 	bl	800e218 <__hi0bits>
 800db26:	f1c0 0020 	rsb	r0, r0, #32
 800db2a:	9b06      	ldr	r3, [sp, #24]
 800db2c:	4418      	add	r0, r3
 800db2e:	f010 001f 	ands.w	r0, r0, #31
 800db32:	f000 8082 	beq.w	800dc3a <_dtoa_r+0x912>
 800db36:	f1c0 0320 	rsb	r3, r0, #32
 800db3a:	2b04      	cmp	r3, #4
 800db3c:	dd73      	ble.n	800dc26 <_dtoa_r+0x8fe>
 800db3e:	9b00      	ldr	r3, [sp, #0]
 800db40:	f1c0 001c 	rsb	r0, r0, #28
 800db44:	4403      	add	r3, r0
 800db46:	9300      	str	r3, [sp, #0]
 800db48:	9b06      	ldr	r3, [sp, #24]
 800db4a:	4403      	add	r3, r0
 800db4c:	4406      	add	r6, r0
 800db4e:	9306      	str	r3, [sp, #24]
 800db50:	9b00      	ldr	r3, [sp, #0]
 800db52:	2b00      	cmp	r3, #0
 800db54:	dd05      	ble.n	800db62 <_dtoa_r+0x83a>
 800db56:	9902      	ldr	r1, [sp, #8]
 800db58:	461a      	mov	r2, r3
 800db5a:	4648      	mov	r0, r9
 800db5c:	f000 fcba 	bl	800e4d4 <__lshift>
 800db60:	9002      	str	r0, [sp, #8]
 800db62:	9b06      	ldr	r3, [sp, #24]
 800db64:	2b00      	cmp	r3, #0
 800db66:	dd05      	ble.n	800db74 <_dtoa_r+0x84c>
 800db68:	4621      	mov	r1, r4
 800db6a:	461a      	mov	r2, r3
 800db6c:	4648      	mov	r0, r9
 800db6e:	f000 fcb1 	bl	800e4d4 <__lshift>
 800db72:	4604      	mov	r4, r0
 800db74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800db76:	2b00      	cmp	r3, #0
 800db78:	d061      	beq.n	800dc3e <_dtoa_r+0x916>
 800db7a:	9802      	ldr	r0, [sp, #8]
 800db7c:	4621      	mov	r1, r4
 800db7e:	f000 fd15 	bl	800e5ac <__mcmp>
 800db82:	2800      	cmp	r0, #0
 800db84:	da5b      	bge.n	800dc3e <_dtoa_r+0x916>
 800db86:	2300      	movs	r3, #0
 800db88:	9902      	ldr	r1, [sp, #8]
 800db8a:	220a      	movs	r2, #10
 800db8c:	4648      	mov	r0, r9
 800db8e:	f000 fafd 	bl	800e18c <__multadd>
 800db92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db94:	9002      	str	r0, [sp, #8]
 800db96:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	f000 8177 	beq.w	800de8e <_dtoa_r+0xb66>
 800dba0:	4629      	mov	r1, r5
 800dba2:	2300      	movs	r3, #0
 800dba4:	220a      	movs	r2, #10
 800dba6:	4648      	mov	r0, r9
 800dba8:	f000 faf0 	bl	800e18c <__multadd>
 800dbac:	f1bb 0f00 	cmp.w	fp, #0
 800dbb0:	4605      	mov	r5, r0
 800dbb2:	dc6f      	bgt.n	800dc94 <_dtoa_r+0x96c>
 800dbb4:	9b07      	ldr	r3, [sp, #28]
 800dbb6:	2b02      	cmp	r3, #2
 800dbb8:	dc49      	bgt.n	800dc4e <_dtoa_r+0x926>
 800dbba:	e06b      	b.n	800dc94 <_dtoa_r+0x96c>
 800dbbc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dbbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dbc2:	e73c      	b.n	800da3e <_dtoa_r+0x716>
 800dbc4:	3fe00000 	.word	0x3fe00000
 800dbc8:	40240000 	.word	0x40240000
 800dbcc:	9b03      	ldr	r3, [sp, #12]
 800dbce:	1e5c      	subs	r4, r3, #1
 800dbd0:	9b08      	ldr	r3, [sp, #32]
 800dbd2:	42a3      	cmp	r3, r4
 800dbd4:	db09      	blt.n	800dbea <_dtoa_r+0x8c2>
 800dbd6:	1b1c      	subs	r4, r3, r4
 800dbd8:	9b03      	ldr	r3, [sp, #12]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	f6bf af30 	bge.w	800da40 <_dtoa_r+0x718>
 800dbe0:	9b00      	ldr	r3, [sp, #0]
 800dbe2:	9a03      	ldr	r2, [sp, #12]
 800dbe4:	1a9e      	subs	r6, r3, r2
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	e72b      	b.n	800da42 <_dtoa_r+0x71a>
 800dbea:	9b08      	ldr	r3, [sp, #32]
 800dbec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dbee:	9408      	str	r4, [sp, #32]
 800dbf0:	1ae3      	subs	r3, r4, r3
 800dbf2:	441a      	add	r2, r3
 800dbf4:	9e00      	ldr	r6, [sp, #0]
 800dbf6:	9b03      	ldr	r3, [sp, #12]
 800dbf8:	920d      	str	r2, [sp, #52]	@ 0x34
 800dbfa:	2400      	movs	r4, #0
 800dbfc:	e721      	b.n	800da42 <_dtoa_r+0x71a>
 800dbfe:	9c08      	ldr	r4, [sp, #32]
 800dc00:	9e00      	ldr	r6, [sp, #0]
 800dc02:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800dc04:	e728      	b.n	800da58 <_dtoa_r+0x730>
 800dc06:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800dc0a:	e751      	b.n	800dab0 <_dtoa_r+0x788>
 800dc0c:	9a08      	ldr	r2, [sp, #32]
 800dc0e:	9902      	ldr	r1, [sp, #8]
 800dc10:	e750      	b.n	800dab4 <_dtoa_r+0x78c>
 800dc12:	f8cd 8008 	str.w	r8, [sp, #8]
 800dc16:	e751      	b.n	800dabc <_dtoa_r+0x794>
 800dc18:	2300      	movs	r3, #0
 800dc1a:	e779      	b.n	800db10 <_dtoa_r+0x7e8>
 800dc1c:	9b04      	ldr	r3, [sp, #16]
 800dc1e:	e777      	b.n	800db10 <_dtoa_r+0x7e8>
 800dc20:	2300      	movs	r3, #0
 800dc22:	9308      	str	r3, [sp, #32]
 800dc24:	e779      	b.n	800db1a <_dtoa_r+0x7f2>
 800dc26:	d093      	beq.n	800db50 <_dtoa_r+0x828>
 800dc28:	9a00      	ldr	r2, [sp, #0]
 800dc2a:	331c      	adds	r3, #28
 800dc2c:	441a      	add	r2, r3
 800dc2e:	9200      	str	r2, [sp, #0]
 800dc30:	9a06      	ldr	r2, [sp, #24]
 800dc32:	441a      	add	r2, r3
 800dc34:	441e      	add	r6, r3
 800dc36:	9206      	str	r2, [sp, #24]
 800dc38:	e78a      	b.n	800db50 <_dtoa_r+0x828>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	e7f4      	b.n	800dc28 <_dtoa_r+0x900>
 800dc3e:	9b03      	ldr	r3, [sp, #12]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	46b8      	mov	r8, r7
 800dc44:	dc20      	bgt.n	800dc88 <_dtoa_r+0x960>
 800dc46:	469b      	mov	fp, r3
 800dc48:	9b07      	ldr	r3, [sp, #28]
 800dc4a:	2b02      	cmp	r3, #2
 800dc4c:	dd1e      	ble.n	800dc8c <_dtoa_r+0x964>
 800dc4e:	f1bb 0f00 	cmp.w	fp, #0
 800dc52:	f47f adb1 	bne.w	800d7b8 <_dtoa_r+0x490>
 800dc56:	4621      	mov	r1, r4
 800dc58:	465b      	mov	r3, fp
 800dc5a:	2205      	movs	r2, #5
 800dc5c:	4648      	mov	r0, r9
 800dc5e:	f000 fa95 	bl	800e18c <__multadd>
 800dc62:	4601      	mov	r1, r0
 800dc64:	4604      	mov	r4, r0
 800dc66:	9802      	ldr	r0, [sp, #8]
 800dc68:	f000 fca0 	bl	800e5ac <__mcmp>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	f77f ada3 	ble.w	800d7b8 <_dtoa_r+0x490>
 800dc72:	4656      	mov	r6, sl
 800dc74:	2331      	movs	r3, #49	@ 0x31
 800dc76:	f806 3b01 	strb.w	r3, [r6], #1
 800dc7a:	f108 0801 	add.w	r8, r8, #1
 800dc7e:	e59f      	b.n	800d7c0 <_dtoa_r+0x498>
 800dc80:	9c03      	ldr	r4, [sp, #12]
 800dc82:	46b8      	mov	r8, r7
 800dc84:	4625      	mov	r5, r4
 800dc86:	e7f4      	b.n	800dc72 <_dtoa_r+0x94a>
 800dc88:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800dc8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	f000 8101 	beq.w	800de96 <_dtoa_r+0xb6e>
 800dc94:	2e00      	cmp	r6, #0
 800dc96:	dd05      	ble.n	800dca4 <_dtoa_r+0x97c>
 800dc98:	4629      	mov	r1, r5
 800dc9a:	4632      	mov	r2, r6
 800dc9c:	4648      	mov	r0, r9
 800dc9e:	f000 fc19 	bl	800e4d4 <__lshift>
 800dca2:	4605      	mov	r5, r0
 800dca4:	9b08      	ldr	r3, [sp, #32]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d05c      	beq.n	800dd64 <_dtoa_r+0xa3c>
 800dcaa:	6869      	ldr	r1, [r5, #4]
 800dcac:	4648      	mov	r0, r9
 800dcae:	f000 fa0b 	bl	800e0c8 <_Balloc>
 800dcb2:	4606      	mov	r6, r0
 800dcb4:	b928      	cbnz	r0, 800dcc2 <_dtoa_r+0x99a>
 800dcb6:	4b82      	ldr	r3, [pc, #520]	@ (800dec0 <_dtoa_r+0xb98>)
 800dcb8:	4602      	mov	r2, r0
 800dcba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dcbe:	f7ff bb4a 	b.w	800d356 <_dtoa_r+0x2e>
 800dcc2:	692a      	ldr	r2, [r5, #16]
 800dcc4:	3202      	adds	r2, #2
 800dcc6:	0092      	lsls	r2, r2, #2
 800dcc8:	f105 010c 	add.w	r1, r5, #12
 800dccc:	300c      	adds	r0, #12
 800dcce:	f000 ffa3 	bl	800ec18 <memcpy>
 800dcd2:	2201      	movs	r2, #1
 800dcd4:	4631      	mov	r1, r6
 800dcd6:	4648      	mov	r0, r9
 800dcd8:	f000 fbfc 	bl	800e4d4 <__lshift>
 800dcdc:	f10a 0301 	add.w	r3, sl, #1
 800dce0:	9300      	str	r3, [sp, #0]
 800dce2:	eb0a 030b 	add.w	r3, sl, fp
 800dce6:	9308      	str	r3, [sp, #32]
 800dce8:	9b04      	ldr	r3, [sp, #16]
 800dcea:	f003 0301 	and.w	r3, r3, #1
 800dcee:	462f      	mov	r7, r5
 800dcf0:	9306      	str	r3, [sp, #24]
 800dcf2:	4605      	mov	r5, r0
 800dcf4:	9b00      	ldr	r3, [sp, #0]
 800dcf6:	9802      	ldr	r0, [sp, #8]
 800dcf8:	4621      	mov	r1, r4
 800dcfa:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800dcfe:	f7ff fa8a 	bl	800d216 <quorem>
 800dd02:	4603      	mov	r3, r0
 800dd04:	3330      	adds	r3, #48	@ 0x30
 800dd06:	9003      	str	r0, [sp, #12]
 800dd08:	4639      	mov	r1, r7
 800dd0a:	9802      	ldr	r0, [sp, #8]
 800dd0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd0e:	f000 fc4d 	bl	800e5ac <__mcmp>
 800dd12:	462a      	mov	r2, r5
 800dd14:	9004      	str	r0, [sp, #16]
 800dd16:	4621      	mov	r1, r4
 800dd18:	4648      	mov	r0, r9
 800dd1a:	f000 fc63 	bl	800e5e4 <__mdiff>
 800dd1e:	68c2      	ldr	r2, [r0, #12]
 800dd20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd22:	4606      	mov	r6, r0
 800dd24:	bb02      	cbnz	r2, 800dd68 <_dtoa_r+0xa40>
 800dd26:	4601      	mov	r1, r0
 800dd28:	9802      	ldr	r0, [sp, #8]
 800dd2a:	f000 fc3f 	bl	800e5ac <__mcmp>
 800dd2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd30:	4602      	mov	r2, r0
 800dd32:	4631      	mov	r1, r6
 800dd34:	4648      	mov	r0, r9
 800dd36:	920c      	str	r2, [sp, #48]	@ 0x30
 800dd38:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd3a:	f000 fa05 	bl	800e148 <_Bfree>
 800dd3e:	9b07      	ldr	r3, [sp, #28]
 800dd40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800dd42:	9e00      	ldr	r6, [sp, #0]
 800dd44:	ea42 0103 	orr.w	r1, r2, r3
 800dd48:	9b06      	ldr	r3, [sp, #24]
 800dd4a:	4319      	orrs	r1, r3
 800dd4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd4e:	d10d      	bne.n	800dd6c <_dtoa_r+0xa44>
 800dd50:	2b39      	cmp	r3, #57	@ 0x39
 800dd52:	d027      	beq.n	800dda4 <_dtoa_r+0xa7c>
 800dd54:	9a04      	ldr	r2, [sp, #16]
 800dd56:	2a00      	cmp	r2, #0
 800dd58:	dd01      	ble.n	800dd5e <_dtoa_r+0xa36>
 800dd5a:	9b03      	ldr	r3, [sp, #12]
 800dd5c:	3331      	adds	r3, #49	@ 0x31
 800dd5e:	f88b 3000 	strb.w	r3, [fp]
 800dd62:	e52e      	b.n	800d7c2 <_dtoa_r+0x49a>
 800dd64:	4628      	mov	r0, r5
 800dd66:	e7b9      	b.n	800dcdc <_dtoa_r+0x9b4>
 800dd68:	2201      	movs	r2, #1
 800dd6a:	e7e2      	b.n	800dd32 <_dtoa_r+0xa0a>
 800dd6c:	9904      	ldr	r1, [sp, #16]
 800dd6e:	2900      	cmp	r1, #0
 800dd70:	db04      	blt.n	800dd7c <_dtoa_r+0xa54>
 800dd72:	9807      	ldr	r0, [sp, #28]
 800dd74:	4301      	orrs	r1, r0
 800dd76:	9806      	ldr	r0, [sp, #24]
 800dd78:	4301      	orrs	r1, r0
 800dd7a:	d120      	bne.n	800ddbe <_dtoa_r+0xa96>
 800dd7c:	2a00      	cmp	r2, #0
 800dd7e:	ddee      	ble.n	800dd5e <_dtoa_r+0xa36>
 800dd80:	9902      	ldr	r1, [sp, #8]
 800dd82:	9300      	str	r3, [sp, #0]
 800dd84:	2201      	movs	r2, #1
 800dd86:	4648      	mov	r0, r9
 800dd88:	f000 fba4 	bl	800e4d4 <__lshift>
 800dd8c:	4621      	mov	r1, r4
 800dd8e:	9002      	str	r0, [sp, #8]
 800dd90:	f000 fc0c 	bl	800e5ac <__mcmp>
 800dd94:	2800      	cmp	r0, #0
 800dd96:	9b00      	ldr	r3, [sp, #0]
 800dd98:	dc02      	bgt.n	800dda0 <_dtoa_r+0xa78>
 800dd9a:	d1e0      	bne.n	800dd5e <_dtoa_r+0xa36>
 800dd9c:	07da      	lsls	r2, r3, #31
 800dd9e:	d5de      	bpl.n	800dd5e <_dtoa_r+0xa36>
 800dda0:	2b39      	cmp	r3, #57	@ 0x39
 800dda2:	d1da      	bne.n	800dd5a <_dtoa_r+0xa32>
 800dda4:	2339      	movs	r3, #57	@ 0x39
 800dda6:	f88b 3000 	strb.w	r3, [fp]
 800ddaa:	4633      	mov	r3, r6
 800ddac:	461e      	mov	r6, r3
 800ddae:	3b01      	subs	r3, #1
 800ddb0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ddb4:	2a39      	cmp	r2, #57	@ 0x39
 800ddb6:	d04e      	beq.n	800de56 <_dtoa_r+0xb2e>
 800ddb8:	3201      	adds	r2, #1
 800ddba:	701a      	strb	r2, [r3, #0]
 800ddbc:	e501      	b.n	800d7c2 <_dtoa_r+0x49a>
 800ddbe:	2a00      	cmp	r2, #0
 800ddc0:	dd03      	ble.n	800ddca <_dtoa_r+0xaa2>
 800ddc2:	2b39      	cmp	r3, #57	@ 0x39
 800ddc4:	d0ee      	beq.n	800dda4 <_dtoa_r+0xa7c>
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	e7c9      	b.n	800dd5e <_dtoa_r+0xa36>
 800ddca:	9a00      	ldr	r2, [sp, #0]
 800ddcc:	9908      	ldr	r1, [sp, #32]
 800ddce:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ddd2:	428a      	cmp	r2, r1
 800ddd4:	d028      	beq.n	800de28 <_dtoa_r+0xb00>
 800ddd6:	9902      	ldr	r1, [sp, #8]
 800ddd8:	2300      	movs	r3, #0
 800ddda:	220a      	movs	r2, #10
 800dddc:	4648      	mov	r0, r9
 800ddde:	f000 f9d5 	bl	800e18c <__multadd>
 800dde2:	42af      	cmp	r7, r5
 800dde4:	9002      	str	r0, [sp, #8]
 800dde6:	f04f 0300 	mov.w	r3, #0
 800ddea:	f04f 020a 	mov.w	r2, #10
 800ddee:	4639      	mov	r1, r7
 800ddf0:	4648      	mov	r0, r9
 800ddf2:	d107      	bne.n	800de04 <_dtoa_r+0xadc>
 800ddf4:	f000 f9ca 	bl	800e18c <__multadd>
 800ddf8:	4607      	mov	r7, r0
 800ddfa:	4605      	mov	r5, r0
 800ddfc:	9b00      	ldr	r3, [sp, #0]
 800ddfe:	3301      	adds	r3, #1
 800de00:	9300      	str	r3, [sp, #0]
 800de02:	e777      	b.n	800dcf4 <_dtoa_r+0x9cc>
 800de04:	f000 f9c2 	bl	800e18c <__multadd>
 800de08:	4629      	mov	r1, r5
 800de0a:	4607      	mov	r7, r0
 800de0c:	2300      	movs	r3, #0
 800de0e:	220a      	movs	r2, #10
 800de10:	4648      	mov	r0, r9
 800de12:	f000 f9bb 	bl	800e18c <__multadd>
 800de16:	4605      	mov	r5, r0
 800de18:	e7f0      	b.n	800ddfc <_dtoa_r+0xad4>
 800de1a:	f1bb 0f00 	cmp.w	fp, #0
 800de1e:	bfcc      	ite	gt
 800de20:	465e      	movgt	r6, fp
 800de22:	2601      	movle	r6, #1
 800de24:	4456      	add	r6, sl
 800de26:	2700      	movs	r7, #0
 800de28:	9902      	ldr	r1, [sp, #8]
 800de2a:	9300      	str	r3, [sp, #0]
 800de2c:	2201      	movs	r2, #1
 800de2e:	4648      	mov	r0, r9
 800de30:	f000 fb50 	bl	800e4d4 <__lshift>
 800de34:	4621      	mov	r1, r4
 800de36:	9002      	str	r0, [sp, #8]
 800de38:	f000 fbb8 	bl	800e5ac <__mcmp>
 800de3c:	2800      	cmp	r0, #0
 800de3e:	dcb4      	bgt.n	800ddaa <_dtoa_r+0xa82>
 800de40:	d102      	bne.n	800de48 <_dtoa_r+0xb20>
 800de42:	9b00      	ldr	r3, [sp, #0]
 800de44:	07db      	lsls	r3, r3, #31
 800de46:	d4b0      	bmi.n	800ddaa <_dtoa_r+0xa82>
 800de48:	4633      	mov	r3, r6
 800de4a:	461e      	mov	r6, r3
 800de4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de50:	2a30      	cmp	r2, #48	@ 0x30
 800de52:	d0fa      	beq.n	800de4a <_dtoa_r+0xb22>
 800de54:	e4b5      	b.n	800d7c2 <_dtoa_r+0x49a>
 800de56:	459a      	cmp	sl, r3
 800de58:	d1a8      	bne.n	800ddac <_dtoa_r+0xa84>
 800de5a:	2331      	movs	r3, #49	@ 0x31
 800de5c:	f108 0801 	add.w	r8, r8, #1
 800de60:	f88a 3000 	strb.w	r3, [sl]
 800de64:	e4ad      	b.n	800d7c2 <_dtoa_r+0x49a>
 800de66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800de68:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800dec4 <_dtoa_r+0xb9c>
 800de6c:	b11b      	cbz	r3, 800de76 <_dtoa_r+0xb4e>
 800de6e:	f10a 0308 	add.w	r3, sl, #8
 800de72:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800de74:	6013      	str	r3, [r2, #0]
 800de76:	4650      	mov	r0, sl
 800de78:	b017      	add	sp, #92	@ 0x5c
 800de7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de7e:	9b07      	ldr	r3, [sp, #28]
 800de80:	2b01      	cmp	r3, #1
 800de82:	f77f ae2e 	ble.w	800dae2 <_dtoa_r+0x7ba>
 800de86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800de88:	9308      	str	r3, [sp, #32]
 800de8a:	2001      	movs	r0, #1
 800de8c:	e64d      	b.n	800db2a <_dtoa_r+0x802>
 800de8e:	f1bb 0f00 	cmp.w	fp, #0
 800de92:	f77f aed9 	ble.w	800dc48 <_dtoa_r+0x920>
 800de96:	4656      	mov	r6, sl
 800de98:	9802      	ldr	r0, [sp, #8]
 800de9a:	4621      	mov	r1, r4
 800de9c:	f7ff f9bb 	bl	800d216 <quorem>
 800dea0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800dea4:	f806 3b01 	strb.w	r3, [r6], #1
 800dea8:	eba6 020a 	sub.w	r2, r6, sl
 800deac:	4593      	cmp	fp, r2
 800deae:	ddb4      	ble.n	800de1a <_dtoa_r+0xaf2>
 800deb0:	9902      	ldr	r1, [sp, #8]
 800deb2:	2300      	movs	r3, #0
 800deb4:	220a      	movs	r2, #10
 800deb6:	4648      	mov	r0, r9
 800deb8:	f000 f968 	bl	800e18c <__multadd>
 800debc:	9002      	str	r0, [sp, #8]
 800debe:	e7eb      	b.n	800de98 <_dtoa_r+0xb70>
 800dec0:	0800f420 	.word	0x0800f420
 800dec4:	0800f3a4 	.word	0x0800f3a4

0800dec8 <_free_r>:
 800dec8:	b538      	push	{r3, r4, r5, lr}
 800deca:	4605      	mov	r5, r0
 800decc:	2900      	cmp	r1, #0
 800dece:	d041      	beq.n	800df54 <_free_r+0x8c>
 800ded0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ded4:	1f0c      	subs	r4, r1, #4
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	bfb8      	it	lt
 800deda:	18e4      	addlt	r4, r4, r3
 800dedc:	f000 f8e8 	bl	800e0b0 <__malloc_lock>
 800dee0:	4a1d      	ldr	r2, [pc, #116]	@ (800df58 <_free_r+0x90>)
 800dee2:	6813      	ldr	r3, [r2, #0]
 800dee4:	b933      	cbnz	r3, 800def4 <_free_r+0x2c>
 800dee6:	6063      	str	r3, [r4, #4]
 800dee8:	6014      	str	r4, [r2, #0]
 800deea:	4628      	mov	r0, r5
 800deec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800def0:	f000 b8e4 	b.w	800e0bc <__malloc_unlock>
 800def4:	42a3      	cmp	r3, r4
 800def6:	d908      	bls.n	800df0a <_free_r+0x42>
 800def8:	6820      	ldr	r0, [r4, #0]
 800defa:	1821      	adds	r1, r4, r0
 800defc:	428b      	cmp	r3, r1
 800defe:	bf01      	itttt	eq
 800df00:	6819      	ldreq	r1, [r3, #0]
 800df02:	685b      	ldreq	r3, [r3, #4]
 800df04:	1809      	addeq	r1, r1, r0
 800df06:	6021      	streq	r1, [r4, #0]
 800df08:	e7ed      	b.n	800dee6 <_free_r+0x1e>
 800df0a:	461a      	mov	r2, r3
 800df0c:	685b      	ldr	r3, [r3, #4]
 800df0e:	b10b      	cbz	r3, 800df14 <_free_r+0x4c>
 800df10:	42a3      	cmp	r3, r4
 800df12:	d9fa      	bls.n	800df0a <_free_r+0x42>
 800df14:	6811      	ldr	r1, [r2, #0]
 800df16:	1850      	adds	r0, r2, r1
 800df18:	42a0      	cmp	r0, r4
 800df1a:	d10b      	bne.n	800df34 <_free_r+0x6c>
 800df1c:	6820      	ldr	r0, [r4, #0]
 800df1e:	4401      	add	r1, r0
 800df20:	1850      	adds	r0, r2, r1
 800df22:	4283      	cmp	r3, r0
 800df24:	6011      	str	r1, [r2, #0]
 800df26:	d1e0      	bne.n	800deea <_free_r+0x22>
 800df28:	6818      	ldr	r0, [r3, #0]
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	6053      	str	r3, [r2, #4]
 800df2e:	4408      	add	r0, r1
 800df30:	6010      	str	r0, [r2, #0]
 800df32:	e7da      	b.n	800deea <_free_r+0x22>
 800df34:	d902      	bls.n	800df3c <_free_r+0x74>
 800df36:	230c      	movs	r3, #12
 800df38:	602b      	str	r3, [r5, #0]
 800df3a:	e7d6      	b.n	800deea <_free_r+0x22>
 800df3c:	6820      	ldr	r0, [r4, #0]
 800df3e:	1821      	adds	r1, r4, r0
 800df40:	428b      	cmp	r3, r1
 800df42:	bf04      	itt	eq
 800df44:	6819      	ldreq	r1, [r3, #0]
 800df46:	685b      	ldreq	r3, [r3, #4]
 800df48:	6063      	str	r3, [r4, #4]
 800df4a:	bf04      	itt	eq
 800df4c:	1809      	addeq	r1, r1, r0
 800df4e:	6021      	streq	r1, [r4, #0]
 800df50:	6054      	str	r4, [r2, #4]
 800df52:	e7ca      	b.n	800deea <_free_r+0x22>
 800df54:	bd38      	pop	{r3, r4, r5, pc}
 800df56:	bf00      	nop
 800df58:	20005fd4 	.word	0x20005fd4

0800df5c <malloc>:
 800df5c:	4b02      	ldr	r3, [pc, #8]	@ (800df68 <malloc+0xc>)
 800df5e:	4601      	mov	r1, r0
 800df60:	6818      	ldr	r0, [r3, #0]
 800df62:	f000 b825 	b.w	800dfb0 <_malloc_r>
 800df66:	bf00      	nop
 800df68:	20000150 	.word	0x20000150

0800df6c <sbrk_aligned>:
 800df6c:	b570      	push	{r4, r5, r6, lr}
 800df6e:	4e0f      	ldr	r6, [pc, #60]	@ (800dfac <sbrk_aligned+0x40>)
 800df70:	460c      	mov	r4, r1
 800df72:	6831      	ldr	r1, [r6, #0]
 800df74:	4605      	mov	r5, r0
 800df76:	b911      	cbnz	r1, 800df7e <sbrk_aligned+0x12>
 800df78:	f000 fe3e 	bl	800ebf8 <_sbrk_r>
 800df7c:	6030      	str	r0, [r6, #0]
 800df7e:	4621      	mov	r1, r4
 800df80:	4628      	mov	r0, r5
 800df82:	f000 fe39 	bl	800ebf8 <_sbrk_r>
 800df86:	1c43      	adds	r3, r0, #1
 800df88:	d103      	bne.n	800df92 <sbrk_aligned+0x26>
 800df8a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800df8e:	4620      	mov	r0, r4
 800df90:	bd70      	pop	{r4, r5, r6, pc}
 800df92:	1cc4      	adds	r4, r0, #3
 800df94:	f024 0403 	bic.w	r4, r4, #3
 800df98:	42a0      	cmp	r0, r4
 800df9a:	d0f8      	beq.n	800df8e <sbrk_aligned+0x22>
 800df9c:	1a21      	subs	r1, r4, r0
 800df9e:	4628      	mov	r0, r5
 800dfa0:	f000 fe2a 	bl	800ebf8 <_sbrk_r>
 800dfa4:	3001      	adds	r0, #1
 800dfa6:	d1f2      	bne.n	800df8e <sbrk_aligned+0x22>
 800dfa8:	e7ef      	b.n	800df8a <sbrk_aligned+0x1e>
 800dfaa:	bf00      	nop
 800dfac:	20005fd0 	.word	0x20005fd0

0800dfb0 <_malloc_r>:
 800dfb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfb4:	1ccd      	adds	r5, r1, #3
 800dfb6:	f025 0503 	bic.w	r5, r5, #3
 800dfba:	3508      	adds	r5, #8
 800dfbc:	2d0c      	cmp	r5, #12
 800dfbe:	bf38      	it	cc
 800dfc0:	250c      	movcc	r5, #12
 800dfc2:	2d00      	cmp	r5, #0
 800dfc4:	4606      	mov	r6, r0
 800dfc6:	db01      	blt.n	800dfcc <_malloc_r+0x1c>
 800dfc8:	42a9      	cmp	r1, r5
 800dfca:	d904      	bls.n	800dfd6 <_malloc_r+0x26>
 800dfcc:	230c      	movs	r3, #12
 800dfce:	6033      	str	r3, [r6, #0]
 800dfd0:	2000      	movs	r0, #0
 800dfd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e0ac <_malloc_r+0xfc>
 800dfda:	f000 f869 	bl	800e0b0 <__malloc_lock>
 800dfde:	f8d8 3000 	ldr.w	r3, [r8]
 800dfe2:	461c      	mov	r4, r3
 800dfe4:	bb44      	cbnz	r4, 800e038 <_malloc_r+0x88>
 800dfe6:	4629      	mov	r1, r5
 800dfe8:	4630      	mov	r0, r6
 800dfea:	f7ff ffbf 	bl	800df6c <sbrk_aligned>
 800dfee:	1c43      	adds	r3, r0, #1
 800dff0:	4604      	mov	r4, r0
 800dff2:	d158      	bne.n	800e0a6 <_malloc_r+0xf6>
 800dff4:	f8d8 4000 	ldr.w	r4, [r8]
 800dff8:	4627      	mov	r7, r4
 800dffa:	2f00      	cmp	r7, #0
 800dffc:	d143      	bne.n	800e086 <_malloc_r+0xd6>
 800dffe:	2c00      	cmp	r4, #0
 800e000:	d04b      	beq.n	800e09a <_malloc_r+0xea>
 800e002:	6823      	ldr	r3, [r4, #0]
 800e004:	4639      	mov	r1, r7
 800e006:	4630      	mov	r0, r6
 800e008:	eb04 0903 	add.w	r9, r4, r3
 800e00c:	f000 fdf4 	bl	800ebf8 <_sbrk_r>
 800e010:	4581      	cmp	r9, r0
 800e012:	d142      	bne.n	800e09a <_malloc_r+0xea>
 800e014:	6821      	ldr	r1, [r4, #0]
 800e016:	1a6d      	subs	r5, r5, r1
 800e018:	4629      	mov	r1, r5
 800e01a:	4630      	mov	r0, r6
 800e01c:	f7ff ffa6 	bl	800df6c <sbrk_aligned>
 800e020:	3001      	adds	r0, #1
 800e022:	d03a      	beq.n	800e09a <_malloc_r+0xea>
 800e024:	6823      	ldr	r3, [r4, #0]
 800e026:	442b      	add	r3, r5
 800e028:	6023      	str	r3, [r4, #0]
 800e02a:	f8d8 3000 	ldr.w	r3, [r8]
 800e02e:	685a      	ldr	r2, [r3, #4]
 800e030:	bb62      	cbnz	r2, 800e08c <_malloc_r+0xdc>
 800e032:	f8c8 7000 	str.w	r7, [r8]
 800e036:	e00f      	b.n	800e058 <_malloc_r+0xa8>
 800e038:	6822      	ldr	r2, [r4, #0]
 800e03a:	1b52      	subs	r2, r2, r5
 800e03c:	d420      	bmi.n	800e080 <_malloc_r+0xd0>
 800e03e:	2a0b      	cmp	r2, #11
 800e040:	d917      	bls.n	800e072 <_malloc_r+0xc2>
 800e042:	1961      	adds	r1, r4, r5
 800e044:	42a3      	cmp	r3, r4
 800e046:	6025      	str	r5, [r4, #0]
 800e048:	bf18      	it	ne
 800e04a:	6059      	strne	r1, [r3, #4]
 800e04c:	6863      	ldr	r3, [r4, #4]
 800e04e:	bf08      	it	eq
 800e050:	f8c8 1000 	streq.w	r1, [r8]
 800e054:	5162      	str	r2, [r4, r5]
 800e056:	604b      	str	r3, [r1, #4]
 800e058:	4630      	mov	r0, r6
 800e05a:	f000 f82f 	bl	800e0bc <__malloc_unlock>
 800e05e:	f104 000b 	add.w	r0, r4, #11
 800e062:	1d23      	adds	r3, r4, #4
 800e064:	f020 0007 	bic.w	r0, r0, #7
 800e068:	1ac2      	subs	r2, r0, r3
 800e06a:	bf1c      	itt	ne
 800e06c:	1a1b      	subne	r3, r3, r0
 800e06e:	50a3      	strne	r3, [r4, r2]
 800e070:	e7af      	b.n	800dfd2 <_malloc_r+0x22>
 800e072:	6862      	ldr	r2, [r4, #4]
 800e074:	42a3      	cmp	r3, r4
 800e076:	bf0c      	ite	eq
 800e078:	f8c8 2000 	streq.w	r2, [r8]
 800e07c:	605a      	strne	r2, [r3, #4]
 800e07e:	e7eb      	b.n	800e058 <_malloc_r+0xa8>
 800e080:	4623      	mov	r3, r4
 800e082:	6864      	ldr	r4, [r4, #4]
 800e084:	e7ae      	b.n	800dfe4 <_malloc_r+0x34>
 800e086:	463c      	mov	r4, r7
 800e088:	687f      	ldr	r7, [r7, #4]
 800e08a:	e7b6      	b.n	800dffa <_malloc_r+0x4a>
 800e08c:	461a      	mov	r2, r3
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	42a3      	cmp	r3, r4
 800e092:	d1fb      	bne.n	800e08c <_malloc_r+0xdc>
 800e094:	2300      	movs	r3, #0
 800e096:	6053      	str	r3, [r2, #4]
 800e098:	e7de      	b.n	800e058 <_malloc_r+0xa8>
 800e09a:	230c      	movs	r3, #12
 800e09c:	6033      	str	r3, [r6, #0]
 800e09e:	4630      	mov	r0, r6
 800e0a0:	f000 f80c 	bl	800e0bc <__malloc_unlock>
 800e0a4:	e794      	b.n	800dfd0 <_malloc_r+0x20>
 800e0a6:	6005      	str	r5, [r0, #0]
 800e0a8:	e7d6      	b.n	800e058 <_malloc_r+0xa8>
 800e0aa:	bf00      	nop
 800e0ac:	20005fd4 	.word	0x20005fd4

0800e0b0 <__malloc_lock>:
 800e0b0:	4801      	ldr	r0, [pc, #4]	@ (800e0b8 <__malloc_lock+0x8>)
 800e0b2:	f7ff b8ae 	b.w	800d212 <__retarget_lock_acquire_recursive>
 800e0b6:	bf00      	nop
 800e0b8:	20005fcc 	.word	0x20005fcc

0800e0bc <__malloc_unlock>:
 800e0bc:	4801      	ldr	r0, [pc, #4]	@ (800e0c4 <__malloc_unlock+0x8>)
 800e0be:	f7ff b8a9 	b.w	800d214 <__retarget_lock_release_recursive>
 800e0c2:	bf00      	nop
 800e0c4:	20005fcc 	.word	0x20005fcc

0800e0c8 <_Balloc>:
 800e0c8:	b570      	push	{r4, r5, r6, lr}
 800e0ca:	69c6      	ldr	r6, [r0, #28]
 800e0cc:	4604      	mov	r4, r0
 800e0ce:	460d      	mov	r5, r1
 800e0d0:	b976      	cbnz	r6, 800e0f0 <_Balloc+0x28>
 800e0d2:	2010      	movs	r0, #16
 800e0d4:	f7ff ff42 	bl	800df5c <malloc>
 800e0d8:	4602      	mov	r2, r0
 800e0da:	61e0      	str	r0, [r4, #28]
 800e0dc:	b920      	cbnz	r0, 800e0e8 <_Balloc+0x20>
 800e0de:	4b18      	ldr	r3, [pc, #96]	@ (800e140 <_Balloc+0x78>)
 800e0e0:	4818      	ldr	r0, [pc, #96]	@ (800e144 <_Balloc+0x7c>)
 800e0e2:	216b      	movs	r1, #107	@ 0x6b
 800e0e4:	f000 fda6 	bl	800ec34 <__assert_func>
 800e0e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0ec:	6006      	str	r6, [r0, #0]
 800e0ee:	60c6      	str	r6, [r0, #12]
 800e0f0:	69e6      	ldr	r6, [r4, #28]
 800e0f2:	68f3      	ldr	r3, [r6, #12]
 800e0f4:	b183      	cbz	r3, 800e118 <_Balloc+0x50>
 800e0f6:	69e3      	ldr	r3, [r4, #28]
 800e0f8:	68db      	ldr	r3, [r3, #12]
 800e0fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e0fe:	b9b8      	cbnz	r0, 800e130 <_Balloc+0x68>
 800e100:	2101      	movs	r1, #1
 800e102:	fa01 f605 	lsl.w	r6, r1, r5
 800e106:	1d72      	adds	r2, r6, #5
 800e108:	0092      	lsls	r2, r2, #2
 800e10a:	4620      	mov	r0, r4
 800e10c:	f000 fdb0 	bl	800ec70 <_calloc_r>
 800e110:	b160      	cbz	r0, 800e12c <_Balloc+0x64>
 800e112:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e116:	e00e      	b.n	800e136 <_Balloc+0x6e>
 800e118:	2221      	movs	r2, #33	@ 0x21
 800e11a:	2104      	movs	r1, #4
 800e11c:	4620      	mov	r0, r4
 800e11e:	f000 fda7 	bl	800ec70 <_calloc_r>
 800e122:	69e3      	ldr	r3, [r4, #28]
 800e124:	60f0      	str	r0, [r6, #12]
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d1e4      	bne.n	800e0f6 <_Balloc+0x2e>
 800e12c:	2000      	movs	r0, #0
 800e12e:	bd70      	pop	{r4, r5, r6, pc}
 800e130:	6802      	ldr	r2, [r0, #0]
 800e132:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e136:	2300      	movs	r3, #0
 800e138:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e13c:	e7f7      	b.n	800e12e <_Balloc+0x66>
 800e13e:	bf00      	nop
 800e140:	0800f3b1 	.word	0x0800f3b1
 800e144:	0800f431 	.word	0x0800f431

0800e148 <_Bfree>:
 800e148:	b570      	push	{r4, r5, r6, lr}
 800e14a:	69c6      	ldr	r6, [r0, #28]
 800e14c:	4605      	mov	r5, r0
 800e14e:	460c      	mov	r4, r1
 800e150:	b976      	cbnz	r6, 800e170 <_Bfree+0x28>
 800e152:	2010      	movs	r0, #16
 800e154:	f7ff ff02 	bl	800df5c <malloc>
 800e158:	4602      	mov	r2, r0
 800e15a:	61e8      	str	r0, [r5, #28]
 800e15c:	b920      	cbnz	r0, 800e168 <_Bfree+0x20>
 800e15e:	4b09      	ldr	r3, [pc, #36]	@ (800e184 <_Bfree+0x3c>)
 800e160:	4809      	ldr	r0, [pc, #36]	@ (800e188 <_Bfree+0x40>)
 800e162:	218f      	movs	r1, #143	@ 0x8f
 800e164:	f000 fd66 	bl	800ec34 <__assert_func>
 800e168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e16c:	6006      	str	r6, [r0, #0]
 800e16e:	60c6      	str	r6, [r0, #12]
 800e170:	b13c      	cbz	r4, 800e182 <_Bfree+0x3a>
 800e172:	69eb      	ldr	r3, [r5, #28]
 800e174:	6862      	ldr	r2, [r4, #4]
 800e176:	68db      	ldr	r3, [r3, #12]
 800e178:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e17c:	6021      	str	r1, [r4, #0]
 800e17e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e182:	bd70      	pop	{r4, r5, r6, pc}
 800e184:	0800f3b1 	.word	0x0800f3b1
 800e188:	0800f431 	.word	0x0800f431

0800e18c <__multadd>:
 800e18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e190:	690d      	ldr	r5, [r1, #16]
 800e192:	4607      	mov	r7, r0
 800e194:	460c      	mov	r4, r1
 800e196:	461e      	mov	r6, r3
 800e198:	f101 0c14 	add.w	ip, r1, #20
 800e19c:	2000      	movs	r0, #0
 800e19e:	f8dc 3000 	ldr.w	r3, [ip]
 800e1a2:	b299      	uxth	r1, r3
 800e1a4:	fb02 6101 	mla	r1, r2, r1, r6
 800e1a8:	0c1e      	lsrs	r6, r3, #16
 800e1aa:	0c0b      	lsrs	r3, r1, #16
 800e1ac:	fb02 3306 	mla	r3, r2, r6, r3
 800e1b0:	b289      	uxth	r1, r1
 800e1b2:	3001      	adds	r0, #1
 800e1b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e1b8:	4285      	cmp	r5, r0
 800e1ba:	f84c 1b04 	str.w	r1, [ip], #4
 800e1be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e1c2:	dcec      	bgt.n	800e19e <__multadd+0x12>
 800e1c4:	b30e      	cbz	r6, 800e20a <__multadd+0x7e>
 800e1c6:	68a3      	ldr	r3, [r4, #8]
 800e1c8:	42ab      	cmp	r3, r5
 800e1ca:	dc19      	bgt.n	800e200 <__multadd+0x74>
 800e1cc:	6861      	ldr	r1, [r4, #4]
 800e1ce:	4638      	mov	r0, r7
 800e1d0:	3101      	adds	r1, #1
 800e1d2:	f7ff ff79 	bl	800e0c8 <_Balloc>
 800e1d6:	4680      	mov	r8, r0
 800e1d8:	b928      	cbnz	r0, 800e1e6 <__multadd+0x5a>
 800e1da:	4602      	mov	r2, r0
 800e1dc:	4b0c      	ldr	r3, [pc, #48]	@ (800e210 <__multadd+0x84>)
 800e1de:	480d      	ldr	r0, [pc, #52]	@ (800e214 <__multadd+0x88>)
 800e1e0:	21ba      	movs	r1, #186	@ 0xba
 800e1e2:	f000 fd27 	bl	800ec34 <__assert_func>
 800e1e6:	6922      	ldr	r2, [r4, #16]
 800e1e8:	3202      	adds	r2, #2
 800e1ea:	f104 010c 	add.w	r1, r4, #12
 800e1ee:	0092      	lsls	r2, r2, #2
 800e1f0:	300c      	adds	r0, #12
 800e1f2:	f000 fd11 	bl	800ec18 <memcpy>
 800e1f6:	4621      	mov	r1, r4
 800e1f8:	4638      	mov	r0, r7
 800e1fa:	f7ff ffa5 	bl	800e148 <_Bfree>
 800e1fe:	4644      	mov	r4, r8
 800e200:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e204:	3501      	adds	r5, #1
 800e206:	615e      	str	r6, [r3, #20]
 800e208:	6125      	str	r5, [r4, #16]
 800e20a:	4620      	mov	r0, r4
 800e20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e210:	0800f420 	.word	0x0800f420
 800e214:	0800f431 	.word	0x0800f431

0800e218 <__hi0bits>:
 800e218:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e21c:	4603      	mov	r3, r0
 800e21e:	bf36      	itet	cc
 800e220:	0403      	lslcc	r3, r0, #16
 800e222:	2000      	movcs	r0, #0
 800e224:	2010      	movcc	r0, #16
 800e226:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e22a:	bf3c      	itt	cc
 800e22c:	021b      	lslcc	r3, r3, #8
 800e22e:	3008      	addcc	r0, #8
 800e230:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e234:	bf3c      	itt	cc
 800e236:	011b      	lslcc	r3, r3, #4
 800e238:	3004      	addcc	r0, #4
 800e23a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e23e:	bf3c      	itt	cc
 800e240:	009b      	lslcc	r3, r3, #2
 800e242:	3002      	addcc	r0, #2
 800e244:	2b00      	cmp	r3, #0
 800e246:	db05      	blt.n	800e254 <__hi0bits+0x3c>
 800e248:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e24c:	f100 0001 	add.w	r0, r0, #1
 800e250:	bf08      	it	eq
 800e252:	2020      	moveq	r0, #32
 800e254:	4770      	bx	lr

0800e256 <__lo0bits>:
 800e256:	6803      	ldr	r3, [r0, #0]
 800e258:	4602      	mov	r2, r0
 800e25a:	f013 0007 	ands.w	r0, r3, #7
 800e25e:	d00b      	beq.n	800e278 <__lo0bits+0x22>
 800e260:	07d9      	lsls	r1, r3, #31
 800e262:	d421      	bmi.n	800e2a8 <__lo0bits+0x52>
 800e264:	0798      	lsls	r0, r3, #30
 800e266:	bf49      	itett	mi
 800e268:	085b      	lsrmi	r3, r3, #1
 800e26a:	089b      	lsrpl	r3, r3, #2
 800e26c:	2001      	movmi	r0, #1
 800e26e:	6013      	strmi	r3, [r2, #0]
 800e270:	bf5c      	itt	pl
 800e272:	6013      	strpl	r3, [r2, #0]
 800e274:	2002      	movpl	r0, #2
 800e276:	4770      	bx	lr
 800e278:	b299      	uxth	r1, r3
 800e27a:	b909      	cbnz	r1, 800e280 <__lo0bits+0x2a>
 800e27c:	0c1b      	lsrs	r3, r3, #16
 800e27e:	2010      	movs	r0, #16
 800e280:	b2d9      	uxtb	r1, r3
 800e282:	b909      	cbnz	r1, 800e288 <__lo0bits+0x32>
 800e284:	3008      	adds	r0, #8
 800e286:	0a1b      	lsrs	r3, r3, #8
 800e288:	0719      	lsls	r1, r3, #28
 800e28a:	bf04      	itt	eq
 800e28c:	091b      	lsreq	r3, r3, #4
 800e28e:	3004      	addeq	r0, #4
 800e290:	0799      	lsls	r1, r3, #30
 800e292:	bf04      	itt	eq
 800e294:	089b      	lsreq	r3, r3, #2
 800e296:	3002      	addeq	r0, #2
 800e298:	07d9      	lsls	r1, r3, #31
 800e29a:	d403      	bmi.n	800e2a4 <__lo0bits+0x4e>
 800e29c:	085b      	lsrs	r3, r3, #1
 800e29e:	f100 0001 	add.w	r0, r0, #1
 800e2a2:	d003      	beq.n	800e2ac <__lo0bits+0x56>
 800e2a4:	6013      	str	r3, [r2, #0]
 800e2a6:	4770      	bx	lr
 800e2a8:	2000      	movs	r0, #0
 800e2aa:	4770      	bx	lr
 800e2ac:	2020      	movs	r0, #32
 800e2ae:	4770      	bx	lr

0800e2b0 <__i2b>:
 800e2b0:	b510      	push	{r4, lr}
 800e2b2:	460c      	mov	r4, r1
 800e2b4:	2101      	movs	r1, #1
 800e2b6:	f7ff ff07 	bl	800e0c8 <_Balloc>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	b928      	cbnz	r0, 800e2ca <__i2b+0x1a>
 800e2be:	4b05      	ldr	r3, [pc, #20]	@ (800e2d4 <__i2b+0x24>)
 800e2c0:	4805      	ldr	r0, [pc, #20]	@ (800e2d8 <__i2b+0x28>)
 800e2c2:	f240 1145 	movw	r1, #325	@ 0x145
 800e2c6:	f000 fcb5 	bl	800ec34 <__assert_func>
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	6144      	str	r4, [r0, #20]
 800e2ce:	6103      	str	r3, [r0, #16]
 800e2d0:	bd10      	pop	{r4, pc}
 800e2d2:	bf00      	nop
 800e2d4:	0800f420 	.word	0x0800f420
 800e2d8:	0800f431 	.word	0x0800f431

0800e2dc <__multiply>:
 800e2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e0:	4617      	mov	r7, r2
 800e2e2:	690a      	ldr	r2, [r1, #16]
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	bfa8      	it	ge
 800e2ea:	463b      	movge	r3, r7
 800e2ec:	4689      	mov	r9, r1
 800e2ee:	bfa4      	itt	ge
 800e2f0:	460f      	movge	r7, r1
 800e2f2:	4699      	movge	r9, r3
 800e2f4:	693d      	ldr	r5, [r7, #16]
 800e2f6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	6879      	ldr	r1, [r7, #4]
 800e2fe:	eb05 060a 	add.w	r6, r5, sl
 800e302:	42b3      	cmp	r3, r6
 800e304:	b085      	sub	sp, #20
 800e306:	bfb8      	it	lt
 800e308:	3101      	addlt	r1, #1
 800e30a:	f7ff fedd 	bl	800e0c8 <_Balloc>
 800e30e:	b930      	cbnz	r0, 800e31e <__multiply+0x42>
 800e310:	4602      	mov	r2, r0
 800e312:	4b41      	ldr	r3, [pc, #260]	@ (800e418 <__multiply+0x13c>)
 800e314:	4841      	ldr	r0, [pc, #260]	@ (800e41c <__multiply+0x140>)
 800e316:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e31a:	f000 fc8b 	bl	800ec34 <__assert_func>
 800e31e:	f100 0414 	add.w	r4, r0, #20
 800e322:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e326:	4623      	mov	r3, r4
 800e328:	2200      	movs	r2, #0
 800e32a:	4573      	cmp	r3, lr
 800e32c:	d320      	bcc.n	800e370 <__multiply+0x94>
 800e32e:	f107 0814 	add.w	r8, r7, #20
 800e332:	f109 0114 	add.w	r1, r9, #20
 800e336:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e33a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e33e:	9302      	str	r3, [sp, #8]
 800e340:	1beb      	subs	r3, r5, r7
 800e342:	3b15      	subs	r3, #21
 800e344:	f023 0303 	bic.w	r3, r3, #3
 800e348:	3304      	adds	r3, #4
 800e34a:	3715      	adds	r7, #21
 800e34c:	42bd      	cmp	r5, r7
 800e34e:	bf38      	it	cc
 800e350:	2304      	movcc	r3, #4
 800e352:	9301      	str	r3, [sp, #4]
 800e354:	9b02      	ldr	r3, [sp, #8]
 800e356:	9103      	str	r1, [sp, #12]
 800e358:	428b      	cmp	r3, r1
 800e35a:	d80c      	bhi.n	800e376 <__multiply+0x9a>
 800e35c:	2e00      	cmp	r6, #0
 800e35e:	dd03      	ble.n	800e368 <__multiply+0x8c>
 800e360:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e364:	2b00      	cmp	r3, #0
 800e366:	d055      	beq.n	800e414 <__multiply+0x138>
 800e368:	6106      	str	r6, [r0, #16]
 800e36a:	b005      	add	sp, #20
 800e36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e370:	f843 2b04 	str.w	r2, [r3], #4
 800e374:	e7d9      	b.n	800e32a <__multiply+0x4e>
 800e376:	f8b1 a000 	ldrh.w	sl, [r1]
 800e37a:	f1ba 0f00 	cmp.w	sl, #0
 800e37e:	d01f      	beq.n	800e3c0 <__multiply+0xe4>
 800e380:	46c4      	mov	ip, r8
 800e382:	46a1      	mov	r9, r4
 800e384:	2700      	movs	r7, #0
 800e386:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e38a:	f8d9 3000 	ldr.w	r3, [r9]
 800e38e:	fa1f fb82 	uxth.w	fp, r2
 800e392:	b29b      	uxth	r3, r3
 800e394:	fb0a 330b 	mla	r3, sl, fp, r3
 800e398:	443b      	add	r3, r7
 800e39a:	f8d9 7000 	ldr.w	r7, [r9]
 800e39e:	0c12      	lsrs	r2, r2, #16
 800e3a0:	0c3f      	lsrs	r7, r7, #16
 800e3a2:	fb0a 7202 	mla	r2, sl, r2, r7
 800e3a6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e3aa:	b29b      	uxth	r3, r3
 800e3ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3b0:	4565      	cmp	r5, ip
 800e3b2:	f849 3b04 	str.w	r3, [r9], #4
 800e3b6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e3ba:	d8e4      	bhi.n	800e386 <__multiply+0xaa>
 800e3bc:	9b01      	ldr	r3, [sp, #4]
 800e3be:	50e7      	str	r7, [r4, r3]
 800e3c0:	9b03      	ldr	r3, [sp, #12]
 800e3c2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e3c6:	3104      	adds	r1, #4
 800e3c8:	f1b9 0f00 	cmp.w	r9, #0
 800e3cc:	d020      	beq.n	800e410 <__multiply+0x134>
 800e3ce:	6823      	ldr	r3, [r4, #0]
 800e3d0:	4647      	mov	r7, r8
 800e3d2:	46a4      	mov	ip, r4
 800e3d4:	f04f 0a00 	mov.w	sl, #0
 800e3d8:	f8b7 b000 	ldrh.w	fp, [r7]
 800e3dc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e3e0:	fb09 220b 	mla	r2, r9, fp, r2
 800e3e4:	4452      	add	r2, sl
 800e3e6:	b29b      	uxth	r3, r3
 800e3e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3ec:	f84c 3b04 	str.w	r3, [ip], #4
 800e3f0:	f857 3b04 	ldr.w	r3, [r7], #4
 800e3f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e3f8:	f8bc 3000 	ldrh.w	r3, [ip]
 800e3fc:	fb09 330a 	mla	r3, r9, sl, r3
 800e400:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e404:	42bd      	cmp	r5, r7
 800e406:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e40a:	d8e5      	bhi.n	800e3d8 <__multiply+0xfc>
 800e40c:	9a01      	ldr	r2, [sp, #4]
 800e40e:	50a3      	str	r3, [r4, r2]
 800e410:	3404      	adds	r4, #4
 800e412:	e79f      	b.n	800e354 <__multiply+0x78>
 800e414:	3e01      	subs	r6, #1
 800e416:	e7a1      	b.n	800e35c <__multiply+0x80>
 800e418:	0800f420 	.word	0x0800f420
 800e41c:	0800f431 	.word	0x0800f431

0800e420 <__pow5mult>:
 800e420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e424:	4615      	mov	r5, r2
 800e426:	f012 0203 	ands.w	r2, r2, #3
 800e42a:	4607      	mov	r7, r0
 800e42c:	460e      	mov	r6, r1
 800e42e:	d007      	beq.n	800e440 <__pow5mult+0x20>
 800e430:	4c25      	ldr	r4, [pc, #148]	@ (800e4c8 <__pow5mult+0xa8>)
 800e432:	3a01      	subs	r2, #1
 800e434:	2300      	movs	r3, #0
 800e436:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e43a:	f7ff fea7 	bl	800e18c <__multadd>
 800e43e:	4606      	mov	r6, r0
 800e440:	10ad      	asrs	r5, r5, #2
 800e442:	d03d      	beq.n	800e4c0 <__pow5mult+0xa0>
 800e444:	69fc      	ldr	r4, [r7, #28]
 800e446:	b97c      	cbnz	r4, 800e468 <__pow5mult+0x48>
 800e448:	2010      	movs	r0, #16
 800e44a:	f7ff fd87 	bl	800df5c <malloc>
 800e44e:	4602      	mov	r2, r0
 800e450:	61f8      	str	r0, [r7, #28]
 800e452:	b928      	cbnz	r0, 800e460 <__pow5mult+0x40>
 800e454:	4b1d      	ldr	r3, [pc, #116]	@ (800e4cc <__pow5mult+0xac>)
 800e456:	481e      	ldr	r0, [pc, #120]	@ (800e4d0 <__pow5mult+0xb0>)
 800e458:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e45c:	f000 fbea 	bl	800ec34 <__assert_func>
 800e460:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e464:	6004      	str	r4, [r0, #0]
 800e466:	60c4      	str	r4, [r0, #12]
 800e468:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e46c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e470:	b94c      	cbnz	r4, 800e486 <__pow5mult+0x66>
 800e472:	f240 2171 	movw	r1, #625	@ 0x271
 800e476:	4638      	mov	r0, r7
 800e478:	f7ff ff1a 	bl	800e2b0 <__i2b>
 800e47c:	2300      	movs	r3, #0
 800e47e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e482:	4604      	mov	r4, r0
 800e484:	6003      	str	r3, [r0, #0]
 800e486:	f04f 0900 	mov.w	r9, #0
 800e48a:	07eb      	lsls	r3, r5, #31
 800e48c:	d50a      	bpl.n	800e4a4 <__pow5mult+0x84>
 800e48e:	4631      	mov	r1, r6
 800e490:	4622      	mov	r2, r4
 800e492:	4638      	mov	r0, r7
 800e494:	f7ff ff22 	bl	800e2dc <__multiply>
 800e498:	4631      	mov	r1, r6
 800e49a:	4680      	mov	r8, r0
 800e49c:	4638      	mov	r0, r7
 800e49e:	f7ff fe53 	bl	800e148 <_Bfree>
 800e4a2:	4646      	mov	r6, r8
 800e4a4:	106d      	asrs	r5, r5, #1
 800e4a6:	d00b      	beq.n	800e4c0 <__pow5mult+0xa0>
 800e4a8:	6820      	ldr	r0, [r4, #0]
 800e4aa:	b938      	cbnz	r0, 800e4bc <__pow5mult+0x9c>
 800e4ac:	4622      	mov	r2, r4
 800e4ae:	4621      	mov	r1, r4
 800e4b0:	4638      	mov	r0, r7
 800e4b2:	f7ff ff13 	bl	800e2dc <__multiply>
 800e4b6:	6020      	str	r0, [r4, #0]
 800e4b8:	f8c0 9000 	str.w	r9, [r0]
 800e4bc:	4604      	mov	r4, r0
 800e4be:	e7e4      	b.n	800e48a <__pow5mult+0x6a>
 800e4c0:	4630      	mov	r0, r6
 800e4c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4c6:	bf00      	nop
 800e4c8:	0800f4e4 	.word	0x0800f4e4
 800e4cc:	0800f3b1 	.word	0x0800f3b1
 800e4d0:	0800f431 	.word	0x0800f431

0800e4d4 <__lshift>:
 800e4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4d8:	460c      	mov	r4, r1
 800e4da:	6849      	ldr	r1, [r1, #4]
 800e4dc:	6923      	ldr	r3, [r4, #16]
 800e4de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e4e2:	68a3      	ldr	r3, [r4, #8]
 800e4e4:	4607      	mov	r7, r0
 800e4e6:	4691      	mov	r9, r2
 800e4e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4ec:	f108 0601 	add.w	r6, r8, #1
 800e4f0:	42b3      	cmp	r3, r6
 800e4f2:	db0b      	blt.n	800e50c <__lshift+0x38>
 800e4f4:	4638      	mov	r0, r7
 800e4f6:	f7ff fde7 	bl	800e0c8 <_Balloc>
 800e4fa:	4605      	mov	r5, r0
 800e4fc:	b948      	cbnz	r0, 800e512 <__lshift+0x3e>
 800e4fe:	4602      	mov	r2, r0
 800e500:	4b28      	ldr	r3, [pc, #160]	@ (800e5a4 <__lshift+0xd0>)
 800e502:	4829      	ldr	r0, [pc, #164]	@ (800e5a8 <__lshift+0xd4>)
 800e504:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e508:	f000 fb94 	bl	800ec34 <__assert_func>
 800e50c:	3101      	adds	r1, #1
 800e50e:	005b      	lsls	r3, r3, #1
 800e510:	e7ee      	b.n	800e4f0 <__lshift+0x1c>
 800e512:	2300      	movs	r3, #0
 800e514:	f100 0114 	add.w	r1, r0, #20
 800e518:	f100 0210 	add.w	r2, r0, #16
 800e51c:	4618      	mov	r0, r3
 800e51e:	4553      	cmp	r3, sl
 800e520:	db33      	blt.n	800e58a <__lshift+0xb6>
 800e522:	6920      	ldr	r0, [r4, #16]
 800e524:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e528:	f104 0314 	add.w	r3, r4, #20
 800e52c:	f019 091f 	ands.w	r9, r9, #31
 800e530:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e534:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e538:	d02b      	beq.n	800e592 <__lshift+0xbe>
 800e53a:	f1c9 0e20 	rsb	lr, r9, #32
 800e53e:	468a      	mov	sl, r1
 800e540:	2200      	movs	r2, #0
 800e542:	6818      	ldr	r0, [r3, #0]
 800e544:	fa00 f009 	lsl.w	r0, r0, r9
 800e548:	4310      	orrs	r0, r2
 800e54a:	f84a 0b04 	str.w	r0, [sl], #4
 800e54e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e552:	459c      	cmp	ip, r3
 800e554:	fa22 f20e 	lsr.w	r2, r2, lr
 800e558:	d8f3      	bhi.n	800e542 <__lshift+0x6e>
 800e55a:	ebac 0304 	sub.w	r3, ip, r4
 800e55e:	3b15      	subs	r3, #21
 800e560:	f023 0303 	bic.w	r3, r3, #3
 800e564:	3304      	adds	r3, #4
 800e566:	f104 0015 	add.w	r0, r4, #21
 800e56a:	4560      	cmp	r0, ip
 800e56c:	bf88      	it	hi
 800e56e:	2304      	movhi	r3, #4
 800e570:	50ca      	str	r2, [r1, r3]
 800e572:	b10a      	cbz	r2, 800e578 <__lshift+0xa4>
 800e574:	f108 0602 	add.w	r6, r8, #2
 800e578:	3e01      	subs	r6, #1
 800e57a:	4638      	mov	r0, r7
 800e57c:	612e      	str	r6, [r5, #16]
 800e57e:	4621      	mov	r1, r4
 800e580:	f7ff fde2 	bl	800e148 <_Bfree>
 800e584:	4628      	mov	r0, r5
 800e586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e58a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e58e:	3301      	adds	r3, #1
 800e590:	e7c5      	b.n	800e51e <__lshift+0x4a>
 800e592:	3904      	subs	r1, #4
 800e594:	f853 2b04 	ldr.w	r2, [r3], #4
 800e598:	f841 2f04 	str.w	r2, [r1, #4]!
 800e59c:	459c      	cmp	ip, r3
 800e59e:	d8f9      	bhi.n	800e594 <__lshift+0xc0>
 800e5a0:	e7ea      	b.n	800e578 <__lshift+0xa4>
 800e5a2:	bf00      	nop
 800e5a4:	0800f420 	.word	0x0800f420
 800e5a8:	0800f431 	.word	0x0800f431

0800e5ac <__mcmp>:
 800e5ac:	690a      	ldr	r2, [r1, #16]
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	6900      	ldr	r0, [r0, #16]
 800e5b2:	1a80      	subs	r0, r0, r2
 800e5b4:	b530      	push	{r4, r5, lr}
 800e5b6:	d10e      	bne.n	800e5d6 <__mcmp+0x2a>
 800e5b8:	3314      	adds	r3, #20
 800e5ba:	3114      	adds	r1, #20
 800e5bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e5c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e5c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e5c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e5cc:	4295      	cmp	r5, r2
 800e5ce:	d003      	beq.n	800e5d8 <__mcmp+0x2c>
 800e5d0:	d205      	bcs.n	800e5de <__mcmp+0x32>
 800e5d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e5d6:	bd30      	pop	{r4, r5, pc}
 800e5d8:	42a3      	cmp	r3, r4
 800e5da:	d3f3      	bcc.n	800e5c4 <__mcmp+0x18>
 800e5dc:	e7fb      	b.n	800e5d6 <__mcmp+0x2a>
 800e5de:	2001      	movs	r0, #1
 800e5e0:	e7f9      	b.n	800e5d6 <__mcmp+0x2a>
	...

0800e5e4 <__mdiff>:
 800e5e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5e8:	4689      	mov	r9, r1
 800e5ea:	4606      	mov	r6, r0
 800e5ec:	4611      	mov	r1, r2
 800e5ee:	4648      	mov	r0, r9
 800e5f0:	4614      	mov	r4, r2
 800e5f2:	f7ff ffdb 	bl	800e5ac <__mcmp>
 800e5f6:	1e05      	subs	r5, r0, #0
 800e5f8:	d112      	bne.n	800e620 <__mdiff+0x3c>
 800e5fa:	4629      	mov	r1, r5
 800e5fc:	4630      	mov	r0, r6
 800e5fe:	f7ff fd63 	bl	800e0c8 <_Balloc>
 800e602:	4602      	mov	r2, r0
 800e604:	b928      	cbnz	r0, 800e612 <__mdiff+0x2e>
 800e606:	4b3f      	ldr	r3, [pc, #252]	@ (800e704 <__mdiff+0x120>)
 800e608:	f240 2137 	movw	r1, #567	@ 0x237
 800e60c:	483e      	ldr	r0, [pc, #248]	@ (800e708 <__mdiff+0x124>)
 800e60e:	f000 fb11 	bl	800ec34 <__assert_func>
 800e612:	2301      	movs	r3, #1
 800e614:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e618:	4610      	mov	r0, r2
 800e61a:	b003      	add	sp, #12
 800e61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e620:	bfbc      	itt	lt
 800e622:	464b      	movlt	r3, r9
 800e624:	46a1      	movlt	r9, r4
 800e626:	4630      	mov	r0, r6
 800e628:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e62c:	bfba      	itte	lt
 800e62e:	461c      	movlt	r4, r3
 800e630:	2501      	movlt	r5, #1
 800e632:	2500      	movge	r5, #0
 800e634:	f7ff fd48 	bl	800e0c8 <_Balloc>
 800e638:	4602      	mov	r2, r0
 800e63a:	b918      	cbnz	r0, 800e644 <__mdiff+0x60>
 800e63c:	4b31      	ldr	r3, [pc, #196]	@ (800e704 <__mdiff+0x120>)
 800e63e:	f240 2145 	movw	r1, #581	@ 0x245
 800e642:	e7e3      	b.n	800e60c <__mdiff+0x28>
 800e644:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e648:	6926      	ldr	r6, [r4, #16]
 800e64a:	60c5      	str	r5, [r0, #12]
 800e64c:	f109 0310 	add.w	r3, r9, #16
 800e650:	f109 0514 	add.w	r5, r9, #20
 800e654:	f104 0e14 	add.w	lr, r4, #20
 800e658:	f100 0b14 	add.w	fp, r0, #20
 800e65c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e660:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e664:	9301      	str	r3, [sp, #4]
 800e666:	46d9      	mov	r9, fp
 800e668:	f04f 0c00 	mov.w	ip, #0
 800e66c:	9b01      	ldr	r3, [sp, #4]
 800e66e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e672:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e676:	9301      	str	r3, [sp, #4]
 800e678:	fa1f f38a 	uxth.w	r3, sl
 800e67c:	4619      	mov	r1, r3
 800e67e:	b283      	uxth	r3, r0
 800e680:	1acb      	subs	r3, r1, r3
 800e682:	0c00      	lsrs	r0, r0, #16
 800e684:	4463      	add	r3, ip
 800e686:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e68a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e68e:	b29b      	uxth	r3, r3
 800e690:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e694:	4576      	cmp	r6, lr
 800e696:	f849 3b04 	str.w	r3, [r9], #4
 800e69a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e69e:	d8e5      	bhi.n	800e66c <__mdiff+0x88>
 800e6a0:	1b33      	subs	r3, r6, r4
 800e6a2:	3b15      	subs	r3, #21
 800e6a4:	f023 0303 	bic.w	r3, r3, #3
 800e6a8:	3415      	adds	r4, #21
 800e6aa:	3304      	adds	r3, #4
 800e6ac:	42a6      	cmp	r6, r4
 800e6ae:	bf38      	it	cc
 800e6b0:	2304      	movcc	r3, #4
 800e6b2:	441d      	add	r5, r3
 800e6b4:	445b      	add	r3, fp
 800e6b6:	461e      	mov	r6, r3
 800e6b8:	462c      	mov	r4, r5
 800e6ba:	4544      	cmp	r4, r8
 800e6bc:	d30e      	bcc.n	800e6dc <__mdiff+0xf8>
 800e6be:	f108 0103 	add.w	r1, r8, #3
 800e6c2:	1b49      	subs	r1, r1, r5
 800e6c4:	f021 0103 	bic.w	r1, r1, #3
 800e6c8:	3d03      	subs	r5, #3
 800e6ca:	45a8      	cmp	r8, r5
 800e6cc:	bf38      	it	cc
 800e6ce:	2100      	movcc	r1, #0
 800e6d0:	440b      	add	r3, r1
 800e6d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e6d6:	b191      	cbz	r1, 800e6fe <__mdiff+0x11a>
 800e6d8:	6117      	str	r7, [r2, #16]
 800e6da:	e79d      	b.n	800e618 <__mdiff+0x34>
 800e6dc:	f854 1b04 	ldr.w	r1, [r4], #4
 800e6e0:	46e6      	mov	lr, ip
 800e6e2:	0c08      	lsrs	r0, r1, #16
 800e6e4:	fa1c fc81 	uxtah	ip, ip, r1
 800e6e8:	4471      	add	r1, lr
 800e6ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e6ee:	b289      	uxth	r1, r1
 800e6f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e6f4:	f846 1b04 	str.w	r1, [r6], #4
 800e6f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e6fc:	e7dd      	b.n	800e6ba <__mdiff+0xd6>
 800e6fe:	3f01      	subs	r7, #1
 800e700:	e7e7      	b.n	800e6d2 <__mdiff+0xee>
 800e702:	bf00      	nop
 800e704:	0800f420 	.word	0x0800f420
 800e708:	0800f431 	.word	0x0800f431

0800e70c <__d2b>:
 800e70c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e710:	460f      	mov	r7, r1
 800e712:	2101      	movs	r1, #1
 800e714:	ec59 8b10 	vmov	r8, r9, d0
 800e718:	4616      	mov	r6, r2
 800e71a:	f7ff fcd5 	bl	800e0c8 <_Balloc>
 800e71e:	4604      	mov	r4, r0
 800e720:	b930      	cbnz	r0, 800e730 <__d2b+0x24>
 800e722:	4602      	mov	r2, r0
 800e724:	4b23      	ldr	r3, [pc, #140]	@ (800e7b4 <__d2b+0xa8>)
 800e726:	4824      	ldr	r0, [pc, #144]	@ (800e7b8 <__d2b+0xac>)
 800e728:	f240 310f 	movw	r1, #783	@ 0x30f
 800e72c:	f000 fa82 	bl	800ec34 <__assert_func>
 800e730:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e734:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e738:	b10d      	cbz	r5, 800e73e <__d2b+0x32>
 800e73a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e73e:	9301      	str	r3, [sp, #4]
 800e740:	f1b8 0300 	subs.w	r3, r8, #0
 800e744:	d023      	beq.n	800e78e <__d2b+0x82>
 800e746:	4668      	mov	r0, sp
 800e748:	9300      	str	r3, [sp, #0]
 800e74a:	f7ff fd84 	bl	800e256 <__lo0bits>
 800e74e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e752:	b1d0      	cbz	r0, 800e78a <__d2b+0x7e>
 800e754:	f1c0 0320 	rsb	r3, r0, #32
 800e758:	fa02 f303 	lsl.w	r3, r2, r3
 800e75c:	430b      	orrs	r3, r1
 800e75e:	40c2      	lsrs	r2, r0
 800e760:	6163      	str	r3, [r4, #20]
 800e762:	9201      	str	r2, [sp, #4]
 800e764:	9b01      	ldr	r3, [sp, #4]
 800e766:	61a3      	str	r3, [r4, #24]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	bf0c      	ite	eq
 800e76c:	2201      	moveq	r2, #1
 800e76e:	2202      	movne	r2, #2
 800e770:	6122      	str	r2, [r4, #16]
 800e772:	b1a5      	cbz	r5, 800e79e <__d2b+0x92>
 800e774:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e778:	4405      	add	r5, r0
 800e77a:	603d      	str	r5, [r7, #0]
 800e77c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e780:	6030      	str	r0, [r6, #0]
 800e782:	4620      	mov	r0, r4
 800e784:	b003      	add	sp, #12
 800e786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e78a:	6161      	str	r1, [r4, #20]
 800e78c:	e7ea      	b.n	800e764 <__d2b+0x58>
 800e78e:	a801      	add	r0, sp, #4
 800e790:	f7ff fd61 	bl	800e256 <__lo0bits>
 800e794:	9b01      	ldr	r3, [sp, #4]
 800e796:	6163      	str	r3, [r4, #20]
 800e798:	3020      	adds	r0, #32
 800e79a:	2201      	movs	r2, #1
 800e79c:	e7e8      	b.n	800e770 <__d2b+0x64>
 800e79e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e7a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e7a6:	6038      	str	r0, [r7, #0]
 800e7a8:	6918      	ldr	r0, [r3, #16]
 800e7aa:	f7ff fd35 	bl	800e218 <__hi0bits>
 800e7ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e7b2:	e7e5      	b.n	800e780 <__d2b+0x74>
 800e7b4:	0800f420 	.word	0x0800f420
 800e7b8:	0800f431 	.word	0x0800f431

0800e7bc <__ssputs_r>:
 800e7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7c0:	688e      	ldr	r6, [r1, #8]
 800e7c2:	461f      	mov	r7, r3
 800e7c4:	42be      	cmp	r6, r7
 800e7c6:	680b      	ldr	r3, [r1, #0]
 800e7c8:	4682      	mov	sl, r0
 800e7ca:	460c      	mov	r4, r1
 800e7cc:	4690      	mov	r8, r2
 800e7ce:	d82d      	bhi.n	800e82c <__ssputs_r+0x70>
 800e7d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e7d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e7d8:	d026      	beq.n	800e828 <__ssputs_r+0x6c>
 800e7da:	6965      	ldr	r5, [r4, #20]
 800e7dc:	6909      	ldr	r1, [r1, #16]
 800e7de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e7e2:	eba3 0901 	sub.w	r9, r3, r1
 800e7e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e7ea:	1c7b      	adds	r3, r7, #1
 800e7ec:	444b      	add	r3, r9
 800e7ee:	106d      	asrs	r5, r5, #1
 800e7f0:	429d      	cmp	r5, r3
 800e7f2:	bf38      	it	cc
 800e7f4:	461d      	movcc	r5, r3
 800e7f6:	0553      	lsls	r3, r2, #21
 800e7f8:	d527      	bpl.n	800e84a <__ssputs_r+0x8e>
 800e7fa:	4629      	mov	r1, r5
 800e7fc:	f7ff fbd8 	bl	800dfb0 <_malloc_r>
 800e800:	4606      	mov	r6, r0
 800e802:	b360      	cbz	r0, 800e85e <__ssputs_r+0xa2>
 800e804:	6921      	ldr	r1, [r4, #16]
 800e806:	464a      	mov	r2, r9
 800e808:	f000 fa06 	bl	800ec18 <memcpy>
 800e80c:	89a3      	ldrh	r3, [r4, #12]
 800e80e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e816:	81a3      	strh	r3, [r4, #12]
 800e818:	6126      	str	r6, [r4, #16]
 800e81a:	6165      	str	r5, [r4, #20]
 800e81c:	444e      	add	r6, r9
 800e81e:	eba5 0509 	sub.w	r5, r5, r9
 800e822:	6026      	str	r6, [r4, #0]
 800e824:	60a5      	str	r5, [r4, #8]
 800e826:	463e      	mov	r6, r7
 800e828:	42be      	cmp	r6, r7
 800e82a:	d900      	bls.n	800e82e <__ssputs_r+0x72>
 800e82c:	463e      	mov	r6, r7
 800e82e:	6820      	ldr	r0, [r4, #0]
 800e830:	4632      	mov	r2, r6
 800e832:	4641      	mov	r1, r8
 800e834:	f000 f9c6 	bl	800ebc4 <memmove>
 800e838:	68a3      	ldr	r3, [r4, #8]
 800e83a:	1b9b      	subs	r3, r3, r6
 800e83c:	60a3      	str	r3, [r4, #8]
 800e83e:	6823      	ldr	r3, [r4, #0]
 800e840:	4433      	add	r3, r6
 800e842:	6023      	str	r3, [r4, #0]
 800e844:	2000      	movs	r0, #0
 800e846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e84a:	462a      	mov	r2, r5
 800e84c:	f000 fa36 	bl	800ecbc <_realloc_r>
 800e850:	4606      	mov	r6, r0
 800e852:	2800      	cmp	r0, #0
 800e854:	d1e0      	bne.n	800e818 <__ssputs_r+0x5c>
 800e856:	6921      	ldr	r1, [r4, #16]
 800e858:	4650      	mov	r0, sl
 800e85a:	f7ff fb35 	bl	800dec8 <_free_r>
 800e85e:	230c      	movs	r3, #12
 800e860:	f8ca 3000 	str.w	r3, [sl]
 800e864:	89a3      	ldrh	r3, [r4, #12]
 800e866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e86a:	81a3      	strh	r3, [r4, #12]
 800e86c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e870:	e7e9      	b.n	800e846 <__ssputs_r+0x8a>
	...

0800e874 <_svfiprintf_r>:
 800e874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e878:	4698      	mov	r8, r3
 800e87a:	898b      	ldrh	r3, [r1, #12]
 800e87c:	061b      	lsls	r3, r3, #24
 800e87e:	b09d      	sub	sp, #116	@ 0x74
 800e880:	4607      	mov	r7, r0
 800e882:	460d      	mov	r5, r1
 800e884:	4614      	mov	r4, r2
 800e886:	d510      	bpl.n	800e8aa <_svfiprintf_r+0x36>
 800e888:	690b      	ldr	r3, [r1, #16]
 800e88a:	b973      	cbnz	r3, 800e8aa <_svfiprintf_r+0x36>
 800e88c:	2140      	movs	r1, #64	@ 0x40
 800e88e:	f7ff fb8f 	bl	800dfb0 <_malloc_r>
 800e892:	6028      	str	r0, [r5, #0]
 800e894:	6128      	str	r0, [r5, #16]
 800e896:	b930      	cbnz	r0, 800e8a6 <_svfiprintf_r+0x32>
 800e898:	230c      	movs	r3, #12
 800e89a:	603b      	str	r3, [r7, #0]
 800e89c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e8a0:	b01d      	add	sp, #116	@ 0x74
 800e8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8a6:	2340      	movs	r3, #64	@ 0x40
 800e8a8:	616b      	str	r3, [r5, #20]
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8ae:	2320      	movs	r3, #32
 800e8b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e8b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8b8:	2330      	movs	r3, #48	@ 0x30
 800e8ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ea58 <_svfiprintf_r+0x1e4>
 800e8be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e8c2:	f04f 0901 	mov.w	r9, #1
 800e8c6:	4623      	mov	r3, r4
 800e8c8:	469a      	mov	sl, r3
 800e8ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8ce:	b10a      	cbz	r2, 800e8d4 <_svfiprintf_r+0x60>
 800e8d0:	2a25      	cmp	r2, #37	@ 0x25
 800e8d2:	d1f9      	bne.n	800e8c8 <_svfiprintf_r+0x54>
 800e8d4:	ebba 0b04 	subs.w	fp, sl, r4
 800e8d8:	d00b      	beq.n	800e8f2 <_svfiprintf_r+0x7e>
 800e8da:	465b      	mov	r3, fp
 800e8dc:	4622      	mov	r2, r4
 800e8de:	4629      	mov	r1, r5
 800e8e0:	4638      	mov	r0, r7
 800e8e2:	f7ff ff6b 	bl	800e7bc <__ssputs_r>
 800e8e6:	3001      	adds	r0, #1
 800e8e8:	f000 80a7 	beq.w	800ea3a <_svfiprintf_r+0x1c6>
 800e8ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8ee:	445a      	add	r2, fp
 800e8f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800e8f2:	f89a 3000 	ldrb.w	r3, [sl]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	f000 809f 	beq.w	800ea3a <_svfiprintf_r+0x1c6>
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e906:	f10a 0a01 	add.w	sl, sl, #1
 800e90a:	9304      	str	r3, [sp, #16]
 800e90c:	9307      	str	r3, [sp, #28]
 800e90e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e912:	931a      	str	r3, [sp, #104]	@ 0x68
 800e914:	4654      	mov	r4, sl
 800e916:	2205      	movs	r2, #5
 800e918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e91c:	484e      	ldr	r0, [pc, #312]	@ (800ea58 <_svfiprintf_r+0x1e4>)
 800e91e:	f7f1 fc57 	bl	80001d0 <memchr>
 800e922:	9a04      	ldr	r2, [sp, #16]
 800e924:	b9d8      	cbnz	r0, 800e95e <_svfiprintf_r+0xea>
 800e926:	06d0      	lsls	r0, r2, #27
 800e928:	bf44      	itt	mi
 800e92a:	2320      	movmi	r3, #32
 800e92c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e930:	0711      	lsls	r1, r2, #28
 800e932:	bf44      	itt	mi
 800e934:	232b      	movmi	r3, #43	@ 0x2b
 800e936:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e93a:	f89a 3000 	ldrb.w	r3, [sl]
 800e93e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e940:	d015      	beq.n	800e96e <_svfiprintf_r+0xfa>
 800e942:	9a07      	ldr	r2, [sp, #28]
 800e944:	4654      	mov	r4, sl
 800e946:	2000      	movs	r0, #0
 800e948:	f04f 0c0a 	mov.w	ip, #10
 800e94c:	4621      	mov	r1, r4
 800e94e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e952:	3b30      	subs	r3, #48	@ 0x30
 800e954:	2b09      	cmp	r3, #9
 800e956:	d94b      	bls.n	800e9f0 <_svfiprintf_r+0x17c>
 800e958:	b1b0      	cbz	r0, 800e988 <_svfiprintf_r+0x114>
 800e95a:	9207      	str	r2, [sp, #28]
 800e95c:	e014      	b.n	800e988 <_svfiprintf_r+0x114>
 800e95e:	eba0 0308 	sub.w	r3, r0, r8
 800e962:	fa09 f303 	lsl.w	r3, r9, r3
 800e966:	4313      	orrs	r3, r2
 800e968:	9304      	str	r3, [sp, #16]
 800e96a:	46a2      	mov	sl, r4
 800e96c:	e7d2      	b.n	800e914 <_svfiprintf_r+0xa0>
 800e96e:	9b03      	ldr	r3, [sp, #12]
 800e970:	1d19      	adds	r1, r3, #4
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	9103      	str	r1, [sp, #12]
 800e976:	2b00      	cmp	r3, #0
 800e978:	bfbb      	ittet	lt
 800e97a:	425b      	neglt	r3, r3
 800e97c:	f042 0202 	orrlt.w	r2, r2, #2
 800e980:	9307      	strge	r3, [sp, #28]
 800e982:	9307      	strlt	r3, [sp, #28]
 800e984:	bfb8      	it	lt
 800e986:	9204      	strlt	r2, [sp, #16]
 800e988:	7823      	ldrb	r3, [r4, #0]
 800e98a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e98c:	d10a      	bne.n	800e9a4 <_svfiprintf_r+0x130>
 800e98e:	7863      	ldrb	r3, [r4, #1]
 800e990:	2b2a      	cmp	r3, #42	@ 0x2a
 800e992:	d132      	bne.n	800e9fa <_svfiprintf_r+0x186>
 800e994:	9b03      	ldr	r3, [sp, #12]
 800e996:	1d1a      	adds	r2, r3, #4
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	9203      	str	r2, [sp, #12]
 800e99c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e9a0:	3402      	adds	r4, #2
 800e9a2:	9305      	str	r3, [sp, #20]
 800e9a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ea68 <_svfiprintf_r+0x1f4>
 800e9a8:	7821      	ldrb	r1, [r4, #0]
 800e9aa:	2203      	movs	r2, #3
 800e9ac:	4650      	mov	r0, sl
 800e9ae:	f7f1 fc0f 	bl	80001d0 <memchr>
 800e9b2:	b138      	cbz	r0, 800e9c4 <_svfiprintf_r+0x150>
 800e9b4:	9b04      	ldr	r3, [sp, #16]
 800e9b6:	eba0 000a 	sub.w	r0, r0, sl
 800e9ba:	2240      	movs	r2, #64	@ 0x40
 800e9bc:	4082      	lsls	r2, r0
 800e9be:	4313      	orrs	r3, r2
 800e9c0:	3401      	adds	r4, #1
 800e9c2:	9304      	str	r3, [sp, #16]
 800e9c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9c8:	4824      	ldr	r0, [pc, #144]	@ (800ea5c <_svfiprintf_r+0x1e8>)
 800e9ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e9ce:	2206      	movs	r2, #6
 800e9d0:	f7f1 fbfe 	bl	80001d0 <memchr>
 800e9d4:	2800      	cmp	r0, #0
 800e9d6:	d036      	beq.n	800ea46 <_svfiprintf_r+0x1d2>
 800e9d8:	4b21      	ldr	r3, [pc, #132]	@ (800ea60 <_svfiprintf_r+0x1ec>)
 800e9da:	bb1b      	cbnz	r3, 800ea24 <_svfiprintf_r+0x1b0>
 800e9dc:	9b03      	ldr	r3, [sp, #12]
 800e9de:	3307      	adds	r3, #7
 800e9e0:	f023 0307 	bic.w	r3, r3, #7
 800e9e4:	3308      	adds	r3, #8
 800e9e6:	9303      	str	r3, [sp, #12]
 800e9e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9ea:	4433      	add	r3, r6
 800e9ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9ee:	e76a      	b.n	800e8c6 <_svfiprintf_r+0x52>
 800e9f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9f4:	460c      	mov	r4, r1
 800e9f6:	2001      	movs	r0, #1
 800e9f8:	e7a8      	b.n	800e94c <_svfiprintf_r+0xd8>
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	3401      	adds	r4, #1
 800e9fe:	9305      	str	r3, [sp, #20]
 800ea00:	4619      	mov	r1, r3
 800ea02:	f04f 0c0a 	mov.w	ip, #10
 800ea06:	4620      	mov	r0, r4
 800ea08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea0c:	3a30      	subs	r2, #48	@ 0x30
 800ea0e:	2a09      	cmp	r2, #9
 800ea10:	d903      	bls.n	800ea1a <_svfiprintf_r+0x1a6>
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d0c6      	beq.n	800e9a4 <_svfiprintf_r+0x130>
 800ea16:	9105      	str	r1, [sp, #20]
 800ea18:	e7c4      	b.n	800e9a4 <_svfiprintf_r+0x130>
 800ea1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea1e:	4604      	mov	r4, r0
 800ea20:	2301      	movs	r3, #1
 800ea22:	e7f0      	b.n	800ea06 <_svfiprintf_r+0x192>
 800ea24:	ab03      	add	r3, sp, #12
 800ea26:	9300      	str	r3, [sp, #0]
 800ea28:	462a      	mov	r2, r5
 800ea2a:	4b0e      	ldr	r3, [pc, #56]	@ (800ea64 <_svfiprintf_r+0x1f0>)
 800ea2c:	a904      	add	r1, sp, #16
 800ea2e:	4638      	mov	r0, r7
 800ea30:	f7fd fe94 	bl	800c75c <_printf_float>
 800ea34:	1c42      	adds	r2, r0, #1
 800ea36:	4606      	mov	r6, r0
 800ea38:	d1d6      	bne.n	800e9e8 <_svfiprintf_r+0x174>
 800ea3a:	89ab      	ldrh	r3, [r5, #12]
 800ea3c:	065b      	lsls	r3, r3, #25
 800ea3e:	f53f af2d 	bmi.w	800e89c <_svfiprintf_r+0x28>
 800ea42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea44:	e72c      	b.n	800e8a0 <_svfiprintf_r+0x2c>
 800ea46:	ab03      	add	r3, sp, #12
 800ea48:	9300      	str	r3, [sp, #0]
 800ea4a:	462a      	mov	r2, r5
 800ea4c:	4b05      	ldr	r3, [pc, #20]	@ (800ea64 <_svfiprintf_r+0x1f0>)
 800ea4e:	a904      	add	r1, sp, #16
 800ea50:	4638      	mov	r0, r7
 800ea52:	f7fe f91b 	bl	800cc8c <_printf_i>
 800ea56:	e7ed      	b.n	800ea34 <_svfiprintf_r+0x1c0>
 800ea58:	0800f48a 	.word	0x0800f48a
 800ea5c:	0800f494 	.word	0x0800f494
 800ea60:	0800c75d 	.word	0x0800c75d
 800ea64:	0800e7bd 	.word	0x0800e7bd
 800ea68:	0800f490 	.word	0x0800f490

0800ea6c <__sflush_r>:
 800ea6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ea70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea74:	0716      	lsls	r6, r2, #28
 800ea76:	4605      	mov	r5, r0
 800ea78:	460c      	mov	r4, r1
 800ea7a:	d454      	bmi.n	800eb26 <__sflush_r+0xba>
 800ea7c:	684b      	ldr	r3, [r1, #4]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	dc02      	bgt.n	800ea88 <__sflush_r+0x1c>
 800ea82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	dd48      	ble.n	800eb1a <__sflush_r+0xae>
 800ea88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea8a:	2e00      	cmp	r6, #0
 800ea8c:	d045      	beq.n	800eb1a <__sflush_r+0xae>
 800ea8e:	2300      	movs	r3, #0
 800ea90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ea94:	682f      	ldr	r7, [r5, #0]
 800ea96:	6a21      	ldr	r1, [r4, #32]
 800ea98:	602b      	str	r3, [r5, #0]
 800ea9a:	d030      	beq.n	800eafe <__sflush_r+0x92>
 800ea9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ea9e:	89a3      	ldrh	r3, [r4, #12]
 800eaa0:	0759      	lsls	r1, r3, #29
 800eaa2:	d505      	bpl.n	800eab0 <__sflush_r+0x44>
 800eaa4:	6863      	ldr	r3, [r4, #4]
 800eaa6:	1ad2      	subs	r2, r2, r3
 800eaa8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eaaa:	b10b      	cbz	r3, 800eab0 <__sflush_r+0x44>
 800eaac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eaae:	1ad2      	subs	r2, r2, r3
 800eab0:	2300      	movs	r3, #0
 800eab2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eab4:	6a21      	ldr	r1, [r4, #32]
 800eab6:	4628      	mov	r0, r5
 800eab8:	47b0      	blx	r6
 800eaba:	1c43      	adds	r3, r0, #1
 800eabc:	89a3      	ldrh	r3, [r4, #12]
 800eabe:	d106      	bne.n	800eace <__sflush_r+0x62>
 800eac0:	6829      	ldr	r1, [r5, #0]
 800eac2:	291d      	cmp	r1, #29
 800eac4:	d82b      	bhi.n	800eb1e <__sflush_r+0xb2>
 800eac6:	4a2a      	ldr	r2, [pc, #168]	@ (800eb70 <__sflush_r+0x104>)
 800eac8:	40ca      	lsrs	r2, r1
 800eaca:	07d6      	lsls	r6, r2, #31
 800eacc:	d527      	bpl.n	800eb1e <__sflush_r+0xb2>
 800eace:	2200      	movs	r2, #0
 800ead0:	6062      	str	r2, [r4, #4]
 800ead2:	04d9      	lsls	r1, r3, #19
 800ead4:	6922      	ldr	r2, [r4, #16]
 800ead6:	6022      	str	r2, [r4, #0]
 800ead8:	d504      	bpl.n	800eae4 <__sflush_r+0x78>
 800eada:	1c42      	adds	r2, r0, #1
 800eadc:	d101      	bne.n	800eae2 <__sflush_r+0x76>
 800eade:	682b      	ldr	r3, [r5, #0]
 800eae0:	b903      	cbnz	r3, 800eae4 <__sflush_r+0x78>
 800eae2:	6560      	str	r0, [r4, #84]	@ 0x54
 800eae4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eae6:	602f      	str	r7, [r5, #0]
 800eae8:	b1b9      	cbz	r1, 800eb1a <__sflush_r+0xae>
 800eaea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eaee:	4299      	cmp	r1, r3
 800eaf0:	d002      	beq.n	800eaf8 <__sflush_r+0x8c>
 800eaf2:	4628      	mov	r0, r5
 800eaf4:	f7ff f9e8 	bl	800dec8 <_free_r>
 800eaf8:	2300      	movs	r3, #0
 800eafa:	6363      	str	r3, [r4, #52]	@ 0x34
 800eafc:	e00d      	b.n	800eb1a <__sflush_r+0xae>
 800eafe:	2301      	movs	r3, #1
 800eb00:	4628      	mov	r0, r5
 800eb02:	47b0      	blx	r6
 800eb04:	4602      	mov	r2, r0
 800eb06:	1c50      	adds	r0, r2, #1
 800eb08:	d1c9      	bne.n	800ea9e <__sflush_r+0x32>
 800eb0a:	682b      	ldr	r3, [r5, #0]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d0c6      	beq.n	800ea9e <__sflush_r+0x32>
 800eb10:	2b1d      	cmp	r3, #29
 800eb12:	d001      	beq.n	800eb18 <__sflush_r+0xac>
 800eb14:	2b16      	cmp	r3, #22
 800eb16:	d11e      	bne.n	800eb56 <__sflush_r+0xea>
 800eb18:	602f      	str	r7, [r5, #0]
 800eb1a:	2000      	movs	r0, #0
 800eb1c:	e022      	b.n	800eb64 <__sflush_r+0xf8>
 800eb1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb22:	b21b      	sxth	r3, r3
 800eb24:	e01b      	b.n	800eb5e <__sflush_r+0xf2>
 800eb26:	690f      	ldr	r7, [r1, #16]
 800eb28:	2f00      	cmp	r7, #0
 800eb2a:	d0f6      	beq.n	800eb1a <__sflush_r+0xae>
 800eb2c:	0793      	lsls	r3, r2, #30
 800eb2e:	680e      	ldr	r6, [r1, #0]
 800eb30:	bf08      	it	eq
 800eb32:	694b      	ldreq	r3, [r1, #20]
 800eb34:	600f      	str	r7, [r1, #0]
 800eb36:	bf18      	it	ne
 800eb38:	2300      	movne	r3, #0
 800eb3a:	eba6 0807 	sub.w	r8, r6, r7
 800eb3e:	608b      	str	r3, [r1, #8]
 800eb40:	f1b8 0f00 	cmp.w	r8, #0
 800eb44:	dde9      	ble.n	800eb1a <__sflush_r+0xae>
 800eb46:	6a21      	ldr	r1, [r4, #32]
 800eb48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eb4a:	4643      	mov	r3, r8
 800eb4c:	463a      	mov	r2, r7
 800eb4e:	4628      	mov	r0, r5
 800eb50:	47b0      	blx	r6
 800eb52:	2800      	cmp	r0, #0
 800eb54:	dc08      	bgt.n	800eb68 <__sflush_r+0xfc>
 800eb56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb5e:	81a3      	strh	r3, [r4, #12]
 800eb60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb68:	4407      	add	r7, r0
 800eb6a:	eba8 0800 	sub.w	r8, r8, r0
 800eb6e:	e7e7      	b.n	800eb40 <__sflush_r+0xd4>
 800eb70:	20400001 	.word	0x20400001

0800eb74 <_fflush_r>:
 800eb74:	b538      	push	{r3, r4, r5, lr}
 800eb76:	690b      	ldr	r3, [r1, #16]
 800eb78:	4605      	mov	r5, r0
 800eb7a:	460c      	mov	r4, r1
 800eb7c:	b913      	cbnz	r3, 800eb84 <_fflush_r+0x10>
 800eb7e:	2500      	movs	r5, #0
 800eb80:	4628      	mov	r0, r5
 800eb82:	bd38      	pop	{r3, r4, r5, pc}
 800eb84:	b118      	cbz	r0, 800eb8e <_fflush_r+0x1a>
 800eb86:	6a03      	ldr	r3, [r0, #32]
 800eb88:	b90b      	cbnz	r3, 800eb8e <_fflush_r+0x1a>
 800eb8a:	f7fe fa29 	bl	800cfe0 <__sinit>
 800eb8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d0f3      	beq.n	800eb7e <_fflush_r+0xa>
 800eb96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eb98:	07d0      	lsls	r0, r2, #31
 800eb9a:	d404      	bmi.n	800eba6 <_fflush_r+0x32>
 800eb9c:	0599      	lsls	r1, r3, #22
 800eb9e:	d402      	bmi.n	800eba6 <_fflush_r+0x32>
 800eba0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eba2:	f7fe fb36 	bl	800d212 <__retarget_lock_acquire_recursive>
 800eba6:	4628      	mov	r0, r5
 800eba8:	4621      	mov	r1, r4
 800ebaa:	f7ff ff5f 	bl	800ea6c <__sflush_r>
 800ebae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ebb0:	07da      	lsls	r2, r3, #31
 800ebb2:	4605      	mov	r5, r0
 800ebb4:	d4e4      	bmi.n	800eb80 <_fflush_r+0xc>
 800ebb6:	89a3      	ldrh	r3, [r4, #12]
 800ebb8:	059b      	lsls	r3, r3, #22
 800ebba:	d4e1      	bmi.n	800eb80 <_fflush_r+0xc>
 800ebbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ebbe:	f7fe fb29 	bl	800d214 <__retarget_lock_release_recursive>
 800ebc2:	e7dd      	b.n	800eb80 <_fflush_r+0xc>

0800ebc4 <memmove>:
 800ebc4:	4288      	cmp	r0, r1
 800ebc6:	b510      	push	{r4, lr}
 800ebc8:	eb01 0402 	add.w	r4, r1, r2
 800ebcc:	d902      	bls.n	800ebd4 <memmove+0x10>
 800ebce:	4284      	cmp	r4, r0
 800ebd0:	4623      	mov	r3, r4
 800ebd2:	d807      	bhi.n	800ebe4 <memmove+0x20>
 800ebd4:	1e43      	subs	r3, r0, #1
 800ebd6:	42a1      	cmp	r1, r4
 800ebd8:	d008      	beq.n	800ebec <memmove+0x28>
 800ebda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebde:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ebe2:	e7f8      	b.n	800ebd6 <memmove+0x12>
 800ebe4:	4402      	add	r2, r0
 800ebe6:	4601      	mov	r1, r0
 800ebe8:	428a      	cmp	r2, r1
 800ebea:	d100      	bne.n	800ebee <memmove+0x2a>
 800ebec:	bd10      	pop	{r4, pc}
 800ebee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ebf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ebf6:	e7f7      	b.n	800ebe8 <memmove+0x24>

0800ebf8 <_sbrk_r>:
 800ebf8:	b538      	push	{r3, r4, r5, lr}
 800ebfa:	4d06      	ldr	r5, [pc, #24]	@ (800ec14 <_sbrk_r+0x1c>)
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	4604      	mov	r4, r0
 800ec00:	4608      	mov	r0, r1
 800ec02:	602b      	str	r3, [r5, #0]
 800ec04:	f7f3 fde4 	bl	80027d0 <_sbrk>
 800ec08:	1c43      	adds	r3, r0, #1
 800ec0a:	d102      	bne.n	800ec12 <_sbrk_r+0x1a>
 800ec0c:	682b      	ldr	r3, [r5, #0]
 800ec0e:	b103      	cbz	r3, 800ec12 <_sbrk_r+0x1a>
 800ec10:	6023      	str	r3, [r4, #0]
 800ec12:	bd38      	pop	{r3, r4, r5, pc}
 800ec14:	20005fc8 	.word	0x20005fc8

0800ec18 <memcpy>:
 800ec18:	440a      	add	r2, r1
 800ec1a:	4291      	cmp	r1, r2
 800ec1c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ec20:	d100      	bne.n	800ec24 <memcpy+0xc>
 800ec22:	4770      	bx	lr
 800ec24:	b510      	push	{r4, lr}
 800ec26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec2e:	4291      	cmp	r1, r2
 800ec30:	d1f9      	bne.n	800ec26 <memcpy+0xe>
 800ec32:	bd10      	pop	{r4, pc}

0800ec34 <__assert_func>:
 800ec34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec36:	4614      	mov	r4, r2
 800ec38:	461a      	mov	r2, r3
 800ec3a:	4b09      	ldr	r3, [pc, #36]	@ (800ec60 <__assert_func+0x2c>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	4605      	mov	r5, r0
 800ec40:	68d8      	ldr	r0, [r3, #12]
 800ec42:	b14c      	cbz	r4, 800ec58 <__assert_func+0x24>
 800ec44:	4b07      	ldr	r3, [pc, #28]	@ (800ec64 <__assert_func+0x30>)
 800ec46:	9100      	str	r1, [sp, #0]
 800ec48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec4c:	4906      	ldr	r1, [pc, #24]	@ (800ec68 <__assert_func+0x34>)
 800ec4e:	462b      	mov	r3, r5
 800ec50:	f000 f870 	bl	800ed34 <fiprintf>
 800ec54:	f000 f880 	bl	800ed58 <abort>
 800ec58:	4b04      	ldr	r3, [pc, #16]	@ (800ec6c <__assert_func+0x38>)
 800ec5a:	461c      	mov	r4, r3
 800ec5c:	e7f3      	b.n	800ec46 <__assert_func+0x12>
 800ec5e:	bf00      	nop
 800ec60:	20000150 	.word	0x20000150
 800ec64:	0800f4a5 	.word	0x0800f4a5
 800ec68:	0800f4b2 	.word	0x0800f4b2
 800ec6c:	0800f4e0 	.word	0x0800f4e0

0800ec70 <_calloc_r>:
 800ec70:	b570      	push	{r4, r5, r6, lr}
 800ec72:	fba1 5402 	umull	r5, r4, r1, r2
 800ec76:	b934      	cbnz	r4, 800ec86 <_calloc_r+0x16>
 800ec78:	4629      	mov	r1, r5
 800ec7a:	f7ff f999 	bl	800dfb0 <_malloc_r>
 800ec7e:	4606      	mov	r6, r0
 800ec80:	b928      	cbnz	r0, 800ec8e <_calloc_r+0x1e>
 800ec82:	4630      	mov	r0, r6
 800ec84:	bd70      	pop	{r4, r5, r6, pc}
 800ec86:	220c      	movs	r2, #12
 800ec88:	6002      	str	r2, [r0, #0]
 800ec8a:	2600      	movs	r6, #0
 800ec8c:	e7f9      	b.n	800ec82 <_calloc_r+0x12>
 800ec8e:	462a      	mov	r2, r5
 800ec90:	4621      	mov	r1, r4
 800ec92:	f7fe fa40 	bl	800d116 <memset>
 800ec96:	e7f4      	b.n	800ec82 <_calloc_r+0x12>

0800ec98 <__ascii_mbtowc>:
 800ec98:	b082      	sub	sp, #8
 800ec9a:	b901      	cbnz	r1, 800ec9e <__ascii_mbtowc+0x6>
 800ec9c:	a901      	add	r1, sp, #4
 800ec9e:	b142      	cbz	r2, 800ecb2 <__ascii_mbtowc+0x1a>
 800eca0:	b14b      	cbz	r3, 800ecb6 <__ascii_mbtowc+0x1e>
 800eca2:	7813      	ldrb	r3, [r2, #0]
 800eca4:	600b      	str	r3, [r1, #0]
 800eca6:	7812      	ldrb	r2, [r2, #0]
 800eca8:	1e10      	subs	r0, r2, #0
 800ecaa:	bf18      	it	ne
 800ecac:	2001      	movne	r0, #1
 800ecae:	b002      	add	sp, #8
 800ecb0:	4770      	bx	lr
 800ecb2:	4610      	mov	r0, r2
 800ecb4:	e7fb      	b.n	800ecae <__ascii_mbtowc+0x16>
 800ecb6:	f06f 0001 	mvn.w	r0, #1
 800ecba:	e7f8      	b.n	800ecae <__ascii_mbtowc+0x16>

0800ecbc <_realloc_r>:
 800ecbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecc0:	4607      	mov	r7, r0
 800ecc2:	4614      	mov	r4, r2
 800ecc4:	460d      	mov	r5, r1
 800ecc6:	b921      	cbnz	r1, 800ecd2 <_realloc_r+0x16>
 800ecc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eccc:	4611      	mov	r1, r2
 800ecce:	f7ff b96f 	b.w	800dfb0 <_malloc_r>
 800ecd2:	b92a      	cbnz	r2, 800ece0 <_realloc_r+0x24>
 800ecd4:	f7ff f8f8 	bl	800dec8 <_free_r>
 800ecd8:	4625      	mov	r5, r4
 800ecda:	4628      	mov	r0, r5
 800ecdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ece0:	f000 f841 	bl	800ed66 <_malloc_usable_size_r>
 800ece4:	4284      	cmp	r4, r0
 800ece6:	4606      	mov	r6, r0
 800ece8:	d802      	bhi.n	800ecf0 <_realloc_r+0x34>
 800ecea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ecee:	d8f4      	bhi.n	800ecda <_realloc_r+0x1e>
 800ecf0:	4621      	mov	r1, r4
 800ecf2:	4638      	mov	r0, r7
 800ecf4:	f7ff f95c 	bl	800dfb0 <_malloc_r>
 800ecf8:	4680      	mov	r8, r0
 800ecfa:	b908      	cbnz	r0, 800ed00 <_realloc_r+0x44>
 800ecfc:	4645      	mov	r5, r8
 800ecfe:	e7ec      	b.n	800ecda <_realloc_r+0x1e>
 800ed00:	42b4      	cmp	r4, r6
 800ed02:	4622      	mov	r2, r4
 800ed04:	4629      	mov	r1, r5
 800ed06:	bf28      	it	cs
 800ed08:	4632      	movcs	r2, r6
 800ed0a:	f7ff ff85 	bl	800ec18 <memcpy>
 800ed0e:	4629      	mov	r1, r5
 800ed10:	4638      	mov	r0, r7
 800ed12:	f7ff f8d9 	bl	800dec8 <_free_r>
 800ed16:	e7f1      	b.n	800ecfc <_realloc_r+0x40>

0800ed18 <__ascii_wctomb>:
 800ed18:	4603      	mov	r3, r0
 800ed1a:	4608      	mov	r0, r1
 800ed1c:	b141      	cbz	r1, 800ed30 <__ascii_wctomb+0x18>
 800ed1e:	2aff      	cmp	r2, #255	@ 0xff
 800ed20:	d904      	bls.n	800ed2c <__ascii_wctomb+0x14>
 800ed22:	228a      	movs	r2, #138	@ 0x8a
 800ed24:	601a      	str	r2, [r3, #0]
 800ed26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed2a:	4770      	bx	lr
 800ed2c:	700a      	strb	r2, [r1, #0]
 800ed2e:	2001      	movs	r0, #1
 800ed30:	4770      	bx	lr
	...

0800ed34 <fiprintf>:
 800ed34:	b40e      	push	{r1, r2, r3}
 800ed36:	b503      	push	{r0, r1, lr}
 800ed38:	4601      	mov	r1, r0
 800ed3a:	ab03      	add	r3, sp, #12
 800ed3c:	4805      	ldr	r0, [pc, #20]	@ (800ed54 <fiprintf+0x20>)
 800ed3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed42:	6800      	ldr	r0, [r0, #0]
 800ed44:	9301      	str	r3, [sp, #4]
 800ed46:	f000 f83f 	bl	800edc8 <_vfiprintf_r>
 800ed4a:	b002      	add	sp, #8
 800ed4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed50:	b003      	add	sp, #12
 800ed52:	4770      	bx	lr
 800ed54:	20000150 	.word	0x20000150

0800ed58 <abort>:
 800ed58:	b508      	push	{r3, lr}
 800ed5a:	2006      	movs	r0, #6
 800ed5c:	f000 fa08 	bl	800f170 <raise>
 800ed60:	2001      	movs	r0, #1
 800ed62:	f7f3 fcbd 	bl	80026e0 <_exit>

0800ed66 <_malloc_usable_size_r>:
 800ed66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed6a:	1f18      	subs	r0, r3, #4
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	bfbc      	itt	lt
 800ed70:	580b      	ldrlt	r3, [r1, r0]
 800ed72:	18c0      	addlt	r0, r0, r3
 800ed74:	4770      	bx	lr

0800ed76 <__sfputc_r>:
 800ed76:	6893      	ldr	r3, [r2, #8]
 800ed78:	3b01      	subs	r3, #1
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	b410      	push	{r4}
 800ed7e:	6093      	str	r3, [r2, #8]
 800ed80:	da08      	bge.n	800ed94 <__sfputc_r+0x1e>
 800ed82:	6994      	ldr	r4, [r2, #24]
 800ed84:	42a3      	cmp	r3, r4
 800ed86:	db01      	blt.n	800ed8c <__sfputc_r+0x16>
 800ed88:	290a      	cmp	r1, #10
 800ed8a:	d103      	bne.n	800ed94 <__sfputc_r+0x1e>
 800ed8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed90:	f000 b932 	b.w	800eff8 <__swbuf_r>
 800ed94:	6813      	ldr	r3, [r2, #0]
 800ed96:	1c58      	adds	r0, r3, #1
 800ed98:	6010      	str	r0, [r2, #0]
 800ed9a:	7019      	strb	r1, [r3, #0]
 800ed9c:	4608      	mov	r0, r1
 800ed9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eda2:	4770      	bx	lr

0800eda4 <__sfputs_r>:
 800eda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eda6:	4606      	mov	r6, r0
 800eda8:	460f      	mov	r7, r1
 800edaa:	4614      	mov	r4, r2
 800edac:	18d5      	adds	r5, r2, r3
 800edae:	42ac      	cmp	r4, r5
 800edb0:	d101      	bne.n	800edb6 <__sfputs_r+0x12>
 800edb2:	2000      	movs	r0, #0
 800edb4:	e007      	b.n	800edc6 <__sfputs_r+0x22>
 800edb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edba:	463a      	mov	r2, r7
 800edbc:	4630      	mov	r0, r6
 800edbe:	f7ff ffda 	bl	800ed76 <__sfputc_r>
 800edc2:	1c43      	adds	r3, r0, #1
 800edc4:	d1f3      	bne.n	800edae <__sfputs_r+0xa>
 800edc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800edc8 <_vfiprintf_r>:
 800edc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edcc:	460d      	mov	r5, r1
 800edce:	b09d      	sub	sp, #116	@ 0x74
 800edd0:	4614      	mov	r4, r2
 800edd2:	4698      	mov	r8, r3
 800edd4:	4606      	mov	r6, r0
 800edd6:	b118      	cbz	r0, 800ede0 <_vfiprintf_r+0x18>
 800edd8:	6a03      	ldr	r3, [r0, #32]
 800edda:	b90b      	cbnz	r3, 800ede0 <_vfiprintf_r+0x18>
 800eddc:	f7fe f900 	bl	800cfe0 <__sinit>
 800ede0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ede2:	07d9      	lsls	r1, r3, #31
 800ede4:	d405      	bmi.n	800edf2 <_vfiprintf_r+0x2a>
 800ede6:	89ab      	ldrh	r3, [r5, #12]
 800ede8:	059a      	lsls	r2, r3, #22
 800edea:	d402      	bmi.n	800edf2 <_vfiprintf_r+0x2a>
 800edec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800edee:	f7fe fa10 	bl	800d212 <__retarget_lock_acquire_recursive>
 800edf2:	89ab      	ldrh	r3, [r5, #12]
 800edf4:	071b      	lsls	r3, r3, #28
 800edf6:	d501      	bpl.n	800edfc <_vfiprintf_r+0x34>
 800edf8:	692b      	ldr	r3, [r5, #16]
 800edfa:	b99b      	cbnz	r3, 800ee24 <_vfiprintf_r+0x5c>
 800edfc:	4629      	mov	r1, r5
 800edfe:	4630      	mov	r0, r6
 800ee00:	f000 f938 	bl	800f074 <__swsetup_r>
 800ee04:	b170      	cbz	r0, 800ee24 <_vfiprintf_r+0x5c>
 800ee06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee08:	07dc      	lsls	r4, r3, #31
 800ee0a:	d504      	bpl.n	800ee16 <_vfiprintf_r+0x4e>
 800ee0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ee10:	b01d      	add	sp, #116	@ 0x74
 800ee12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee16:	89ab      	ldrh	r3, [r5, #12]
 800ee18:	0598      	lsls	r0, r3, #22
 800ee1a:	d4f7      	bmi.n	800ee0c <_vfiprintf_r+0x44>
 800ee1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee1e:	f7fe f9f9 	bl	800d214 <__retarget_lock_release_recursive>
 800ee22:	e7f3      	b.n	800ee0c <_vfiprintf_r+0x44>
 800ee24:	2300      	movs	r3, #0
 800ee26:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee28:	2320      	movs	r3, #32
 800ee2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee32:	2330      	movs	r3, #48	@ 0x30
 800ee34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800efe4 <_vfiprintf_r+0x21c>
 800ee38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee3c:	f04f 0901 	mov.w	r9, #1
 800ee40:	4623      	mov	r3, r4
 800ee42:	469a      	mov	sl, r3
 800ee44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee48:	b10a      	cbz	r2, 800ee4e <_vfiprintf_r+0x86>
 800ee4a:	2a25      	cmp	r2, #37	@ 0x25
 800ee4c:	d1f9      	bne.n	800ee42 <_vfiprintf_r+0x7a>
 800ee4e:	ebba 0b04 	subs.w	fp, sl, r4
 800ee52:	d00b      	beq.n	800ee6c <_vfiprintf_r+0xa4>
 800ee54:	465b      	mov	r3, fp
 800ee56:	4622      	mov	r2, r4
 800ee58:	4629      	mov	r1, r5
 800ee5a:	4630      	mov	r0, r6
 800ee5c:	f7ff ffa2 	bl	800eda4 <__sfputs_r>
 800ee60:	3001      	adds	r0, #1
 800ee62:	f000 80a7 	beq.w	800efb4 <_vfiprintf_r+0x1ec>
 800ee66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee68:	445a      	add	r2, fp
 800ee6a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	f000 809f 	beq.w	800efb4 <_vfiprintf_r+0x1ec>
 800ee76:	2300      	movs	r3, #0
 800ee78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ee7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee80:	f10a 0a01 	add.w	sl, sl, #1
 800ee84:	9304      	str	r3, [sp, #16]
 800ee86:	9307      	str	r3, [sp, #28]
 800ee88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ee8c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee8e:	4654      	mov	r4, sl
 800ee90:	2205      	movs	r2, #5
 800ee92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee96:	4853      	ldr	r0, [pc, #332]	@ (800efe4 <_vfiprintf_r+0x21c>)
 800ee98:	f7f1 f99a 	bl	80001d0 <memchr>
 800ee9c:	9a04      	ldr	r2, [sp, #16]
 800ee9e:	b9d8      	cbnz	r0, 800eed8 <_vfiprintf_r+0x110>
 800eea0:	06d1      	lsls	r1, r2, #27
 800eea2:	bf44      	itt	mi
 800eea4:	2320      	movmi	r3, #32
 800eea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eeaa:	0713      	lsls	r3, r2, #28
 800eeac:	bf44      	itt	mi
 800eeae:	232b      	movmi	r3, #43	@ 0x2b
 800eeb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eeb4:	f89a 3000 	ldrb.w	r3, [sl]
 800eeb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800eeba:	d015      	beq.n	800eee8 <_vfiprintf_r+0x120>
 800eebc:	9a07      	ldr	r2, [sp, #28]
 800eebe:	4654      	mov	r4, sl
 800eec0:	2000      	movs	r0, #0
 800eec2:	f04f 0c0a 	mov.w	ip, #10
 800eec6:	4621      	mov	r1, r4
 800eec8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eecc:	3b30      	subs	r3, #48	@ 0x30
 800eece:	2b09      	cmp	r3, #9
 800eed0:	d94b      	bls.n	800ef6a <_vfiprintf_r+0x1a2>
 800eed2:	b1b0      	cbz	r0, 800ef02 <_vfiprintf_r+0x13a>
 800eed4:	9207      	str	r2, [sp, #28]
 800eed6:	e014      	b.n	800ef02 <_vfiprintf_r+0x13a>
 800eed8:	eba0 0308 	sub.w	r3, r0, r8
 800eedc:	fa09 f303 	lsl.w	r3, r9, r3
 800eee0:	4313      	orrs	r3, r2
 800eee2:	9304      	str	r3, [sp, #16]
 800eee4:	46a2      	mov	sl, r4
 800eee6:	e7d2      	b.n	800ee8e <_vfiprintf_r+0xc6>
 800eee8:	9b03      	ldr	r3, [sp, #12]
 800eeea:	1d19      	adds	r1, r3, #4
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	9103      	str	r1, [sp, #12]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	bfbb      	ittet	lt
 800eef4:	425b      	neglt	r3, r3
 800eef6:	f042 0202 	orrlt.w	r2, r2, #2
 800eefa:	9307      	strge	r3, [sp, #28]
 800eefc:	9307      	strlt	r3, [sp, #28]
 800eefe:	bfb8      	it	lt
 800ef00:	9204      	strlt	r2, [sp, #16]
 800ef02:	7823      	ldrb	r3, [r4, #0]
 800ef04:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef06:	d10a      	bne.n	800ef1e <_vfiprintf_r+0x156>
 800ef08:	7863      	ldrb	r3, [r4, #1]
 800ef0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef0c:	d132      	bne.n	800ef74 <_vfiprintf_r+0x1ac>
 800ef0e:	9b03      	ldr	r3, [sp, #12]
 800ef10:	1d1a      	adds	r2, r3, #4
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	9203      	str	r2, [sp, #12]
 800ef16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef1a:	3402      	adds	r4, #2
 800ef1c:	9305      	str	r3, [sp, #20]
 800ef1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800eff4 <_vfiprintf_r+0x22c>
 800ef22:	7821      	ldrb	r1, [r4, #0]
 800ef24:	2203      	movs	r2, #3
 800ef26:	4650      	mov	r0, sl
 800ef28:	f7f1 f952 	bl	80001d0 <memchr>
 800ef2c:	b138      	cbz	r0, 800ef3e <_vfiprintf_r+0x176>
 800ef2e:	9b04      	ldr	r3, [sp, #16]
 800ef30:	eba0 000a 	sub.w	r0, r0, sl
 800ef34:	2240      	movs	r2, #64	@ 0x40
 800ef36:	4082      	lsls	r2, r0
 800ef38:	4313      	orrs	r3, r2
 800ef3a:	3401      	adds	r4, #1
 800ef3c:	9304      	str	r3, [sp, #16]
 800ef3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef42:	4829      	ldr	r0, [pc, #164]	@ (800efe8 <_vfiprintf_r+0x220>)
 800ef44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef48:	2206      	movs	r2, #6
 800ef4a:	f7f1 f941 	bl	80001d0 <memchr>
 800ef4e:	2800      	cmp	r0, #0
 800ef50:	d03f      	beq.n	800efd2 <_vfiprintf_r+0x20a>
 800ef52:	4b26      	ldr	r3, [pc, #152]	@ (800efec <_vfiprintf_r+0x224>)
 800ef54:	bb1b      	cbnz	r3, 800ef9e <_vfiprintf_r+0x1d6>
 800ef56:	9b03      	ldr	r3, [sp, #12]
 800ef58:	3307      	adds	r3, #7
 800ef5a:	f023 0307 	bic.w	r3, r3, #7
 800ef5e:	3308      	adds	r3, #8
 800ef60:	9303      	str	r3, [sp, #12]
 800ef62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef64:	443b      	add	r3, r7
 800ef66:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef68:	e76a      	b.n	800ee40 <_vfiprintf_r+0x78>
 800ef6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef6e:	460c      	mov	r4, r1
 800ef70:	2001      	movs	r0, #1
 800ef72:	e7a8      	b.n	800eec6 <_vfiprintf_r+0xfe>
 800ef74:	2300      	movs	r3, #0
 800ef76:	3401      	adds	r4, #1
 800ef78:	9305      	str	r3, [sp, #20]
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	f04f 0c0a 	mov.w	ip, #10
 800ef80:	4620      	mov	r0, r4
 800ef82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef86:	3a30      	subs	r2, #48	@ 0x30
 800ef88:	2a09      	cmp	r2, #9
 800ef8a:	d903      	bls.n	800ef94 <_vfiprintf_r+0x1cc>
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d0c6      	beq.n	800ef1e <_vfiprintf_r+0x156>
 800ef90:	9105      	str	r1, [sp, #20]
 800ef92:	e7c4      	b.n	800ef1e <_vfiprintf_r+0x156>
 800ef94:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef98:	4604      	mov	r4, r0
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	e7f0      	b.n	800ef80 <_vfiprintf_r+0x1b8>
 800ef9e:	ab03      	add	r3, sp, #12
 800efa0:	9300      	str	r3, [sp, #0]
 800efa2:	462a      	mov	r2, r5
 800efa4:	4b12      	ldr	r3, [pc, #72]	@ (800eff0 <_vfiprintf_r+0x228>)
 800efa6:	a904      	add	r1, sp, #16
 800efa8:	4630      	mov	r0, r6
 800efaa:	f7fd fbd7 	bl	800c75c <_printf_float>
 800efae:	4607      	mov	r7, r0
 800efb0:	1c78      	adds	r0, r7, #1
 800efb2:	d1d6      	bne.n	800ef62 <_vfiprintf_r+0x19a>
 800efb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800efb6:	07d9      	lsls	r1, r3, #31
 800efb8:	d405      	bmi.n	800efc6 <_vfiprintf_r+0x1fe>
 800efba:	89ab      	ldrh	r3, [r5, #12]
 800efbc:	059a      	lsls	r2, r3, #22
 800efbe:	d402      	bmi.n	800efc6 <_vfiprintf_r+0x1fe>
 800efc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800efc2:	f7fe f927 	bl	800d214 <__retarget_lock_release_recursive>
 800efc6:	89ab      	ldrh	r3, [r5, #12]
 800efc8:	065b      	lsls	r3, r3, #25
 800efca:	f53f af1f 	bmi.w	800ee0c <_vfiprintf_r+0x44>
 800efce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800efd0:	e71e      	b.n	800ee10 <_vfiprintf_r+0x48>
 800efd2:	ab03      	add	r3, sp, #12
 800efd4:	9300      	str	r3, [sp, #0]
 800efd6:	462a      	mov	r2, r5
 800efd8:	4b05      	ldr	r3, [pc, #20]	@ (800eff0 <_vfiprintf_r+0x228>)
 800efda:	a904      	add	r1, sp, #16
 800efdc:	4630      	mov	r0, r6
 800efde:	f7fd fe55 	bl	800cc8c <_printf_i>
 800efe2:	e7e4      	b.n	800efae <_vfiprintf_r+0x1e6>
 800efe4:	0800f48a 	.word	0x0800f48a
 800efe8:	0800f494 	.word	0x0800f494
 800efec:	0800c75d 	.word	0x0800c75d
 800eff0:	0800eda5 	.word	0x0800eda5
 800eff4:	0800f490 	.word	0x0800f490

0800eff8 <__swbuf_r>:
 800eff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800effa:	460e      	mov	r6, r1
 800effc:	4614      	mov	r4, r2
 800effe:	4605      	mov	r5, r0
 800f000:	b118      	cbz	r0, 800f00a <__swbuf_r+0x12>
 800f002:	6a03      	ldr	r3, [r0, #32]
 800f004:	b90b      	cbnz	r3, 800f00a <__swbuf_r+0x12>
 800f006:	f7fd ffeb 	bl	800cfe0 <__sinit>
 800f00a:	69a3      	ldr	r3, [r4, #24]
 800f00c:	60a3      	str	r3, [r4, #8]
 800f00e:	89a3      	ldrh	r3, [r4, #12]
 800f010:	071a      	lsls	r2, r3, #28
 800f012:	d501      	bpl.n	800f018 <__swbuf_r+0x20>
 800f014:	6923      	ldr	r3, [r4, #16]
 800f016:	b943      	cbnz	r3, 800f02a <__swbuf_r+0x32>
 800f018:	4621      	mov	r1, r4
 800f01a:	4628      	mov	r0, r5
 800f01c:	f000 f82a 	bl	800f074 <__swsetup_r>
 800f020:	b118      	cbz	r0, 800f02a <__swbuf_r+0x32>
 800f022:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f026:	4638      	mov	r0, r7
 800f028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f02a:	6823      	ldr	r3, [r4, #0]
 800f02c:	6922      	ldr	r2, [r4, #16]
 800f02e:	1a98      	subs	r0, r3, r2
 800f030:	6963      	ldr	r3, [r4, #20]
 800f032:	b2f6      	uxtb	r6, r6
 800f034:	4283      	cmp	r3, r0
 800f036:	4637      	mov	r7, r6
 800f038:	dc05      	bgt.n	800f046 <__swbuf_r+0x4e>
 800f03a:	4621      	mov	r1, r4
 800f03c:	4628      	mov	r0, r5
 800f03e:	f7ff fd99 	bl	800eb74 <_fflush_r>
 800f042:	2800      	cmp	r0, #0
 800f044:	d1ed      	bne.n	800f022 <__swbuf_r+0x2a>
 800f046:	68a3      	ldr	r3, [r4, #8]
 800f048:	3b01      	subs	r3, #1
 800f04a:	60a3      	str	r3, [r4, #8]
 800f04c:	6823      	ldr	r3, [r4, #0]
 800f04e:	1c5a      	adds	r2, r3, #1
 800f050:	6022      	str	r2, [r4, #0]
 800f052:	701e      	strb	r6, [r3, #0]
 800f054:	6962      	ldr	r2, [r4, #20]
 800f056:	1c43      	adds	r3, r0, #1
 800f058:	429a      	cmp	r2, r3
 800f05a:	d004      	beq.n	800f066 <__swbuf_r+0x6e>
 800f05c:	89a3      	ldrh	r3, [r4, #12]
 800f05e:	07db      	lsls	r3, r3, #31
 800f060:	d5e1      	bpl.n	800f026 <__swbuf_r+0x2e>
 800f062:	2e0a      	cmp	r6, #10
 800f064:	d1df      	bne.n	800f026 <__swbuf_r+0x2e>
 800f066:	4621      	mov	r1, r4
 800f068:	4628      	mov	r0, r5
 800f06a:	f7ff fd83 	bl	800eb74 <_fflush_r>
 800f06e:	2800      	cmp	r0, #0
 800f070:	d0d9      	beq.n	800f026 <__swbuf_r+0x2e>
 800f072:	e7d6      	b.n	800f022 <__swbuf_r+0x2a>

0800f074 <__swsetup_r>:
 800f074:	b538      	push	{r3, r4, r5, lr}
 800f076:	4b29      	ldr	r3, [pc, #164]	@ (800f11c <__swsetup_r+0xa8>)
 800f078:	4605      	mov	r5, r0
 800f07a:	6818      	ldr	r0, [r3, #0]
 800f07c:	460c      	mov	r4, r1
 800f07e:	b118      	cbz	r0, 800f088 <__swsetup_r+0x14>
 800f080:	6a03      	ldr	r3, [r0, #32]
 800f082:	b90b      	cbnz	r3, 800f088 <__swsetup_r+0x14>
 800f084:	f7fd ffac 	bl	800cfe0 <__sinit>
 800f088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f08c:	0719      	lsls	r1, r3, #28
 800f08e:	d422      	bmi.n	800f0d6 <__swsetup_r+0x62>
 800f090:	06da      	lsls	r2, r3, #27
 800f092:	d407      	bmi.n	800f0a4 <__swsetup_r+0x30>
 800f094:	2209      	movs	r2, #9
 800f096:	602a      	str	r2, [r5, #0]
 800f098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f09c:	81a3      	strh	r3, [r4, #12]
 800f09e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f0a2:	e033      	b.n	800f10c <__swsetup_r+0x98>
 800f0a4:	0758      	lsls	r0, r3, #29
 800f0a6:	d512      	bpl.n	800f0ce <__swsetup_r+0x5a>
 800f0a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f0aa:	b141      	cbz	r1, 800f0be <__swsetup_r+0x4a>
 800f0ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f0b0:	4299      	cmp	r1, r3
 800f0b2:	d002      	beq.n	800f0ba <__swsetup_r+0x46>
 800f0b4:	4628      	mov	r0, r5
 800f0b6:	f7fe ff07 	bl	800dec8 <_free_r>
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800f0be:	89a3      	ldrh	r3, [r4, #12]
 800f0c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f0c4:	81a3      	strh	r3, [r4, #12]
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	6063      	str	r3, [r4, #4]
 800f0ca:	6923      	ldr	r3, [r4, #16]
 800f0cc:	6023      	str	r3, [r4, #0]
 800f0ce:	89a3      	ldrh	r3, [r4, #12]
 800f0d0:	f043 0308 	orr.w	r3, r3, #8
 800f0d4:	81a3      	strh	r3, [r4, #12]
 800f0d6:	6923      	ldr	r3, [r4, #16]
 800f0d8:	b94b      	cbnz	r3, 800f0ee <__swsetup_r+0x7a>
 800f0da:	89a3      	ldrh	r3, [r4, #12]
 800f0dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f0e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f0e4:	d003      	beq.n	800f0ee <__swsetup_r+0x7a>
 800f0e6:	4621      	mov	r1, r4
 800f0e8:	4628      	mov	r0, r5
 800f0ea:	f000 f883 	bl	800f1f4 <__smakebuf_r>
 800f0ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0f2:	f013 0201 	ands.w	r2, r3, #1
 800f0f6:	d00a      	beq.n	800f10e <__swsetup_r+0x9a>
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	60a2      	str	r2, [r4, #8]
 800f0fc:	6962      	ldr	r2, [r4, #20]
 800f0fe:	4252      	negs	r2, r2
 800f100:	61a2      	str	r2, [r4, #24]
 800f102:	6922      	ldr	r2, [r4, #16]
 800f104:	b942      	cbnz	r2, 800f118 <__swsetup_r+0xa4>
 800f106:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f10a:	d1c5      	bne.n	800f098 <__swsetup_r+0x24>
 800f10c:	bd38      	pop	{r3, r4, r5, pc}
 800f10e:	0799      	lsls	r1, r3, #30
 800f110:	bf58      	it	pl
 800f112:	6962      	ldrpl	r2, [r4, #20]
 800f114:	60a2      	str	r2, [r4, #8]
 800f116:	e7f4      	b.n	800f102 <__swsetup_r+0x8e>
 800f118:	2000      	movs	r0, #0
 800f11a:	e7f7      	b.n	800f10c <__swsetup_r+0x98>
 800f11c:	20000150 	.word	0x20000150

0800f120 <_raise_r>:
 800f120:	291f      	cmp	r1, #31
 800f122:	b538      	push	{r3, r4, r5, lr}
 800f124:	4605      	mov	r5, r0
 800f126:	460c      	mov	r4, r1
 800f128:	d904      	bls.n	800f134 <_raise_r+0x14>
 800f12a:	2316      	movs	r3, #22
 800f12c:	6003      	str	r3, [r0, #0]
 800f12e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f132:	bd38      	pop	{r3, r4, r5, pc}
 800f134:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f136:	b112      	cbz	r2, 800f13e <_raise_r+0x1e>
 800f138:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f13c:	b94b      	cbnz	r3, 800f152 <_raise_r+0x32>
 800f13e:	4628      	mov	r0, r5
 800f140:	f000 f830 	bl	800f1a4 <_getpid_r>
 800f144:	4622      	mov	r2, r4
 800f146:	4601      	mov	r1, r0
 800f148:	4628      	mov	r0, r5
 800f14a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f14e:	f000 b817 	b.w	800f180 <_kill_r>
 800f152:	2b01      	cmp	r3, #1
 800f154:	d00a      	beq.n	800f16c <_raise_r+0x4c>
 800f156:	1c59      	adds	r1, r3, #1
 800f158:	d103      	bne.n	800f162 <_raise_r+0x42>
 800f15a:	2316      	movs	r3, #22
 800f15c:	6003      	str	r3, [r0, #0]
 800f15e:	2001      	movs	r0, #1
 800f160:	e7e7      	b.n	800f132 <_raise_r+0x12>
 800f162:	2100      	movs	r1, #0
 800f164:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f168:	4620      	mov	r0, r4
 800f16a:	4798      	blx	r3
 800f16c:	2000      	movs	r0, #0
 800f16e:	e7e0      	b.n	800f132 <_raise_r+0x12>

0800f170 <raise>:
 800f170:	4b02      	ldr	r3, [pc, #8]	@ (800f17c <raise+0xc>)
 800f172:	4601      	mov	r1, r0
 800f174:	6818      	ldr	r0, [r3, #0]
 800f176:	f7ff bfd3 	b.w	800f120 <_raise_r>
 800f17a:	bf00      	nop
 800f17c:	20000150 	.word	0x20000150

0800f180 <_kill_r>:
 800f180:	b538      	push	{r3, r4, r5, lr}
 800f182:	4d07      	ldr	r5, [pc, #28]	@ (800f1a0 <_kill_r+0x20>)
 800f184:	2300      	movs	r3, #0
 800f186:	4604      	mov	r4, r0
 800f188:	4608      	mov	r0, r1
 800f18a:	4611      	mov	r1, r2
 800f18c:	602b      	str	r3, [r5, #0]
 800f18e:	f7f3 fa97 	bl	80026c0 <_kill>
 800f192:	1c43      	adds	r3, r0, #1
 800f194:	d102      	bne.n	800f19c <_kill_r+0x1c>
 800f196:	682b      	ldr	r3, [r5, #0]
 800f198:	b103      	cbz	r3, 800f19c <_kill_r+0x1c>
 800f19a:	6023      	str	r3, [r4, #0]
 800f19c:	bd38      	pop	{r3, r4, r5, pc}
 800f19e:	bf00      	nop
 800f1a0:	20005fc8 	.word	0x20005fc8

0800f1a4 <_getpid_r>:
 800f1a4:	f7f3 ba84 	b.w	80026b0 <_getpid>

0800f1a8 <__swhatbuf_r>:
 800f1a8:	b570      	push	{r4, r5, r6, lr}
 800f1aa:	460c      	mov	r4, r1
 800f1ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1b0:	2900      	cmp	r1, #0
 800f1b2:	b096      	sub	sp, #88	@ 0x58
 800f1b4:	4615      	mov	r5, r2
 800f1b6:	461e      	mov	r6, r3
 800f1b8:	da0d      	bge.n	800f1d6 <__swhatbuf_r+0x2e>
 800f1ba:	89a3      	ldrh	r3, [r4, #12]
 800f1bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f1c0:	f04f 0100 	mov.w	r1, #0
 800f1c4:	bf14      	ite	ne
 800f1c6:	2340      	movne	r3, #64	@ 0x40
 800f1c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f1cc:	2000      	movs	r0, #0
 800f1ce:	6031      	str	r1, [r6, #0]
 800f1d0:	602b      	str	r3, [r5, #0]
 800f1d2:	b016      	add	sp, #88	@ 0x58
 800f1d4:	bd70      	pop	{r4, r5, r6, pc}
 800f1d6:	466a      	mov	r2, sp
 800f1d8:	f000 f848 	bl	800f26c <_fstat_r>
 800f1dc:	2800      	cmp	r0, #0
 800f1de:	dbec      	blt.n	800f1ba <__swhatbuf_r+0x12>
 800f1e0:	9901      	ldr	r1, [sp, #4]
 800f1e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f1e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f1ea:	4259      	negs	r1, r3
 800f1ec:	4159      	adcs	r1, r3
 800f1ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f1f2:	e7eb      	b.n	800f1cc <__swhatbuf_r+0x24>

0800f1f4 <__smakebuf_r>:
 800f1f4:	898b      	ldrh	r3, [r1, #12]
 800f1f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1f8:	079d      	lsls	r5, r3, #30
 800f1fa:	4606      	mov	r6, r0
 800f1fc:	460c      	mov	r4, r1
 800f1fe:	d507      	bpl.n	800f210 <__smakebuf_r+0x1c>
 800f200:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f204:	6023      	str	r3, [r4, #0]
 800f206:	6123      	str	r3, [r4, #16]
 800f208:	2301      	movs	r3, #1
 800f20a:	6163      	str	r3, [r4, #20]
 800f20c:	b003      	add	sp, #12
 800f20e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f210:	ab01      	add	r3, sp, #4
 800f212:	466a      	mov	r2, sp
 800f214:	f7ff ffc8 	bl	800f1a8 <__swhatbuf_r>
 800f218:	9f00      	ldr	r7, [sp, #0]
 800f21a:	4605      	mov	r5, r0
 800f21c:	4639      	mov	r1, r7
 800f21e:	4630      	mov	r0, r6
 800f220:	f7fe fec6 	bl	800dfb0 <_malloc_r>
 800f224:	b948      	cbnz	r0, 800f23a <__smakebuf_r+0x46>
 800f226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f22a:	059a      	lsls	r2, r3, #22
 800f22c:	d4ee      	bmi.n	800f20c <__smakebuf_r+0x18>
 800f22e:	f023 0303 	bic.w	r3, r3, #3
 800f232:	f043 0302 	orr.w	r3, r3, #2
 800f236:	81a3      	strh	r3, [r4, #12]
 800f238:	e7e2      	b.n	800f200 <__smakebuf_r+0xc>
 800f23a:	89a3      	ldrh	r3, [r4, #12]
 800f23c:	6020      	str	r0, [r4, #0]
 800f23e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f242:	81a3      	strh	r3, [r4, #12]
 800f244:	9b01      	ldr	r3, [sp, #4]
 800f246:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f24a:	b15b      	cbz	r3, 800f264 <__smakebuf_r+0x70>
 800f24c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f250:	4630      	mov	r0, r6
 800f252:	f000 f81d 	bl	800f290 <_isatty_r>
 800f256:	b128      	cbz	r0, 800f264 <__smakebuf_r+0x70>
 800f258:	89a3      	ldrh	r3, [r4, #12]
 800f25a:	f023 0303 	bic.w	r3, r3, #3
 800f25e:	f043 0301 	orr.w	r3, r3, #1
 800f262:	81a3      	strh	r3, [r4, #12]
 800f264:	89a3      	ldrh	r3, [r4, #12]
 800f266:	431d      	orrs	r5, r3
 800f268:	81a5      	strh	r5, [r4, #12]
 800f26a:	e7cf      	b.n	800f20c <__smakebuf_r+0x18>

0800f26c <_fstat_r>:
 800f26c:	b538      	push	{r3, r4, r5, lr}
 800f26e:	4d07      	ldr	r5, [pc, #28]	@ (800f28c <_fstat_r+0x20>)
 800f270:	2300      	movs	r3, #0
 800f272:	4604      	mov	r4, r0
 800f274:	4608      	mov	r0, r1
 800f276:	4611      	mov	r1, r2
 800f278:	602b      	str	r3, [r5, #0]
 800f27a:	f7f3 fa81 	bl	8002780 <_fstat>
 800f27e:	1c43      	adds	r3, r0, #1
 800f280:	d102      	bne.n	800f288 <_fstat_r+0x1c>
 800f282:	682b      	ldr	r3, [r5, #0]
 800f284:	b103      	cbz	r3, 800f288 <_fstat_r+0x1c>
 800f286:	6023      	str	r3, [r4, #0]
 800f288:	bd38      	pop	{r3, r4, r5, pc}
 800f28a:	bf00      	nop
 800f28c:	20005fc8 	.word	0x20005fc8

0800f290 <_isatty_r>:
 800f290:	b538      	push	{r3, r4, r5, lr}
 800f292:	4d06      	ldr	r5, [pc, #24]	@ (800f2ac <_isatty_r+0x1c>)
 800f294:	2300      	movs	r3, #0
 800f296:	4604      	mov	r4, r0
 800f298:	4608      	mov	r0, r1
 800f29a:	602b      	str	r3, [r5, #0]
 800f29c:	f7f3 fa80 	bl	80027a0 <_isatty>
 800f2a0:	1c43      	adds	r3, r0, #1
 800f2a2:	d102      	bne.n	800f2aa <_isatty_r+0x1a>
 800f2a4:	682b      	ldr	r3, [r5, #0]
 800f2a6:	b103      	cbz	r3, 800f2aa <_isatty_r+0x1a>
 800f2a8:	6023      	str	r3, [r4, #0]
 800f2aa:	bd38      	pop	{r3, r4, r5, pc}
 800f2ac:	20005fc8 	.word	0x20005fc8

0800f2b0 <_init>:
 800f2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2b2:	bf00      	nop
 800f2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2b6:	bc08      	pop	{r3}
 800f2b8:	469e      	mov	lr, r3
 800f2ba:	4770      	bx	lr

0800f2bc <_fini>:
 800f2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2be:	bf00      	nop
 800f2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2c2:	bc08      	pop	{r3}
 800f2c4:	469e      	mov	lr, r3
 800f2c6:	4770      	bx	lr
